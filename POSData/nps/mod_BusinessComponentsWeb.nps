/** 
* NP6majorversion=6.1.17
* NP6build=B18
* NP6scriptversion=2.56.17
* CreationDate=18.03.2011
* Sotecbuild=B25617
*
* Copyright (c) 2009-2010 McDonald's IT Europe
*
* BusinessComponentsWeb.nps
* This NPS file implements BusinessComponentsWeb DE.
*
* SOTEC History Changes
*
* Version		Date			Name			Detail Description
* 2.50.00		25.01.2010	Olga Illenseer		Take over from 6.1.16 Scripts	
*				25.02.2010	Mihai Secareanu		pmix manager and crew meal solve issue
*2.53.00		30.04.2010	Mihai Secareanu		change the hourly sale  report, the interval send to back office will be now  15 minutes
* 2.56.03		07.10.2010	Mihai Secareanu		optimise the code for generating pmix report and for getting the store-db as RDI requested
* 2.56.11		21.01.2011	Mihai Secareanu		add refund information for tender
*2.56.13		10.02.2011	Mihai Secareanu		review and modify the information tender for refund (there were some wrong indexes previously)
*2.56.16		18.03.2011	Mihai Secareanu		increase the timeout value for calling remote workflow in WayEndOfDayReportsJS
*/

/** Output buffer used to generate report */
var outputBuffer 	= null;

// Defines
var RPT_DT			= "0x81";
var RPT_WT			= "0x82";
var RPT_FC			= "0x83";

/* Root node of XMLs */
var rootConfig		= null;
var rootCash		= null;
var rootPmix		= null;
var rootHourlySales	= null;
var rootView		= null;
var rootSOS			= null;
var rootDetailSOS	= null;
var rootCustom		= null;
var rootProduct		= null;

var rootSOSFC		= null;
var rootSOSDT		= null;
var rootSOSMFY		= null;

var rootTaxTable	= null;

var	BOICommand		= null;
var nodeId			= null;
var posId			= null;
var DrawerChangeType= null;
var storeId			= null;
var businessDate	= null;
var POSversion		= null;

var WSBOI_HEADER	= "<?xml version=\"1.0\"?>"

var CURRENCY_DECIMAL=2;		//	DES-105 // TODO: should be obtained from store db 

// Global variables added for "Pos-db configuration parameter"
var Country = ""; 
xmlStoreDB = null;
xmlPosDB = null;

/**
 * Initializes global variables.
 * @param config configuration xml data (StringBuffer)
 * @param array of data (StringBuffer[])
 * @param requiredDataTypes if this optional parameter is set, it will break
 * if any given required data is not present.
 */
function WS_init(config, data, requiredDataTypes) {

	// Global variables set for "Pos-db configuration parameter"
	if (xmlStoreDB == null) {
	    xmlStoreDB = new XML(API.getStoredb());
	}
	if(xmlPosDB == null)
	{
		xmlPosDB = new XML(API.getPosdb());
	}
	var xmlStore= xmlStoreDB;	
	Country = (xmlStore.StoreDB.StoreProfile.StoreDetails.Country).toUpperCase();

	/** Output buffer used to generate report */
	outputBuffer = new StringBuffer();

	// Defines
	RPT_DT	= "0x81";
	RPT_WT	= "0x82";
	RPT_FC	= "0x83";

	/* Root node of XMLs */
	rootConfig		= null;
	rootCash		= null;
	rootPmix		= null;
	rootHourlySales	= null;
	rootView		= null;
	rootSOS			= null;
	rootDetailSOS	= null;
	rootCustom		= null;
	rootProduct		= null;

	rootSOSFC		= null;
	rootSOSDT		= null;
	rootSOSMFY		= null;

	rootTaxTable	= null;

	BOICommand		= null;
	nodeId			= null;
	posId			= null;
	DrawerChangeType= null;
	storeId			= null;
	businessDate	= null;
	POSversion		= null;

	WSBOI_HEADER	= "<?xml version=\"1.0\"?>"

	rootConfig = new XML(config);

	var matched = 0;
	var requiredDataTypesSize = requiredDataTypes != null ? requiredDataTypes.length : 0;
	var dataType=null;

	BOICommand=rootConfig.CustomData.CommandId.toLowerCase();
	nodeId=rootConfig.CustomData.NodeId;
	posId=rootConfig.CustomData.PosId;
	DrawerChangeType=rootConfig.CustomData.DrawerChangeType;
	storeId=rootConfig.CustomData.StoreId;
	businessDate=rootConfig.CustomData.BusinessDate;
	POSversion=rootConfig.CustomData.POSVersion;

	for (var i = 0; i < data.length; i++) {
		if (data[i] != null) {
			var xml = new XML(data[i]);
			if(0 < xml.@requestDataType.length()) {
				dataType = xml.@requestDataType.toLowerCase();
			}
			if ("cash" == dataType) {
				rootCash = xml;
			} else if ("pmix" == dataType) {
				rootPmix = xml;
			} else if ("boimix" == dataType) {
				rootPmix = xml;
			} else if ("view" == dataType) {
				rootView = xml;
			} else if ("hourlysales" == dataType) {
				rootHourlySales = xml;
			} else if ("sos" == dataType) {
				rootSOS = xml;

				if (rootSOS.StoreTotals.@productionNodeId.length() != 0){
					if(rootSOSDT==null) {					
						rootSOSDT = (rootSOS.StoreTotals.@productionNodeId == "DT")?rootSOS:null;
					}
					if(rootSOSFC==null) {
						rootSOSFC = (rootSOS.StoreTotals.@productionNodeId == "FC")?rootSOS:null;
					}
					if(rootSOSMFY==null) {					
						rootSOSMFY = (rootSOS.StoreTotals.@productionNodeId == "MFY")?rootSOS:null;
					}
				}
			} else if ("custom" == dataType) {
				rootCustom = xml;
			} else if ("prods" == dataType) {
				rootProduct = xml;
			} else if ("detailsos" == dataType) {
				rootDetailSOS = xml;
			} else if ("taxtable" == dataType) {
				rootTaxTable = xml;
			}

			for (var j = 0; j < requiredDataTypesSize; j++) {
				if (requiredDataTypes[j].toLowerCase() == dataType) {
					matched++;
					break;
				}
			}
		}
	}

	if (matched < requiredDataTypesSize) {
		throw new Error("Missing data type for report. Check Configuration.");
	}
}


/**
 * This function returns the resulting report and executes some memory cleanup.
 * @return the report response to kernel
 */
function WS_getResponse() {
	var response	= outputBuffer;
	// Make a cleanup so that the garbage collector can free
	// some memory when the script ends.
	rootConfig		= null;
	rootCash		= null;
	rootPmix		= null;
	rootHourlySales	= null;
	rootView		= null;
	rootSOS			= null;
	rootDetailSOS	= null;
	rootCustom		= null;
	rootProduct		= null;

	rootSOSFC		= null;
	rootSOSDT		= null;
	rootSOSMFY		= null;
	BOICommand		= null;
	nodeId			= null;
	posId			= null;
	DrawerChangeType= null;
	storeId			= null;
	businessDate	= null;

	outputBuffer	= null;
	return response;
}

/** Appends a new line in the xml. */
function WS_addLine(line) {
	if (line != null) {
		outputBuffer.append(line);
	}
	outputBuffer.append("\n");
}

function Nmb2Currency(value) {
	return(API.formatNumber(value,"##0.00",12));
}

function Str2Currency(value) {
	return(API.formatNumber(Number(value),"##0.00",12));
}

function BigDec2Currency(value) {
	return(API.formatNumber(value.toString(),"##0.00",12));
}


/** Wraps XMLElement.findFirst() to ignore null nodes */
function WS_findFirst(node, name) 
{
	if(node == null || name == null) {
		return 0;
	}
	var cmd = "node.." + name + "[0]";
	var value = eval(cmd);
	return value == null ? null : value;
}

/** Gets a numeric attribute, if not found, returns 0 */
function WS_getNumberAttribute(node, attribute) 
{
	if(node != null) {
	
		var cmd = "node.@" + attribute;
		var value = eval(cmd);
		if(value != null && value != "") {
			return Number(value);
		}
	}
	return 0;
}

/**
 * Summs the values of the given attribute from all given nodes.
 * @nodes list of nodes to summ attributes
 * @attributeName name of the attribute to get value from
 * @return the summ of values of 0 if 'nodes' or 'attributeName' are null.
 */
function WS_summNodesAttributeValues(nodes, attributeName) {
	if(nodes == null || attributeName == null) {
		return 0;
	}
	
	var total = 0;
	var size = nodes.length();

	if(size == 1){
		var cmd = "nodes.@" + attributeName;
		var value = eval(cmd);
		total += Number(value);
	}
	else{
		for(var i = 0; i < size; i++) {
			var cmd = "nodes[" + i + "]" + ".@" + attributeName;
			var value = eval(cmd);
			total += Number(value);
		}
	}
	return total;
}

/**
 * Summs the values of the given attribute from all given unique nodes.
 * @nodes list of nodes to summ attributes
 * @attributeName name of the attribute to get value from
 * @return the summ of values of 0 if 'nodes' or 'attributeName' are null.
 */
function WS_summUniqueNodesAttributeValues(nodes, attributeName) 
{
	if(nodes == null || attributeName == null) {
		return 0;
	}
	
	var total = 0;
	var size = nodes.length();
	var iIndex;
	var flagUnique;
	var POSid;
	var POSid2;
	
	if(size == 1){
		var cmd = "nodes.@" + attributeName;
		var value = eval(cmd);	
		total += Number(value);
	}
	else{
		for(var i = 0; i < size; i++) {
			flagUnique=true;
			POSid=eval("nodes[" + i + "]" + ".@id");
			for(iIndex=i+1; iIndex < size; iIndex++) {
				POSid2=eval("nodes[" + iIndex + "]" + ".@id");
				if(POSid==POSid2) {
					flagUnique=false;
				}
			}
			if(true==flagUnique) {
				var cmd = "nodes[" + i + "]" + ".@" + attributeName;
				var value = eval(cmd);
				total += Number(value);
			}
		}
	}
	return total;
}

/**
 * Gets the amount of McCards sold.
 * @param startPoint product mix start point to look data (Can be the root, a POS, etc...)
 * @param dayPart if not null, only the given day part will be included (LUNCH or BREAKFAST)
 * @param saleType if not null, only the given sale type will be included (qtyEatIn or qtyTakeOut)
 */
function WS_getmcCertSalesAmount(startPoint, dayPart, saleType) {

	if((startPoint == null) || (dayPart == null) || (saleType == null)){
		return 0;
	}
	var nodeFamilyGroup = startPoint.FamilyGroup.(@groupName == "GIFT_COUPON");
	if(nodeFamilyGroup == null) {
		return 0;
	}
	var nodesProduct = nodeFamilyGroup.Product;

	var total = 0;
	var valueAmoutEatIn   = 0;
	var valueAmoutTakeOut = 0;
	var valueAmoutOther   = 0;
	for each (var i in nodesProduct) {
		var nodeOperationType = i.OperationType.(@operationType == "SALE");
		if(nodeOperationType != null) {
			if(dayPart == null) {
			    // All day parts
				var nodesPrice = nodeOperationType.Price;
			}else {
				// Just the given day part
				var nodesPrice = nodeOperationType.Price.(@dayPart == dayPart);
			}

			for each (var j in nodesPrice) {
				if(saleType == null) {
				// EatIn + TakeOut
					var qty = WS_getPMixTotalQty(nodesPrice.PMix);
					nodePMix = nodesPrice.PMix;
					valueAmoutEatIn   += Number(nodePMix.@netAmountEatIn == null ? 0 : nodePMix.@netAmountEatIn);
					valueAmoutTakeOut += Number(nodePMix.@netAmountTakeOut == null ? 0 : nodePMix.@netAmountTakeOut);
					valueAmoutOther   += Number(nodePMix.@netAmountOther == null ? 0 : nodePMix.@netAmountOther);
				}else {
					// Just the given sale type
					var qty = WS_getNumberAttribute(nodesPrice.PMix, saleType);
				}
				
				total += (qty * WS_getNumberAttribute(nodesPrice, "salePrice"));

			}
		}
	}
	return total;
}

/**
 * Gets eatin+takeout+other quantity from a "PMix" node.
 * @param nodePMix "PMix" node
 * @return an int representing the total quantity.
 */
function WS_getPMixTotalQty(nodePMix) 
{
	if(nodePMix != null) {
	
		var valueqtyEatIn   = 0;
		var valueqtyTakeOut = 0;
		var valueqtyOther   = 0;
		
		for each (var i in nodePMix) {
			valueqtyEatIn 	+= Number(i.@qtyEatIn);
			valueqtyTakeOut += Number(i.@qtyTakeOut);
			valueqtyOther 	+= Number(i.@qtyOther);
		}
		
		return new Number(valueqtyEatIn)
			+ new Number(valueqtyTakeOut)
			+ new Number(valueqtyOther);
	}else {
		return 0;
	}
}

/**
 * Gets eatin+takeout+other netAmount from a "PMix" node.
 * @param nodePMix "PMix" node
 * @return an int representing the total netAmount.
 */
function WS_getPMixTotalnetAmount(nodePMix) 
{
	if(nodePMix != null) {
	
		var valuenetAmountEatIn   = 0;
		var valuenetAmountTakeOut = 0;
		var valuenetAmountOther   = 0;
		
		for each (var i in nodePMix) {
			valuenetAmountEatIn 	+= Number(i.@netAmtEatIn);
			valuenetAmountTakeOut   += Number(i.@netAmtTakeOut);
			valuenetAmountOther 	+= Number(i.@netAmtOther);
		}
		
		return new Number(valuenetAmountEatIn)
			+ new Number(valuenetAmountTakeOut)
			+ new Number(valuenetAmountOther);
	}else {
		return 0;
	}
}

/** Gets the summ of given attribute values for given POD type */
function WS_getPodCashAttribute(startPoint, pod, attributeName) 
{
	var total = 0;
	if(startPoint != null) {
		var nodesPOS;
		if(0==startPoint.POS.length()) {
			nodesPOS=startPoint;
		}
		else {
			nodesPOS=startPoint.POS;
		}
		var nodesPOSsize = nodesPOS.length();
		for(var i = 0; i < nodesPOSsize; i++) {
			var nodePOS = nodesPOS[i].(@podShort == pod);
			if(nodePOS != null) {
				var nodeCashTotals = nodePOS.CashTotals[0];
				var nodeCash = WS_findFirst(nodeCashTotals, "Cash");
				total += WS_getNumberAttribute(nodeCash, attributeName);
			}
		}
	}
	return total;
}

/**
 * PRIVATE
 * This function implements a generic Sale SOS report
 * Needed data types: CASH, HOURLYSALES, SOS
 * @author Celso Fernandes
 */
 
function generateSOS(config, data, root, reportType) {

var dbgz=0;
//API.dbg("-------1\n");

	if((null==root)||(null==root.POS)) {
		return;
	}

	var flagIsPROD = 0;
	var title;
	var posFC = root.POS.(@podShort=="FC");
	var posDT = root.POS.(@podShort=="DT");
	var	posFCDT = root.StoreTotals;

	orderTarget = root.PresetsTable.@orderTarget;
	lineTarget	= root.PresetsTable.@lineTarget;
	cashTarget	= root.PresetsTable.@cashTarget;
	totalTarget	= root.PresetsTable.@totalTarget;
	storeTarget	= root.PresetsTable.@storeTarget;
	holdTarget	= root.PresetsTable.@holdTarget;
	presentationTarget= root.PresetsTable.@presentationTarget;

	// Check if is production
	if ((posFC.length()!=0) || (posDT.length()!=0)){
		flagIsPROD = 0	// Local 
	}		
	else{
		flagIsPROD = 1	// Prod 
	}

//API.dbg("-------2\n");

//#####################################	
// Header Section	
//#####################################	
	var rootPos;
	switch(reportType) {
	case RPT_FC:
 		if (flagIsPROD == 0){ 		// Local
			if (posFC.length() !=0 ){
				rootPos = posFC;
			}
		}
		else{
			rootPos = rootSOSFC.StoreTotals;
		}
		break;		

	case RPT_DT:
		rootPos = (posDT.length()!=0)?posDT:rootSOSDT.StoreTotals;
		break;		

	case RPT_WT:
	default:
		rootPos = rootSOS.StoreTotals;
		break;		
	}
//API.dbg("-------3\n");

	var totAvc_ac		= 0;
	var totAccum		= 0;
	var totAccumTc		= 0;
	var totAccumcars	= 0;
	var totAccumtts		= 0;

	var totot			= 0;
	var totlt			= 0;
	var totcash			= 0;
	var totpnst			= 0;
	var totovrp			= 0;
	var totovtotl		= 0;
	var tothld			= 0;
	var tothold			= 0;
	var totpvtotl		= 0;

	var totProdSale	 	= 0;
	var totTc			= 0;
	var totcars			= 0;

	var untilTotal		= 0;
	var untilStore		= 0;
	var untilRecall		= 0;
	var untilPay		= 0;
	var untilCloseDrawer= 0;
	var untilServe		= 0;
	var itemsCount		= 0;

	var tcOverOrderPreset= 0;
	var tcOverLinePreset = 0;
	var tcOverCashPreset = 0;
	var tcOverPresentationPreset=0;
	var tcOverTotalPreset= 0;
	var tcOverStorePreset= 0;

	var heldTime		= 0;
	var undoTime		= 0;
	var tcUnder25		= 0;
	var tcOver50		= 0;
	var tcOver60		= 0;
	var tcHeld			= 0;
	var hotTc			= 0;
	var hotUntilStore	= 0;
	var hotUntilRecall	= 0;
	var tcOverHoldPreset = 0;

	var indSegment = 0;
	var nodesDayPart 	= root.DayPartitioning.Segment;	
	var nodesDayPartSize= Number(nodesDayPart.length());

//#####################################	
// Body Section	
//#####################################	
	// Set up line with the information (Quarter hour)
	for (var hourAux = 0; hourAux < 24; hourAux++) {
		for (var minAux = 0; minAux < 60; minAux+=15) {
		
		var idDayPart = 0;
		var nodeSegment = 0;
		var hourSegment = 0;

		var resp=<param/>;

		// Get ative day part		
		for (var k = 0; k < nodesDayPartSize; k++) {
			 if (Number(String(nodesDayPart[k].@begTime).substring(0,4)) == hourAux*100+minAux){
				nodeSegment = nodesDayPart[k];
				hourSegment = String(nodeSegment.@begTime).substring(0,4);	
				indSegment = k;
				break;
			 }	
			else{
				hourSegment="99";
			}
		}

		// Join values by Segment
		while (Number(hourSegment) == (hourAux*100+minAux)) {
			var idDayPart = nodeSegment.@id;
			// Check if is production
			if (flagIsPROD == 0){
				var nodeServiceTime = rootPos.ServiceTime.(@id==idDayPart);
			}
			else{
				var nodeServiceTime = rootPos.ServiceTime.(@segmentId==idDayPart);
			}
			// Accumulate values by Segment
			totTc 				+= Number(nodeServiceTime.@tc);
			totProdSale			+= Number(nodeServiceTime.@totalAmount);
			totcars 			+= Number(nodeServiceTime.@cars);

			untilTotal			+= Number(nodeServiceTime.@untilTotal)/1000;
			untilStore			+= Number(nodeServiceTime.@untilStore)/1000;
			untilRecall			+= Number(nodeServiceTime.@untilRecall)/1000;
			untilPay			+= Number(nodeServiceTime.@untilPay)/1000;
			untilCloseDrawer	+= Number(nodeServiceTime.@untilCloseDrawer)/1000;
			untilServe			+= Number(nodeServiceTime.@untilServe)/1000;

			itemsCount			+= Number(nodeServiceTime.@itemsCount);

			tcOverOrderPreset	+= Number(nodeServiceTime.@tcOverOrderPreset);
			tcOverLinePreset	+= Number(nodeServiceTime.@tcOverLinePreset);
			tcOverCashPreset	+= Number(nodeServiceTime.@tcOverCashPreset);
			tcOverPresentationPreset+= Number(nodeServiceTime.@tcOverPresentationPreset);
			tcOverTotalPreset	+= Number(nodeServiceTime.@tcOverTotalPreset);
			tcOverStorePreset	+= Number(nodeServiceTime.@tcOverStorePreset);

			undoTime			+= Number(nodeServiceTime.ProductionTime.@undoTime)/1000;
			heldTime			+= Number(nodeServiceTime.ProductionTime.@heldTime)/1000;
			tcUnder25			+= Number(nodeServiceTime.ProductionTime.@tcUnder25);
			tcOver50			+= Number(nodeServiceTime.ProductionTime.@tcOver50);
			tcOver60			+= Number(nodeServiceTime.ProductionTime.@tcOver60);
			tcHeld				+= Number(nodeServiceTime.ProductionTime.@tcHeld);

			hotTc				+= Number(nodeServiceTime.ProductionTime.@hotTc);
			hotUntilStore		+= Number(nodeServiceTime.ProductionTime.@hotUntilStore)/1000;
			hotUntilRecall		+= Number(nodeServiceTime.ProductionTime.@hotUntilRecall)/1000;
			tcOverHoldPreset 	+= Number(nodeServiceTime.ProductionTime.@tcOverHoldPreset);

			indSegment++;

			if (Number(indSegment) < Number(nodesDayPartSize)){
				nodeSegment		= nodesDayPart[indSegment];
				hourSegment 	= String(nodeSegment.@begTime).substring(0,4);	
			}
			else{
				hourSegment		="99";
			}
		}

		// Create line for each type of report
		if (reportType == RPT_FC){
			// Create line for Front Counter Sale Report
			totAvc_ac	= (totTc!=0)?totProdSale/totTc:0;
			totAccum 	+= totProdSale;

			var ot		= (totTc!=0)?untilTotal/totTc:0; // Avg Order time 
			var lt		= 0;
			if ((root.POS.@podShort=="HOT")){
				lt 		= (totTc!=0)?untilRecall/totTc:0;
			}
			var cash	= (totTc!=0)?(untilCloseDrawer - untilTotal)/totTc:0; //Avg Cashier Time
			var pnst	= ((totTc!=0)&&(untilServe > untilCloseDrawer))?(untilServe - untilCloseDrawer)/totTc:0;	// SDE-1284
			var totl	= (totTc!=0)?((untilServe > untilCloseDrawer)?untilServe:untilCloseDrawer)/totTc:0; // Avg Total Time	// SDE-1284			
			var ovra	= tcOverPresentationPreset;
			var pvtotl	= tcOverTotalPreset;

			resp.PeriodStartTime=API.formatNumber(hourAux, "00", 2) + API.formatNumber(minAux, "00", 2);
			resp.AvgOrderTime=API.formatNumber(ot, "####0", 5);
			resp.AvgAssemblyTime=API.formatNumber(pnst, "####0", 5);
			resp.AvgCashierTime=API.formatNumber(cash, "####0", 5);
			resp.AvgTotalTime=API.formatNumber(totl, "####0", 5);
			resp.AvgStorageTime=API.formatNumber(lt, "####0", 5);
			resp.OverTimeCount=Number(tcOver50);
			resp.TransactionCount=Number(totTc);
		}


		if (reportType == RPT_DT){	
			totAvc_ac	= (totTc!=0)?Number(totProdSale/totTc):0;			
			totAccum 	+= totProdSale;
			totAccumTc	+= totTc;
			totAccumcars+= totcars;
				
			var ot		= (totTc!=0)?untilStore/totTc:0; // Avg Order Time
			var lt		= (totTc!=0)?(untilRecall-untilStore) /totTc:0;
			var cash	= (totTc!=0)?(untilCloseDrawer - untilRecall)/totTc:0;
            var pnst	= ((totTc!=0)&&(untilServe > untilCloseDrawer))?(untilServe - untilCloseDrawer)/totTc:0;	// SDE-1284 
			var totl	= ot + lt + cash + pnst;
			var ovrp	= tcOverPresentationPreset;
			var ovtotl	= tcOverTotalPreset;
			var hld		= Number(tcHeld); 
			var hold	= (hld!=0)?heldTime/hld:0;
			
			totot		+= Number(ot); 
			totlt		+= Number(lt); 
			totcash		+= Number(cash); 
			totpnst		+= Number(pnst); 
			totovrp		+= Number(ovrp); 
			totovtotl	+= Number(ovtotl); 
			tothld		+= Number(hld); 
			tothold		+= Number(hold); 
			totpvtotl	+= Number(totl); 

			var cars		= totcars;
			var orderTime	= (totTc!=0)?untilStore/totTc:0;
			var lineTime	= (totTc!=0)?(untilRecall-untilStore) /totTc:0;
			var cashTime	= (totTc!=0)?(untilCloseDrawer - untilRecall)/totTc:0;
			var psntTime	= ((totTc!=0)&&(untilServe > untilCloseDrawer))?(untilServe - untilCloseDrawer)/totTc:0;	// SDE-1284
			var posTime		= orderTime + lineTime + cashTime + psntTime;
			var ov90		= tcOverPresentationPreset;
		
			resp.PeriodStartTime=API.formatNumber(hourAux, "00", 2) + API.formatNumber(minAux, "00", 2);
			resp.AvgOrderTime=API.formatNumber(orderTime, "####0", 5);
			resp.AvgLineTimeWindow1=API.formatNumber(lineTime, "####0", 5);
			resp.AvgWindow1Time=API.formatNumber(cashTime, "####0", 5);
			resp.AvgWindow2Time=API.formatNumber(psntTime, "####0", 5);
			resp.OverTimeCountWindow1=tcOver50;
			resp.OverTimeCountWindow2=tcOver60;
			resp.AvgHoldTime=API.formatNumber(hold, "####0", 5);
			resp.HeldOrderCount=tothld;
			resp.TransactionCount=Number(totTc);
		}
		
		if (reportType == RPT_WT){	
			resp.PeriodStartTime=API.formatNumber(hourAux, "00", 2) + API.formatNumber(minAux, "00", 2);
			resp.AvgOrderTime=0;
			resp.AvgLineTimeWindow1=0;
			resp.AvgWindow1Time=0;
			resp.AvgWindow2Time=0;
			resp.OverTimeCountWindow1=0;
			resp.OverTimeCountWindow2=0;
			resp.AvgHoldTime=0;
			resp.HeldOrderCount=0;
			resp.TransactionCount=0;
		}
		
		totAvc_ac		= 0;
		
		totProdSale	 	= 0;
		totTc			= 0;
		totcars			= 0;
		tothld			= 0;

		untilTotal		= 0;
		untilStore		= 0;
		untilRecall		= 0;
		untilPay		= 0;
		untilCloseDrawer= 0;
		untilServe		= 0;

		itemsCount		= 0;

		tcOverOrderPreset	= 0;
		tcOverLinePreset	= 0;
		tcOverCashPreset	= 0;
		tcOverPresentationPreset=0;
		tcOverTotalPreset	= 0;
		tcOverStorePreset	= 0;
	
		heldTime		= 0;
		undoTime		= 0;
		tcUnder25		= 0;
		tcOver50		= 0;
		tcHeld			= 0;
		hotTc			= 0;
		hotUntilStore	= 0;
		hotUntilRecall	= 0;
		tcOverHoldPreset = 0;

		WS_addLine(resp);
		}
	}
	return;
}


/** Build a PMIX report just for FC, DT, or for a specific pos 
 * @param  podType - pod type FC DT etc
 * @param posNumber- pos number
 * @param pmix - item rootPmix xml  (standard form for the rootPmix.xml)
*/
function GetPmixByPOD(podType, posNumber,  pmix) 
{ 
	var bufferPosList="<root>";
	if( (podType != "") && (posNumber!= "") ) //if we have a valid podType and a posNumber
	{
		for each (var POS in  pmix.POS )
		{
			if( (Number(POS.@id) == Number(posNumber)) && (POS.@podShort == podType )  ) //we found the pos
			{
			   bufferPosList = bufferPosList+ POS;
			   bufferPosList = bufferPosList + "</root>";
			   var posXml= new XML(bufferPosList);
			   generateIndividualPosRaport(posXml, true);
			   break;
			}
		}
	}
	else if ( (podType != "") && (posNumber == "") ) //if we have a valid podType  we generate a raport for all pos whit that pod type
	{
		
		for each (var POS in  pmix.POS )
		{
			if( POS.@podShort == podType )   //we found a good pos
			{
				bufferPosList = bufferPosList  + POS;			
			}
		}

		//generate report
		bufferPosList = bufferPosList + "</root>";
		var pmixPOD = new XML(bufferPosList);
 	    generateIndividualPosRaport(pmixPOD, false);
	}
	
    return; 
} 

/**
Generates a raport for a POS or a pos List base on a POD type
 * @param pmix-  item pmix.xml with this form  <root> <pos></pos> </root>
  * @param individual- if true then just a pos is in the list ; false for all pos of a specific POD type
*/
function generateIndividualPosRaport(pmix, individual)
{
	var OpeningForeverReading=0;
	var CurrentForeverReading=0;
	var OverringQuantity=0;
	var OverringAmount=0;
	var iMenuItemPosition=1;
	var uServedEI;
	var uServedTO;
	var uServedOther;
	var uServedCrew;
	var uAmountCrew;
	var uTaxCrew;
	var uDiscountServedCrew;
	var uDiscountAmountCrew;
	var uDiscountTaxCrew;
	var uServedMgr;
	var uAmountMgr;
	var uTaxMgr;
	var uDiscountServedMgr;
	var uDiscountAmountMgr;
	var uDiscountTaxMgr;
	var uPromo;
	var uPromoIn;
	var uPromoOut;
	var uPromoOther;
	var uWasted;
	var uDiscounted;
	if(individual == true)
	{
		WS_addLine("<POS><ID>"+Number(pmix.POS.@id)+"</ID><Type>"+pmix.POS.@podShort+"</Type></POS>");
	}
	if(individual == false)
	{
		WS_addLine("<POS><ID>ALL</ID><Type>"+pmix.POS[0].@podShort+"</Type></POS>");
	}
	
	var resp=<param/>;

	//test to see if we need to have gift certificate in the back office report
	if (xmlStoreDB == null) {
		xmlStoreDB = new XML(API.getStoredb());
	}
	var hideGiftCert = (xmlStore.Configurations.Configuration.(@type=="Store.wide").Section.(@name=="BackOfficeReports").Parameter.(@name=="ExcludeGiftCertificateFromPMIX")).@value == "true";

	for each (var pos in pmix.POS)
	{	
		for each (var fGroup in pos.FamilyGroup) {
			if(hideGiftCert == true && fGroup.@groupName=="GIFT_COUPON") //we do not need gift cert information ; the family for gift cert is: FamilyGroup groupCode="9" groupName="GIFT_COUPON"
			{ //jump to the next family.
				continue;
			}
			for each (var product in fGroup.Product) {
				// filter choices
				if(Number(product.@id)<10000) {
					resp.MenuItemPosition=iMenuItemPosition;
					resp.MenuItemCode=Number(product.@id);

					if(("0x2c"==BOICommand)||("0x2d"==BOICommand)) {
						if(Number(product.@eatinPrice) != 0) {
							resp.ItemPrice=Str2Currency(product.@eatinPrice);
						}
						else {
							if(Number(product.@takeoutPrice) != 0) {
								resp.ItemPrice=Str2Currency(product.@takeoutPrice);
							}
							else {
								resp.ItemPrice=Nmb2Currency(0);
							}
						}
					}
					else {
						// International PMix
						// item price
						if((product.@priceType == "NET") || (product.@priceType == "net")) {
							// NET price
							// gross = net + tax
							if(Number(product.@eatinPrice) != 0) {
								resp.ItemPriceEatIn=Nmb2Currency(Number(product.@eatinPrice)+Number(product.@eatinTax));
								resp.ItemPriceOther=Nmb2Currency(Number(product.@eatinPrice)+Number(product.@eatinTax));
								
								if(Number(product.@takeoutPrice) != 0) {
									resp.ItemPriceTakeOut=Nmb2Currency(Number(product.@takeoutPrice)+Number(product.@takeoutTax));
								}
								else {
									// TO is zero but EI is not zero
									resp.ItemPriceTakeOut=Nmb2Currency(Number(product.@eatinPrice)+Number(product.@eatinTax));
								}
							}
							else {
								if(Number(product.@takeoutPrice) != 0) {
									resp.ItemPriceTakeOut=Nmb2Currency(Number(product.@takeoutPrice)+Number(product.@takeoutTax));
									// EI is zero but TO is not zero
									resp.ItemPriceEatIn=Nmb2Currency(Number(product.@takeoutPrice)+Number(product.@takeoutTax));
									resp.ItemPriceOther=Nmb2Currency(Number(product.@takeoutPrice)+Number(product.@takeoutTax));
								}
								else {
									// both prices are zero
									resp.ItemPriceEatIn=Nmb2Currency(Number(product.@eatinPrice)+Number(product.@eatinTax));
									resp.ItemPriceTakeOut=Nmb2Currency(Number(product.@takeoutPrice)+Number(product.@takeoutTax));
									resp.ItemPriceOther=Nmb2Currency(Number(product.@eatinPrice)+Number(product.@eatinTax));
								}
							}

							if(Number(product.@eatinPrice) != 0) {
								resp.ItemNetPriceEatIn=Str2Currency(product.@eatinPrice);
								resp.ItemNetPriceOther=Str2Currency(product.@eatinPrice);
								
								if(Number(product.@takeoutPrice) != 0) {
									resp.ItemNetPriceTakeOut=Str2Currency(product.@takeoutPrice);
								}
								else {
									// TO is zero but EI is not zero
									resp.ItemNetPriceTakeOut=Str2Currency(product.@eatinPrice);
								}
							}
							else {
								if(Number(product.@takeoutPrice) != 0) {
									resp.ItemNetPriceTakeOut=Str2Currency(product.@takeoutPrice);
									// EI is zero but TO is not zero
									resp.ItemNetPriceEatIn=Str2Currency(product.@takeoutPrice);
									resp.ItemNetPriceOther=Str2Currency(product.@takeoutPrice);
								}
								else {
									// both prices are zero
									resp.ItemNetPriceEatIn=Str2Currency(product.@eatinPrice);
									resp.ItemNetPriceTakeOut=Str2Currency(product.@takeoutPrice);
									resp.ItemNetPriceOther=Str2Currency(product.@eatinPrice);
								}
							}
						}
						else {
							// GROSS price
							if(Number(product.@eatinPrice) != 0) {
								resp.ItemPriceEatIn=Str2Currency(product.@eatinPrice);
								resp.ItemPriceOther=Str2Currency(product.@eatinPrice);
								
								if(Number(product.@takeoutPrice) != 0) {
									resp.ItemPriceTakeOut=Str2Currency(product.@takeoutPrice);
								}
								else {
									// TO is zero but EI is not zero
									resp.ItemPriceTakeOut=Str2Currency(product.@eatinPrice);
								}
							}
							else {
								if(Number(product.@takeoutPrice) != 0) {
									resp.ItemPriceTakeOut=Str2Currency(product.@takeoutPrice);
									// EI is zero but TO is not zero
									resp.ItemPriceEatIn=Str2Currency(product.@takeoutPrice);
									resp.ItemPriceOther=Str2Currency(product.@takeoutPrice);
								}
								else {
									// both prices are zero
									resp.ItemPriceEatIn=Str2Currency(product.@eatinPrice);
									resp.ItemPriceTakeOut=Str2Currency(product.@takeoutPrice);
									resp.ItemPriceOther=Str2Currency(product.@eatinPrice);
								}
							}

							// net = gross - tax
							if(Number(product.@eatinPrice) != 0) {
								resp.ItemNetPriceEatIn=Nmb2Currency(Number(product.@eatinPrice)-Number(product.@eatinTax));
								resp.ItemNetPriceOther=Nmb2Currency(Number(product.@eatinPrice)-Number(product.@eatinTax));
								
								if(Number(product.@takeoutPrice) != 0) {
									resp.ItemNetPriceTakeOut=Nmb2Currency(Number(product.@takeoutPrice)-Number(product.@takeoutTax));
								}
								else {
									// TO is zero but EI is not zero
									resp.ItemNetPriceTakeOut=Nmb2Currency(Number(product.@eatinPrice)-Number(product.@eatinTax));
								}
							}
							else {
								if(Number(product.@takeoutPrice) != 0) {
									resp.ItemNetPriceTakeOut=Nmb2Currency(Number(product.@takeoutPrice)-Number(product.@takeoutTax));
									// EI is zero but TO is not zero
									resp.ItemNetPriceEatIn=Nmb2Currency(Number(product.@takeoutPrice)-Number(product.@takeoutTax));
									resp.ItemNetPriceOther=Nmb2Currency(Number(product.@takeoutPrice)-Number(product.@takeoutTax));
								}
								else {
									// both prices are zero
									resp.ItemNetPriceEatIn=Nmb2Currency(Number(product.@eatinPrice)-Number(product.@eatinTax));
									resp.ItemNetPriceTakeOut=Nmb2Currency(Number(product.@takeoutPrice)-Number(product.@takeoutTax));
								}
							}
						}
					}

					uServedEI=0;
					uServedTO=0;
					uServedOther=0;
					uServedCrew=0;
					uAmountCrew=0;
					uTaxCrew=0;
					uDiscountServedCrew=0;
					uDiscountAmountCrew=0;
					uDiscountTaxCrew=0;
					uServedMgr=0;
					uAmountMgr=0;
					uTaxMgr=0;
					uDiscountServedMgr=0;
					uDiscountAmountMgr=0;
					uDiscountTaxMgr=0;
					uWasted=0;
					uPromo=0;
					uPromoIn=0;
					uPromoOut=0;
					uPromoOther=0;
					uDiscounted=0;
					
					
					//MS 06.10.2010 updated as RADI request
					var bRrawItem=false;

					for each (var prodInfo in rootPmix.ProductTable.ProductInfo) {
						if(prodInfo.@id==product.@id) {
							if("RAW_ITEM"==prodInfo.@class) {
								bRrawItem=true;
							}
						}
					}

					if((0 != Number(product.@eatinPrice)+Number(product.@takeoutPrice))||(false==bRrawItem)) {
						for each (var opType in product.OperationType) {
							// code below propositally don't follow else-if pattern
							// SALE		- UnitsServed
							if("SALE" == opType.@operationType) {
								//uServed = uServed + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
								uServedEI = uServedEI + Number(opType.PMix.@qtyEatIn);
								uServedTO = uServedTO + Number(opType.PMix.@qtyTakeOut);
								uServedOther = uServedOther + Number(opType.PMix.@qtyOther);
							}
							else
							// MANAGER	- UnitsServed
							if("MANAGER" == opType.@operationType) {
								uServedMgr = uServedMgr + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
								uAmountMgr = uAmountMgr + Number(opType.PMix.@netBeforeDiscountEatIn) + Number(opType.PMix.@netBeforeDiscountTakeOut) + Number(opType.PMix.@netBeforeDiscountOther);
								uTaxMgr = uTaxMgr + Number(opType.PMix.@taxBeforeDiscountEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther);
								
								uDiscountServedMgr = uDiscountServedMgr + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
								uDiscountAmountMgr = uDiscountAmountMgr + Number(opType.PMix.@netBeforeDiscountEatIn) - Number(opType.PMix.@netAmtEatIn) + Number(opType.PMix.@netBeforeDiscountTakeOut) - Number(opType.PMix.@netAmtTakeOut) + Number(opType.PMix.@netBeforeDiscountOther) - Number(opType.PMix.@netAmtOther);
								uDiscountTaxMgr = uDiscountTaxMgr + Number(opType.PMix.@taxBeforeDiscountEatIn) - Number(opType.PMix.@taxEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) - Number(opType.PMix.@taxTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther) - Number(opType.PMix.@taxOther);
							}
							else
							// CREW		- UnitsServed
							if("CREW" == opType.@operationType) {
								uServedCrew = uServedCrew + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
								uAmountCrew = uAmountCrew + Number(opType.PMix.@netBeforeDiscountEatIn) + Number(opType.PMix.@netBeforeDiscountTakeOut) + Number(opType.PMix.@netBeforeDiscountOther);
								uTaxCrew = uTaxCrew + Number(opType.PMix.@taxBeforeDiscountEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther);
								uDiscountServedCrew = uDiscountServedCrew + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
								uDiscountAmountCrew = uDiscountAmountCrew + Number(opType.PMix.@netBeforeDiscountEatIn) - Number(opType.PMix.@netAmtEatIn) + Number(opType.PMix.@netBeforeDiscountTakeOut) - Number(opType.PMix.@netAmtTakeOut) + Number(opType.PMix.@netBeforeDiscountOther) - Number(opType.PMix.@netAmtOther);
								uDiscountTaxCrew = uDiscountTaxCrew + Number(opType.PMix.@taxBeforeDiscountEatIn) - Number(opType.PMix.@taxEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) - Number(opType.PMix.@taxTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther) - Number(opType.PMix.@taxOther);
							}
							else
							// REFUND	- discount from SALE (issue SDE-326)
							if("REFUND" == opType.@operationType) {
								//uServed = uServed - (Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther));
								uServedEI = uServedEI - Number(opType.PMix.@qtyEatIn);
								uServedTO = uServedTO - Number(opType.PMix.@qtyTakeOut);
								uServedOther = uServedOther - Number(opType.PMix.@qtyOther);
							}
							else
							// WASTE	- UnitsWasted
							if("WASTE" == opType.@operationType) {
								uWasted = Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
							}
							else
							// PROMO	- UnitsPromo
							if("PROMO" == opType.@operationType) {
								uPromo = Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
								uPromoIn=Number(opType.PMix.@qtyEatIn);
								uPromoOut=Number(opType.PMix.@qtyTakeOut);
								uPromoOther=Number(opType.PMix.@qtyOther);
							}
							else
							// DISCOUNT - UnitsDiscounted
							if("DISCOUNT" == opType.@operationType) {
								uDiscounted = Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
							}
						}
					}
					if(("0x2c"==BOICommand)||("0x2d"==BOICommand)) {
						resp.UnitsServed=uServedEI + uServedTO + uServedOther;
						resp.UnitsMgrEmp=uServedCrew + uServedMgr;
					}
					else {
						// International PMix
						resp.UnitsServedEatIn=uServedEI;
						resp.UnitsServedTakeOut=uServedTO;
						resp.UnitsServedOther=uServedOther;
						resp.UnitsEmpMeal=uServedCrew;
						resp.EmployeeMealAmount=Nmb2Currency(uAmountCrew);
						resp.EmployeeMealTax=Nmb2Currency(uTaxCrew);
						resp.UnitsEmployeeMealDiscount=Nmb2Currency(uDiscountServedCrew);
						resp.EmployeeMealAmountDiscount=Nmb2Currency(uDiscountAmountCrew);
						resp.EmployeeMealTaxDiscount=Nmb2Currency(uDiscountTaxCrew);
						resp.UnitsMgrMeal=uServedMgr;
						resp.ManagerMealAmount=Nmb2Currency(uAmountMgr);
						resp.ManagerMealTax=Nmb2Currency(uTaxMgr);
						resp.UnitsManagerMealDiscount=uDiscountServedMgr;
						resp.ManagerMealAmountDiscount=Nmb2Currency(uDiscountAmountMgr);
						resp.ManagerMealTaxDiscount=Nmb2Currency(uDiscountTaxMgr);
					}
					resp.UnitsDiscounted=uDiscounted;
					resp.UnitsPromo=uPromo;
					//01.09.2010 OI Add new parameter
					resp.UnitsPromoIn=uPromoIn;
					resp.UnitsPromoOut=uPromoOut;
					resp.UnitsPromoOther=uPromoOther;
					resp.UnitsWasted=uWasted;

					// Fixed "000"
					resp.KeyPosition="000";
					// S = shifted / U = unshifted - fixed "U"
					resp.KeyShiftCode="U";

					WS_addLine(resp);
					iMenuItemPosition ++;
				}
			}
		}
	}

}



/**
 * Generates a PMix XML from a given point of the node on.
 * @param BOICommand - The command
 * @param rootCash - The point to start generation on CASH xml
 * @param rootPmix - idem Pmix xml
 * if any given required data is not present.
 */
function generatePmix(BOICommand,rootCash, rootPmix) {
	var OpeningForeverReading=0;
	var CurrentForeverReading=0;
	var OverringQuantity=0;
	var OverringAmount=0;
	var iMenuItemPosition=1;
	var uServedEI;
	var uServedTO;
	var uServedOther;
	var uServedCrew;
	var uAmountCrew;
	var uTaxCrew;
	var uDiscountServedCrew;
	var uDiscountAmountCrew;
	var uDiscountTaxCrew;
	var uServedMgr;
	var uAmountMgr;
	var uTaxMgr;
	var uDiscountServedMgr;
	var uDiscountAmountMgr;
	var uDiscountTaxMgr;
	var uPromo;
	var uPromoIn;
	var uPromoOut;
	var uPromoOther;
	var uWasted;
	var uDiscounted;
	var resp=<param/>;

	//test to see if we need to have gift certificate in the back office report
	var xmlStore = xmlStoreDB
	if (xmlStore == null) {
	    xmlStore = new XML(API.getStoredb());
	}
	var hideGiftCert = (xmlStore.Configurations.Configuration.(@type=="Store.wide").Section.(@name=="BackOfficeReports").Parameter.(@name=="ExcludeGiftCertificateFromPMIX")).@value == "true";

	var eatIn;
	var eatInTax;
	var eatOut;
	var eatOutTax;
	var soldType;  //value GROSS or NET
	var prodInfo;
									
	//total sold for the current product we can have multiple operation type and  in case of value eal we always have a SALE (even if we sell a discount value meal)
	var eatIn =0;
	var eatInTax =0;
	var eatOut =0;
	var eatOutTax =0;
	var eatInQty =0;
	var eatOutQty =0;
	
	for each (var fGroup in rootPmix.FamilyGroup) {
		if(hideGiftCert == true && fGroup.@groupName=="GIFT_COUPON") //we do not need gift cert information ; the family for gift cert is: FamilyGroup groupCode="9" groupName="GIFT_COUPON"
		{ //jump to the next family.
			continue;
		}
		for each (var product in fGroup.Product) {
			//API.dbg("generatePmix product:" + product);
			// filter choices
			if(Number(product.@id)<10000) {
				resp.MenuItemPosition=iMenuItemPosition;
				resp.MenuItemCode=Number(product.@id);

				if(("0x2c"==BOICommand)||("0x2d"==BOICommand)) {
					if(Number(product.@eatinPrice) != 0) {
						resp.ItemPrice=Str2Currency(product.@eatinPrice);
					}
					else {
						if(Number(product.@takeoutPrice) != 0) {
							resp.ItemPrice=Str2Currency(product.@takeoutPrice);
						}
						else {
							resp.ItemPrice=Nmb2Currency(0);
						}
					}
				}
				else {
					// International PMix
					eatIn = 0;
					eatInTax = 0;
					eatOut = 0;
					eatOutTax = 0;
					soldType = 0;  //value GROSS or NET
					//var prodInfo = rootPmix.ProductTable.ProductInfo.(@id==(product.@id));
									
					//total sold for the current product we can have multiple operation type and  in case of value eal we always have a SALE (even if we sell a discount value meal)
					eatIn =0;
					eatInTax =0;
					eatOut =0;
					eatOutTax =0;
					eatInQty =0;
					eatOutQty =0;
					for each (var opType in product.OperationType)
					{
						if(opType.@operationType =="SALE" || opType.@operationType =="DISCOUNT")
						{
							eatIn += Number((opType.PMix.@netBeforeDiscountEatIn)=="" ? opType.PMix.@netAmtEatIn : opType.PMix.@netBeforeDiscountEatIn);
							eatInTax +=Number((opType.PMix.@taxBeforeDiscountEatIn)=="" ? opType.PMix.@taxEatIn : opType.PMix.@taxBeforeDiscountEatIn);
							
							eatOut += Number((opType.PMix.@netBeforeDiscountTakeOut)=="" ? opType.PMix.@netAmtTakeOut : opType.PMix.@netBeforeDiscountTakeOut); 
							eatOutTax += Number((opType.PMix.@taxBeforeDiscountTakeOut)=="" ? opType.PMix.@taxTakeOut : opType.PMix.@taxBeforeDiscountTakeOut); 
							
							eatInQty += Number(opType.PMix.@qtyEatIn);
							eatOutQty += Number(opType.PMix.@qtyTakeOut); 
						}
					}					
					
					//03.02.2009 OI ask for sale type
					if ((Number(eatIn) + Number(eatOut))!=0 && product.OperationType[0].@operationType =="SALE")  //if the product is VALUE_MEAL and was sold 
					{ //we have the gross price
						/*eatIn = Number((product.OperationType.PMix.@netBeforeDiscountEatIn)=="" ? product.OperationType.PMix.@netAmtEatIn : product.OperationType.PMix.@netBeforeDiscountEatIn);
						eatInTax =Number((product.OperationType.PMix.@taxBeforeDiscountEatIn)=="" ? product.OperationType.PMix.@taxEatIn : product.OperationType.PMix.@taxBeforeDiscountEatIn);
						
						eatOut = Number((product.OperationType.PMix.@netBeforeDiscountTakeOut)=="" ? product.OperationType.PMix.@netAmtTakeOut : product.OperationType.PMix.@netBeforeDiscountTakeOut); 
						eatOutTax = Number((product.OperationType.PMix.@taxBeforeDiscountTakeOut)=="" ? product.OperationType.PMix.@taxTakeOut : product.OperationType.PMix.@taxBeforeDiscountTakeOut); 

						//19.01.2009 OI get the quantity
						var eatInQty = Number(product.OperationType.PMix.@qtyEatIn);
						var eatOutQty = Number(product.OperationType.PMix.@qtyTakeOut); 
						*/
						//19.01.2009 OI we need the price for one item and not for all
						if(Number(eatInQty)>0)
						{
							eatIn = Number(eatIn + eatInTax) /eatInQty;
							eatInTax = eatInTax /eatInQty;
						}
						if(Number(eatOutQty)>0)
						{
							eatOut = Number(eatOut + eatOutTax) / eatOutQty;
							eatOutTax = eatOutTax / eatOutQty;
						}

						//20.02.2008 OI we need the tax only for one item
						//eatInTax = eatInTax /eatInQty;
						//eatOutTax = eatOutTax / eatOutQty;
						
						soldType ="GROSS";
					}
					else	//default item we do not need the Pmix tag
					{  //depends of the product.@priceType
					   //API.dbg("else:"+ product.@eatinPrice + " "+product.@takeoutPrice);
					   eatIn = Number(product.@eatinPrice);
					   eatInTax =Number(product.@eatinTax);
					   
					   eatOut =  Number(product.@takeoutPrice);
					   eatOutTax = Number(product.@takeoutTax);
					   soldType = product.@priceType;
					}
					
					
					// item price
					if((soldType == "NET") || (soldType == "net")) {
						// NET price
						// gross = net + tax
						if(eatIn != 0) {
							resp.ItemPriceEatIn = Nmb2Currency(eatIn + eatInTax);
							resp.ItemPriceOther = Nmb2Currency(eatIn + eatInTax);
							
							if(eatOut != 0) {
								resp.ItemPriceTakeOut=Nmb2Currency(eatOut+eatOutTax);
							}
							else {
								// TO is zero but EI is not zero
								resp.ItemPriceTakeOut=	Nmb2Currency(eatIn + eatInTax);
							}
						}
						else {
							if(eatOut != 0) {
								resp.ItemPriceTakeOut=Nmb2Currency(eatOut+eatOutTax);
								// EI is zero but TO is not zero
								resp.ItemPriceEatIn=Nmb2Currency(eatOut+eatOutTax);
								resp.ItemPriceOther=Nmb2Currency(eatOut+eatOutTax);
							}
							else {
								// both prices are zero
								resp.ItemPriceEatIn=Nmb2Currency(eatIn+eatInTax);
								resp.ItemPriceTakeOut=Nmb2Currency(eatOut+eatOutTax);
								resp.ItemPriceOther=Nmb2Currency(eatIn+eatInTax);
							}
						}

						if(eatIn != 0) {
							resp.ItemNetPriceEatIn=Str2Currency(eatIn);
							resp.ItemNetPriceOther=Str2Currency(eatIn);
							
							if(eatOut != 0) {
								resp.ItemNetPriceTakeOut=Str2Currency(eatOut);
							}
							else {
								// TO is zero but EI is not zero
								resp.ItemNetPriceTakeOut=Str2Currency(eatOut);
							}
						}
						else {
							if(eatOut != 0) {
								resp.ItemNetPriceTakeOut=Str2Currency(eatOut);
								// EI is zero but TO is not zero
								resp.ItemNetPriceEatIn=Str2Currency(eatOut);
								resp.ItemNetPriceOther=Str2Currency(eatOut);
							}
							else {
								// both prices are zero
								resp.ItemNetPriceEatIn=Str2Currency(eatIn);
								resp.ItemNetPriceTakeOut=Str2Currency(eatOut);
								resp.ItemNetPriceOther=Str2Currency(eatIn);
							}
						}
					}
					else {
						// GROSS price
						if(eatIn != 0) {
							resp.ItemPriceEatIn=Str2Currency(eatIn);
							resp.ItemPriceOther=Str2Currency(eatIn);
							
							if(eatOut != 0) {
								resp.ItemPriceTakeOut=Str2Currency(eatOut);
							}
							else {
								// TO is zero but EI is not zero
								resp.ItemPriceTakeOut=Str2Currency(eatIn);
							}
						}
						else {
							if(eatOut != 0) {
								resp.ItemPriceTakeOut=Str2Currency(eatOut);
								// EI is zero but TO is not zero
								resp.ItemPriceEatIn=Str2Currency(eatOut);
								resp.ItemPriceOther=Str2Currency(eatOut);
							}
							else {
								// both prices are zero
								resp.ItemPriceEatIn=Str2Currency(eatIn);
								resp.ItemPriceTakeOut=Str2Currency(eatOut);
								resp.ItemPriceOther=Str2Currency(eatIn);
							}
						}

						// net = gross - tax
						if(eatIn != 0) {
							resp.ItemNetPriceEatIn=Nmb2Currency(eatIn-eatInTax);
							resp.ItemNetPriceOther=Nmb2Currency(eatIn-eatInTax);
							
							if(eatOut != 0) {
								resp.ItemNetPriceTakeOut=Nmb2Currency(eatOut-eatOutTax);
							}
							else {
								// TO is zero but EI is not zero
								resp.ItemNetPriceTakeOut=Nmb2Currency(eatIn-eatInTax);
							}
						}
						else {
							if(eatOut != 0) {
								resp.ItemNetPriceTakeOut=Nmb2Currency(eatOut-eatOutTax);
								// EI is zero but TO is not zero
								resp.ItemNetPriceEatIn=Nmb2Currency(eatOut-eatOutTax);
								resp.ItemNetPriceOther=Nmb2Currency(eatOut-eatOutTax);
							}
							else {
								// both prices are zero
								resp.ItemNetPriceEatIn=Nmb2Currency(eatIn-eatInTax);
								resp.ItemNetPriceTakeOut=Nmb2Currency(eatOut-eatOutTax);
								resp.ItemPriceOther=Str2Currency(eatIn-eatInTax);
							}
						}
					}
				}

				uServedEI=0;
				uServedTO=0;
				uServedOther=0;
				uServedCrew=0;
				uAmountCrew=0;
				uTaxCrew=0;
				uDiscountServedCrew=0;
				uDiscountAmountCrew=0;
				uDiscountTaxCrew=0;
				uServedMgr=0;
				uAmountMgr=0;
				uTaxMgr=0;
				uDiscountServedMgr=0;
				uDiscountAmountMgr=0;
				uDiscountTaxMgr=0;
				uWasted=0;
				uPromo=0;
				uPromoIn=0;
				uPromoOut=0;
				uPromoOther=0;
				uDiscounted=0;
				
				uDiscount =0;
				uDiscountTax =0;
				uAmountDiscountTotal =0;
				uAmountDiscountTotalTax =0;
				
				//MS 06.10.2010 updated as RADI request
					var bRrawItem=false;

					for each (var prodInfo in rootPmix.ProductTable.ProductInfo) {
						if(prodInfo.@id==product.@id) {
							if("RAW_ITEM"==prodInfo.@class) {
								bRrawItem=true;
							}
						}
					}

				if((0 != Number(product.@eatinPrice)+Number(product.@takeoutPrice))||(false==bRrawItem)) {
					for each (var opType in product.OperationType) {
						// code below propositally don't follow else-if pattern
						// SALE		- UnitsServed
						if("SALE" == opType.@operationType) {
							//uServed = uServed + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
							uServedEI = uServedEI + Number(opType.PMix.@qtyEatIn);
							uServedTO = uServedTO + Number(opType.PMix.@qtyTakeOut);
							uServedOther = uServedOther + Number(opType.PMix.@qtyOther);
						}
						else
						// MANAGER	- UnitsServed
						if("MANAGER" == opType.@operationType) {
							//API.dbg("mgr meal "+ product);
							uServedMgr = uServedMgr + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
							//we must have the gros sprice here 
										
							uAmountMgr = uAmountMgr + Number(opType.PMix.@netBeforeDiscountTakeOut) +Number(opType.PMix.@taxBeforeDiscountTakeOut) + Number(opType.PMix.@netBeforeDiscountEatIn) + Number(opType.PMix.@taxBeforeDiscountEatIn) + Number(opType.PMix.@netBeforeDiscountOther) +Number(opType.PMix.@taxBeforeDiscountOther);			
							
							//API.dbg("uAmountMgr "+ uAmountMgr);
						
							
							//uAmountMgr = uAmountMgr + Number(opType.PMix.@netBeforeDiscountEatIn) + Number(opType.PMix.@netBeforeDiscountTakeOut) + Number(opType.PMix.@netBeforeDiscountOther);
							uTaxMgr = uTaxMgr + Number(opType.PMix.@taxBeforeDiscountEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther);
							uDiscountServedMgr = uDiscountServedMgr + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
							uDiscountAmountMgr = uDiscountAmountMgr + Number(opType.PMix.@netBeforeDiscountEatIn) - Number(opType.PMix.@netAmtEatIn) + Number(opType.PMix.@netBeforeDiscountTakeOut) - Number(opType.PMix.@netAmtTakeOut) + Number(opType.PMix.@netBeforeDiscountOther) - Number(opType.PMix.@netAmtOther);
							uDiscountTaxMgr = uDiscountTaxMgr + Number(opType.PMix.@taxBeforeDiscountEatIn) - Number(opType.PMix.@taxEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) - Number(opType.PMix.@taxTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther) - Number(opType.PMix.@taxOther);
						}
						else
						// CREW		- UnitsServed
						if("CREW" == opType.@operationType) {
						    //API.dbg("Crew meal "+ product);
							uServedCrew = uServedCrew + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
							//we must have the gross price
							//API.dbg("crew tax  "+ opType.PMix.@taxBeforeDiscountTakeOut );
							
							uAmountCrew = uAmountCrew + Number(opType.PMix.@netBeforeDiscountTakeOut) +Number(opType.PMix.@taxBeforeDiscountTakeOut) + Number(opType.PMix.@netBeforeDiscountEatIn) + Number(opType.PMix.@taxBeforeDiscountEatIn) + Number(opType.PMix.@netBeforeDiscountOther) +Number(opType.PMix.@taxBeforeDiscountOther);
							//uAmountCrew = uAmountMgr + uAmountCrew;
							//API.dbg("uuAmountCrew  "+ uAmountCrew );
							
							//uAmountCrew = uAmountCrew + Number(opType.PMix.@netBeforeDiscountEatIn) + Number(opType.PMix.@netBeforeDiscountTakeOut) + Number(opType.PMix.@netBeforeDiscountOther);
							uTaxCrew = uTaxCrew + Number(opType.PMix.@taxBeforeDiscountEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther);
							uDiscountServedCrew = uDiscountServedCrew + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
							uDiscountAmountCrew = uDiscountAmountCrew + Number(opType.PMix.@netBeforeDiscountEatIn) - Number(opType.PMix.@netAmtEatIn) + Number(opType.PMix.@netBeforeDiscountTakeOut) - Number(opType.PMix.@netAmtTakeOut) + Number(opType.PMix.@netBeforeDiscountOther) - Number(opType.PMix.@netAmtOther);
							uDiscountTaxCrew = uDiscountTaxCrew + Number(opType.PMix.@taxBeforeDiscountEatIn) - Number(opType.PMix.@taxEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) - Number(opType.PMix.@taxTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther) - Number(opType.PMix.@taxOther);
						}
						else
						// REFUND	- discount from SALE (issue SDE-326)
						if("REFUND" == opType.@operationType) {
							//uServed = uServed - (Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther));
							uServedEI = uServedEI - Number(opType.PMix.@qtyEatIn);
							uServedTO = uServedTO - Number(opType.PMix.@qtyTakeOut);
							uServedOther = uServedOther - Number(opType.PMix.@qtyOther);
						}
						else
						// WASTE	- UnitsWasted
						if("WASTE" == opType.@operationType) {
							uWasted = Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
						}
						else
						// PROMO	- UnitsPromo
						if("PROMO" == opType.@operationType) {
							uPromo = Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
							uPromoIn=Number(opType.PMix.@qtyEatIn);
							uPromoOut=Number(opType.PMix.@qtyTakeOut);
							uPromoOther=Number(opType.PMix.@qtyOther);
						}
						else
						// DISCOUNT - UnitsDiscounted
						if("DISCOUNT" == opType.@operationType) {
						//API.dbg("Discount "+ product);
							uDiscounted = Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
							//API.dbg("discounttax "+opType.PMix.netBeforeDiscountTakeOut);
							uAmountDiscountTotal = Number(uAmountDiscountTotal)  + Number(opType.PMix.@netBeforeDiscountTakeOut) + Number(opType.PMix.@taxBeforeDiscountTakeOut) + Number(opType.PMix.@netBeforeDiscountEatIn) +Number(opType.PMix.@taxBeforeDiscountEatIn) + Number(opType.PMix.@netBeforeDiscountOther) + Number(opType.PMix.@taxBeforeDiscountOther);
							uAmountDiscountTotalTax = Number(uAmountDiscountTotalTax)  + Number(opType.PMix.@taxBeforeDiscountEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther);
							
							uDiscount = Number(uDiscount) + Number(opType.PMix.@netBeforeDiscountEatIn) - Number(opType.PMix.@netAmtEatIn) + Number(opType.PMix.@netBeforeDiscountTakeOut) - Number(opType.PMix.@netAmtTakeOut) + Number(opType.PMix.@netBeforeDiscountOther) - Number(opType.PMix.@netAmtOther);
							uDiscountTax = Number(uDiscountTax) + Number(opType.PMix.@taxBeforeDiscountEatIn) - Number(opType.PMix.@taxEatIn) + Number(opType.PMix.@taxBeforeDiscountTakeOut) - Number(opType.PMix.@taxTakeOut) + Number(opType.PMix.@taxBeforeDiscountOther) - Number(opType.PMix.@taxOther);
							//API.dbg("discounttax "+uAmountCrew);
						}
					}
				}
				if(("0x2c"==BOICommand)||("0x2d"==BOICommand)) {
					resp.UnitsServed=uServedEI + uServedTO + uServedOther;
					resp.UnitsMgrEmp=uServedCrew + uServedMgr;
				}
				else {
					// International PMix
					resp.UnitsServedEatIn=uServedEI;
					resp.UnitsServedTakeOut=uServedTO;
					resp.UnitsServedOther=uServedOther;
					
					resp.UnitsEmpMeal=uServedCrew;
					resp.EmployeeMealAmount=Nmb2Currency(uAmountCrew);
					resp.EmployeeMealTax=Nmb2Currency(uTaxCrew);
					resp.UnitsEmployeeMealDiscount=Nmb2Currency(uDiscountServedCrew);
					resp.EmployeeMealAmountDiscount=Nmb2Currency(uDiscountAmountCrew);
					resp.EmployeeMealTaxDiscount=Nmb2Currency(uDiscountTaxCrew);
					
					resp.UnitsMgrMeal=uServedMgr;
					resp.ManagerMealAmount=Nmb2Currency(uAmountMgr);
					resp.ManagerMealTax=Nmb2Currency(uTaxMgr);
					resp.UnitsManagerMealDiscount=uDiscountServedMgr;
					resp.ManagerMealAmountDiscount=Nmb2Currency(uDiscountAmountMgr);
					resp.ManagerMealTaxDiscount=Nmb2Currency(uDiscountTaxMgr);
				}
				resp.UnitsDiscounted=uDiscounted;
				resp.DiscountTotalAmount=Nmb2Currency(uAmountDiscountTotal);
				resp.DiscountTotalTax=Nmb2Currency(uAmountDiscountTotalTax);
				resp.Discount=Nmb2Currency(uDiscount);
				resp.DiscountTax=Nmb2Currency(uDiscountTax);
				
				resp.UnitsPromo=uPromo;
				//01.09.2010 OI Add new parameter
				resp.UnitsPromoIn=uPromoIn;
				resp.UnitsPromoOut=uPromoOut;
				resp.UnitsPromoOther=uPromoOther;
				resp.UnitsWasted=uWasted;

				// Fixed "000"
				resp.KeyPosition="000";
				// S = shifted / U = unshifted - fixed "U"
				resp.KeyShiftCode="U";
				//Api.dbg("pmix resp "+resp);
				WS_addLine(resp);

				iMenuItemPosition ++;
			}
		}
	}
}

/**
 * Generates a R2D2 Detailed order log report.
 * @param config - 
 * @param rootSOS - SOS xml report
 * @param rootDetailSOS - SOS detailed xml report
 * if any given required data is not present.
 */
function generateR2D2_DetailedOrderLog(config, rootSOS, rootDetailSOS) {
	var resp=<DetailedOrder/>;
	var dayPartitioning=rootSOS.DayPartitioning;
	var appliedTenders=<AppliedTenders/>;
	var frontCounterTimings=<FrontCounterTimings/>;
	var menuItemsSoldPromoed=<MenuItemsSoldPromoed/>;

	var keyStationNumber;
	var keyStationTransactionNumber;
	var endTime;
	var serviceTime;
	var sequencialNumber=1;
	var transactonNetAmount;
	var taxAmount;
	var nonProductAmount;
	var discountAmount;
	var giftCertRedeemedAmount;
	var giftCardsRedeemedAmount;
	var giftCardsRedeemedQuantity;
	var giftCertificatesSoldAmount;
	var giftCardsSoldAmount;
	var giftCardsSoldQuantity;
	var creditDebitAmount;
	var terminalPaymentType;
	var driveThruFlag;
	var carryoutFlag;
	var refundFlag;
	var employeeDiscountFlag;
	var managerDiscountFlag;
	var otherDiscountFlag;
	var overringFlag;
	var otherReceiptFlag;
	var kioskFlag;
	var numberOfItems;
	var tenderIndex;
	var totalAmount;
	var kVSPrepLine;
	var storedHeldFlag;
	var totalServiceTime;
	var orderTakingTime;
	var assemblyTime;
	var cashieringTime;
	var storageTime;
	var globalStoreTime;
	var menuItemNumber;
	var quantityServed;
	var quantityPromoed;

	for each (var segment in dayPartitioning.Segment) {
		keyStationNumber=0;
		keyStationTransactionNumber=0;
		endTime=segment.@endTime;
		serviceTime=rootSOS.StoreTotals.ServiceTime.(@segmentId==segment.@id);
		transactonNetAmount=0;
		taxAmount=0;
		nonProductAmount=0;
		discountAmount=0;
		giftCertRedeemedAmount=0;
		giftCardsRedeemedAmount=0;
		giftCardsRedeemedQuantity=0;
		giftCertificatesSoldAmount=0;
		giftCardsSoldAmount=0;
		giftCardsSoldQuantity=0;
		creditDebitAmount=0;
		terminalPaymentType=0;
		driveThruFlag=0;
		carryoutFlag=0;
		refundFlag=0;
		employeeDiscountFlag=0;
		managerDiscountFlag=0;
		otherDiscountFlag=0;
		overringFlag=0;
		otherReceiptFlag=0;
		kioskFlag=0;
		numberOfItems=0;
		tenderIndex=0;
		totalAmount=0;
		kVSPrepLine=0;
		storedHeldFlag=0;
		totalServiceTime=0;
		orderTakingTime=0;
		assemblyTime=0;
		cashieringTime=0;
		storageTime=0;
		globalStoreTime=0;
		menuItemNumber=0;
		quantityServed=0;
		quantityPromoed=0;

		resp.KeyStationNumber=Number(keyStationNumber);
		resp.KeyStationTransactionNumber=Number(keyStationTransactionNumber);
		resp.TransactionEndTime=endTime.substr(0,2)+":"+endTime.substr(2,2);
		resp.TransactionSerialNumber=Number(sequencialNumber);
		resp.TransactonNetAmount=Nmb2Currency(transactonNetAmount);
		resp.TaxAmount=Nmb2Currency(taxAmount);
		resp.NonProductAmount=Nmb2Currency(nonProductAmount);
		resp.DiscountAmount=Nmb2Currency(discountAmount);
		resp.GiftCertRedeemedAmount=Nmb2Currency(giftCertRedeemedAmount);
		resp.GiftCardsRedeemedAmount=Nmb2Currency(giftCardsRedeemedAmount);
		resp.GiftCardsRedeemedQuantity=Number(giftCardsRedeemedQuantity);
		resp.GiftCertificatesSoldAmount=Nmb2Currency(giftCertificatesSoldAmount);
		resp.GiftCardsSoldAmount=Nmb2Currency(giftCardsSoldAmount);
		resp.GiftCardsSoldQuantity=Number(giftCardsSoldQuantity);
		resp.CreditDebitAmount=Nmb2Currency(creditDebitAmount);
		resp.TerminalPaymentType=Number(terminalPaymentType);
		resp.DriveThruFlag=Number(driveThruFlag);
		resp.CarryoutFlag=Number(carryoutFlag);
		resp.RefundFlag=Number(refundFlag);
		resp.EmployeeDiscountFlag=Number(employeeDiscountFlag);
		resp.ManagerDiscountFlag=Number(managerDiscountFlag);
		resp.OtherDiscountFlag=Number(otherDiscountFlag);
		resp.OverringFlag=Number(overringFlag);
		resp.OtherReceiptFlag=Number(otherReceiptFlag);
		resp.KioskFlag=Number(kioskFlag);
		resp.NumberOfItems=Number(numberOfItems);

		appliedTenders.TenderIndex=Number(tenderIndex);
		appliedTenders.TotalAmount=Nmb2Currency(totalAmount);
		resp.AppliedTenders=appliedTenders;

		resp.KVSPrepLine=Number(kVSPrepLine);
		resp.StoredHeldFlag=Number(storedHeldFlag);
		resp.TotalServiceTime=Number(totalServiceTime);
		resp.OrderTakingTime=Number(orderTakingTime);

		frontCounterTimings.AssemblyTime=API.formatNumber(Number(assemblyTime), "#####0", 6);
		frontCounterTimings.CashieringTime=API.formatNumber(Number(cashieringTime), "#####0", 6);
		frontCounterTimings.StorageTime=API.formatNumber(Number(storageTime), "#####0", 6);
		frontCounterTimings.GlobalStoreTime=API.formatNumber(Number(globalStoreTime), "#####0", 6);
		resp.FrontCounterTimings=API.formatNumber(frontCounterTimings, "#####0", 6);

		menuItemsSoldPromoed.MenuItemNumber=Number(menuItemNumber);
		menuItemsSoldPromoed.QuantityServed=Number(quantityServed);
		menuItemsSoldPromoed.QuantityPromoed=Number(quantityPromoed);
		resp.MenuItemsSoldPromoed=menuItemsSoldPromoed;

		WS_addLine(resp);

		sequencialNumber=sequencialNumber+1;
	}
}

/**
 * Generates a R2D2 Menu item report.
 * @param config - 
 * @param rootPmix - BOIMIX xml report
 * if any given required data is not present.
 */
function generateR2D2_MenuItem(config, rootPmix) {
	var resp=<MenuItem/>;
	var qttyItems;
	var iIndex;
	var iCount;

	qttyItems=0;
	for each (var fGroup in rootPmix.FamilyGroup) {
		for each (var prod in fGroup.Product) {
			qttyItems++;
		}
	}
	var tableId=new Array (qttyItems+1);
	var tablePrice=new Array (qttyItems+1);

	// create an array indexed by product code
	qttyItems=0;
	for each (var fGroup in rootPmix.FamilyGroup) {
		for each (var prod in fGroup.Product) {
			for(iIndex=0; iIndex<qttyItems; ) {
				if(Number(prod.@id)<Number(tableId[iIndex])) {
					// shift registers
					for(iCount=qttyItems; iCount>=iIndex; iCount--) {
						tableId[iCount+1]=tableId[iCount];
						tablePrice[iCount+1]=tablePrice[iCount];
					}
					break;
				}
				else {
					iIndex++;
				}
			}

			// remove decimal point (multiply by 100 and format to integer)
			// 1.00 is converted to 100
			tableId[iIndex]=prod.@id;
			tablePrice[iIndex]=API.formatNumber(Number(prod.@eatinPrice)*100, "#########0", 10);

//API.dbg("IDprice ["+iIndex+"]["+tableId[iIndex]+"]["+tablePrice[iIndex]+"]");
			qttyItems++;
		}
	}

	var infLimit=0;
	var supLimit=qttyItems;
	for each (var prodInfo in rootPmix.ProductTable.ProductInfo) {
		// binary search
		infLimit=0;
		supLimit=qttyItems;
		while(infLimit<supLimit) {
			// this way iIndex will never be a fractionary number
			iIndex=(supLimit+infLimit-((supLimit+infLimit)%2))/2;
//API.dbg("seek ["+iIndex+"]["+tableId[iIndex]+"]["+prodInfo.@id+"]");
			if(Number(tableId[iIndex])==Number(prodInfo.@id)) {
				break;
			}
			else {
				if(Number(tableId[iIndex])>Number(prodInfo.@id)) {
					supLimit=iIndex;
				}
				else {
					infLimit=iIndex;
				}
			}
//API.dbg("LIMITS ["+infLimit+"]["+supLimit+"]");
		}
		
//API.dbg("ID ["+iIndex+"]["+tableId[iIndex]+"]["+prodInfo.@id+"]");
//API.dbg("PRICE ["+tablePrice[iIndex]+"]");

		resp.Number=Number(prodInfo.@id);
		resp.Price=""+tablePrice[iIndex];
		resp.Name=""+prodInfo.@name;

		WS_addLine(resp);
	}
}

/**
 * Generates a R2D2 FC Quarter Hour Data report.
 * @param config - 
 * @param rootSOS - SOS xml report
 * if any given required data is not present.
 */
function generateR2D2_FCQuarterHourData(config, rootSOS) {
	var resp=<QtrHrTotal/>;
	var dayPartitioning=rootSOS.DayPartitioning;

	for each (var segment in dayPartitioning.Segment) {
		var endTime=segment.@endTime;
		var serviceTime=rootSOS.StoreTotals.ServiceTime.(@segmentId==segment.@id);
API.dbg("SERVICETIME ["+serviceTime+"]");
		resp.QuarterHourEndTime=endTime.substr(0,2)+":"+endTime.substr(2,2);
		resp.FrontCounterTransactionCount=Number(serviceTime.@tc);
		//resp.FrontCounterTotalOrderTime=Number(serviceTime.@untilTotal)/1000;
		resp.FrontCounterTotalOrderTime=API.formatNumber(Number(serviceTime.@untilTotal)/1000, "#####0", 6);
		resp.FrontCounterTotalAssemblyTime=API.formatNumber((Number(serviceTime.@untilPay)-Number(serviceTime.@untilTotal))/1000, "#####0", 6);
		resp.FrontCounterTotalCashieringTime=API.formatNumber((Number(serviceTime.@untilCloseDrawer)-Number(serviceTime.@untilPay))/1000, "#####0", 6);
		resp.FrontCounterTotalServiceTime=API.formatNumber(Number(serviceTime.@untilCloseDrawer)/1000, "#####0", 6);
		//resp.FrontCounterTotalStoredOrdersTime=API.formatNumber((Number(serviceTime.@untilRecall)-Number(serviceTime.@untilStore))/1000, "#####0", 6);
		resp.FrontCounterTotalStoredOrdersTime=Number(0);
		resp.FrontCounterTransactionStoredOrdersQty=Number(0);

		WS_addLine(resp);
	}
}

/**
 * Generates a R2D2 KVS Quarter Hour Data report.
 * @param config - 
 * @param rootSOS - SOS xml report
 * if any given required data is not present.
 */
function generateR2D2_KVSQuarterHourData(config, rootSOS) {
	var resp=<KVSQtrHrData/>;
	var dayPartitioning=rootSOS.DayPartitioning;

	var KVSType=rootSOS.StoreTotals.@productionNodeId;

	for each (var segment in dayPartitioning.Segment) {
		var endTime=segment.@endTime;
		var serviceTime=rootSOS.StoreTotals.ServiceTime.(@segmentId==segment.@id);

		resp.QuarterHourEndTime=endTime.substr(0,2)+":"+endTime.substr(2,2);
		resp.TransactionCount=Number(serviceTime.@tc);
		resp.OrderTakingTime=API.formatNumber(Number(serviceTime.@untilTotal)/1000, "#####0", 6);
		resp.ProductionTime=API.formatNumber(0, "#####0", 6);
		resp.RunnerTime=API.formatNumber((Number(serviceTime.@untilServe)-Number(serviceTime.@untilTotal))/1000, "#####0", 6);
		resp.TotalTime=API.formatNumber(Number(serviceTime.@totalTime)/1000, "#####0", 6);	// SDE-1284
		resp.ItemCount=Number(serviceTime.@itemsCount);

		// if KVS type none of below ignore line
		if(KVSType=="MFY:Side1") {
			resp.KVSType="1";
			WS_addLine(resp);
		}
		else {
			if(KVSType=="MFY:Side2") {
				resp.KVSType="2";
				WS_addLine(resp);
			}
			else {
				if(KVSType=="FC") {
					resp.KVSType="E";
					WS_addLine(resp);
				}
			}
		}
	}
}

/**
 * Generates a Hourly Sales Data report.
 * @param rootHourlySales - Hourly Sales xml report
 * if any given required data is not present.
 */
function generateHourlySales(BOICommand,rootHourlySales,rootSOSFC,rootSOSDT) {

//API.dbg("-------1\n");

	if(null==rootHourlySales) {
		return;
	}
    //get the country information
   // var storeDB = API.getStoredb();
	//var xmlStore= new XML(storeDB);	
	//var Country = (xmlStore.StoreDB.StoreProfile.StoreDetails.Country).toUpperCase();
	
//#####################################	
// DEFINE Section	
//#####################################	
	var TIME_GRANULATION = 15;	// consolidate every 30 minutes

//#####################################	
// Header Section	
//#####################################	
	var productSalesAm = 0;
	var productSalesTax = 0;
	var transactionCount = 0;
	var transactionCountAll = 0;
	var productSalesDTAm = 0;
	var productSalesDTTax = 0;
	var transactionCountDT = 0;
	var productSalesNPAm = 0;
	var productSalesNPTax = 0;
	var transactionCountNP = 0;
	var transactionCountDTAll = 0;
	var crewHourWorked = 0;
	var crewGrossPay = 0;

	var indSegment = 0;
	var nodesDayPart 	= rootHourlySales.DayPartitioning.Segment;	
	var nodesDayPartSize= Number(nodesDayPart.length());
	var nodesNonProducts= rootHourlySales.ProductTable.ProductInfo.(@familyGroup=="NON_PRODUCT" || @familyGroup=="GIFT_COUPON");

	var totAvc_ac		= 0;
	var totAccum		= 0;
	var totAccumTc		= 0;
	var totAccumcars	= 0;
	var totAccumtts		= 0;

	var totot			= 0;
	var totlt			= 0;
	var totcash			= 0;
	var totpnst			= 0;
	var totovrp			= 0;
	var totovtotl		= 0;
	var tothld			= 0;
	var tothold			= 0;
	var totpvtotl		= 0;

	var totProdSale	 	= 0;
	var totTc			= 0;
	var totcars			= 0;

	var untilTotal		= 0;
	var untilStore		= 0;
	var untilRecall		= 0;
	var untilPay		= 0;
	var untilCloseDrawer= 0;
	var untilServe		= 0;
	var itemsCount		= 0;

	var tcOverOrderPreset= 0;
	var tcOverLinePreset = 0;
	var tcOverCashPreset = 0;
	var tcOverPresentationPreset=0;
	var tcOverTotalPreset= 0;
	var tcOverStorePreset= 0;

	var heldTime		= 0;
	var undoTime		= 0;
	var tcUnder25		= 0;
	var tcOver50		= 0;
	var tcOver60		= 0;
	var tcHeld			= 0;
	var hotTc			= 0;
	var hotUntilStore	= 0;
	var hotUntilRecall	= 0;
	var tcOverHoldPreset = 0;

	var nodesDayPartSOS = null;	
	var nodesDayPartSOSSize = null;
	var nodesDayPartSOSFC = null;	
	var nodesDayPartSOSFCSize = null;
	var nodesDayPartSOSDT = null;	
	var nodesDayPartSOSDTSize = null;

	if(null!=rootSOSFC) {
		nodesDayPartSOSFC 	= rootSOSFC.DayPartitioning.Segment;	
		nodesDayPartSOSFCSize	= Number(nodesDayPartSOSFC.length());
	}
	if(null!=rootSOSDT) {
		nodesDayPartSOSDT 	= rootSOSDT.DayPartitioning.Segment;	
		nodesDayPartSOSDTSize	= Number(nodesDayPartSOSDT.length());
	}

//#####################################	
// Body Section	
//#####################################	
	// Set up line with the information (Quarter hour)
	for (var hourAux = 0; hourAux < 24; hourAux++) {
		for (var minAux = 0; minAux < 60; minAux+=TIME_GRANULATION) {
		
			var idDayPart = 0;
			var nodeSegment = 0;
			var hourSegment = 0;

			var resp=<param/>;

			// Get active day part	
			var arrSegmentsId  = getSegments(hourAux*100+minAux, hourAux*100+minAux+TIME_GRANULATION-1);
			// Join values by Segment
			var j=0;
			while (j < arrSegmentsId.length) {
				var idDayPart = Number(arrSegmentsId[j]);
				var nodeServiceTime = rootHourlySales.StoreTotal.Sales.(Number(@id)==idDayPart);
				var nodeDTServiceTime = null;
				if(posId == 0x4b)
				{
					nodeDTServiceTime = rootHourlySales.POD.(@id=="DT").StoreTotal.Sales.(@id==idDayPart);
				}
				else //we runn it separetly for every register we must take the data for DT  from the POS node.
				{
					var posXml = rootHourlySales.POS.(Number(@id)==Number(posId));
					if(posXml !=null || posXml !="")
					{
						nodeDTServiceTime = posXml.(@podShort=="DT").StoreTotal.Sales.(@id==idDayPart);
					}
				}
				
				if(null!=nodeServiceTime) {
					// calculate all refunds
					var refundSalesAm=Number(0);
					var refundSalesTax=Number(0);
					var refundSalesAmNP=Number(0);
					var refundSalesTaxNP=Number(0);
					var nodeProductInfo;
					var refundNode;

					for each (var nodeProduct in nodeServiceTime.Product) {
						refundNode = nodeProduct.OperationType.(@operationType=="REFUND");
						if((null != refundNode) && ("" != refundNode)) {
							nodeProductInfo = nodesNonProducts.(@id==nodeProduct.@id);
							// nodesNonProducts only contains non products. If the id is not found it is a product
							if((null != nodeProductInfo) && ("" != nodeProductInfo) && (nodeProduct.@id != nodeProductInfo.@id)){
								refundSalesAm	+= Number(refundNode.PMix.@netAmount);
								refundSalesTax	+= Number(refundNode.PMix.@taxAmount);
							}
							else {
								refundSalesAmNP	+= Number(refundNode.PMix.@netAmount);
								refundSalesTaxNP+= Number(refundNode.PMix.@taxAmount);
							}
/*
							nodeProductInfo = rootHourlySales.ProductTable.ProductInfo.(@id==nodeProduct.@id);
							if((null != nodeProductInfo) && ("" != nodeProductInfo)){
								if(("NON_PRODUCT"!=nodeProductInfo.@familyGroup)&&("GIFT_COUPON"!=nodeProductInfo.@familyGroup)) {
									refundSalesAm	+= Number(refundNode.PMix.@netAmount);
									refundSalesTax	+= Number(refundNode.PMix.@taxAmount);
								}
								else {
									refundSalesAmNP	+= Number(refundNode.PMix.@netAmount);
									refundSalesTaxNP+= Number(refundNode.PMix.@taxAmount);
								}
							}
							else {
								// product was not found in ProductTable table. Something is wrong here !!!
							}
*/
						}
					}

					// Accumulate values by Segment
					//transactionCountAll		+= Number(nodeServiceTime.@extTC);
					
					   //17.02.2009 OI we need the real tc and an amount without refund
 					    transactionCountAll		+= Number(nodeServiceTime.@extTC);
						productSalesAm			+= Number(nodeServiceTime.@productNetAmount);
						productSalesTax			+= Number(nodeServiceTime.@productTaxAmount);
					
					
					
						productSalesNPAm		+= (Number(nodeServiceTime.@netAmount)-Number(nodeServiceTime.@productNetAmount));
						productSalesNPTax		+= (Number(nodeServiceTime.@taxAmount)-Number(nodeServiceTime.@productTaxAmount));	
					
					var employeeMeal =	Number(nodeServiceTime.@extTC);
					transactionCountNP		+= Number(nodeServiceTime.@nonProdTC);
					//total tc - manager & crew meal overring ignored (not counted) refund decrease the counter
					transactionCount +=	Number(nodeServiceTime.@extTC); 
				}

				if(null!=nodeDTServiceTime) {
					// calculate all DT refunds
					var refundSalesAm=Number(0);
					var refundSalesTax=Number(0);
					var refundSalesAmNP=Number(0);
					var refundSalesTaxNP=Number(0);
					var nodeProductInfo;
					var refundNode;

					for each (var nodeProduct in nodeDTServiceTime.Product) {
						refundNode = nodeProduct.OperationType.(@operationType=="REFUND");
						if((null != refundNode) && ("" != refundNode)) {
							nodeProductInfo = nodesNonProducts.(@id==nodeProduct.@id);
							// nodesNonProducts only contains non products. If the id is not found it is a product
							if((null != nodeProductInfo) && ("" != nodeProductInfo) && (nodeProduct.@id != nodeProductInfo.@id)){
								refundSalesAm	+= Number(refundNode.PMix.@netAmount);
								refundSalesTax	+= Number(refundNode.PMix.@taxAmount);
							}
							else {
								refundSalesAmNP	+= Number(refundNode.PMix.@netAmount);
								refundSalesTaxNP+= Number(refundNode.PMix.@taxAmount);
							}
						}
/*							
						if(null != refundNode) {
							nodeProductInfo = rootHourlySales.ProductTable.ProductInfo.(@id==nodeProduct.@id);
							if(null!=nodeProductInfo) {
								if(("NON_PRODUCT"!=nodeProductInfo.@familyGroup)&&("GIFT_COUPON"!=nodeProductInfo.@familyGroup)) {
									refundSalesAm	+= Number(refundNode.PMix.@netAmount);
									refundSalesTax	+= Number(refundNode.PMix.@taxAmount);
								}
								else {
									refundSalesAmNP	+= Number(refundNode.PMix.@netAmount);
									refundSalesTaxNP+= Number(refundNode.PMix.@taxAmount);
								}
							}
							else {
								// product was not found in ProductTable table. Something is wrong here !!!
							}
						}
*/
					}

					
					
					//17.02.2009 OI we need the real tc and an amount without refund
					transactionCountDTAll	+= Number(nodeDTServiceTime.@extTC);
					// DES-15
					productSalesDTAm		+= Number(nodeDTServiceTime.@productNetAmount);
					productSalesDTTax		+= Number(nodeDTServiceTime.@productTaxAmount);
					
					
					
					// MYTODO it will be created a new tag for tc products ?
					//transactionCountDT		+= Number(nodeDTServiceTime.@extTC);
					//total tc - manager & crew meal  overring ignored (not counted) refund decrease the counter
					transactionCountDT +=	Number(nodeDTServiceTime.@extTC); 
				}

				// fixed
				crewHourWorked			+= Number(0);
				crewGrossPay			+= Number(0);

				j++;
			}

			// Create the report output

			resp.PeriodStartTime=API.formatNumber(hourAux, "00", 2) + API.formatNumber(minAux, "00", 2);
			resp.ProductSales=Nmb2Currency(productSalesAm);
			resp.ProductSalesTax=Nmb2Currency(productSalesTax);
			resp.TransactionCount=Number(transactionCount);
			resp.TransactionCountAll=Number(transactionCountAll);
			resp.DT_ProductSales=Nmb2Currency(productSalesDTAm);
			resp.DT_ProductSalesTax=Nmb2Currency(productSalesDTTax);
			resp.DT_TransactionCount=Number(transactionCountDT);
			resp.CrewHoursWorked=Number(crewHourWorked);
			resp.CrewGrossPay=Nmb2Currency(crewGrossPay);
			resp.NonProductSales=Nmb2Currency(productSalesNPAm);
			resp.NonProductSalesTax=Nmb2Currency(productSalesNPTax);
			resp.NonProductTC=Number(transactionCountNP);

			productSalesAm = 0;
			productSalesTax = 0;
			transactionCount = 0;
			transactionCountAll = 0;
			productSalesDTAm = 0;
			productSalesDTTax = 0;
			transactionCountDT = 0;
			productSalesNPAm = 0;
			productSalesNPTax = 0;
			transactionCountNP = 0;
			transactionCountDTAll = 0;
			crewHourWorked = 0;
			crewGrossPay = 0;

			if("0x53"==BOICommand) {
				nodesDayPartSOS=nodesDayPartSOSFC;
				nodesDayPartSOSSize=nodesDayPartSOSFCSize;

				for(var iCount=0; iCount<2; iCount++) {
					idDayPart = 0;
					nodeSegment = 0;
					hourSegment = 0;

					// Compute SOS times for this interval
					// Get active day part		
					arrSegmentsId  = getSegments(hourAux*100+minAux, hourAux*100+minAux+TIME_GRANULATION-1,iCount);
					j=0;
					while (j < arrSegmentsId.length) {
						var idDayPart = Number(arrSegmentsId[j]);
						var nodeServiceTime;
						if(0==iCount) {
							nodeServiceTime = rootSOSFC.StoreTotals.ServiceTime.(Number(@segmentId)==idDayPart);
						}
						else {
							nodeServiceTime = rootSOSDT.StoreTotals.ServiceTime.(Number(@segmentId)==idDayPart);
						}

						// Accumulate values by Segment
						totTc 				+= Number(nodeServiceTime.@tc);
						totProdSale			+= Number(nodeServiceTime.@totalAmount);
						totcars 			+= Number(nodeServiceTime.@cars);

						untilTotal			+= Number(nodeServiceTime.@untilTotal)/1000;
						untilStore			+= Number(nodeServiceTime.@untilStore)/1000;
						untilRecall			+= Number(nodeServiceTime.@untilRecall)/1000;
						untilPay			+= Number(nodeServiceTime.@untilPay)/1000;
						untilCloseDrawer	+= Number(nodeServiceTime.@untilCloseDrawer)/1000;
						untilServe			+= Number(nodeServiceTime.@untilServe)/1000;

						itemsCount			+= Number(nodeServiceTime.@itemsCount);

						tcOverOrderPreset	+= Number(nodeServiceTime.@tcOverOrderPreset);
						tcOverLinePreset	+= Number(nodeServiceTime.@tcOverLinePreset);
						tcOverCashPreset	+= Number(nodeServiceTime.@tcOverCashPreset);
						tcOverPresentationPreset+= Number(nodeServiceTime.@tcOverPresentationPreset);
						tcOverTotalPreset	+= Number(nodeServiceTime.@tcOverTotalPreset);
						tcOverStorePreset	+= Number(nodeServiceTime.@tcOverStorePreset);

						undoTime			+= Number(nodeServiceTime.ProductionTime.@undoTime)/1000;
						heldTime			+= Number(nodeServiceTime.ProductionTime.@heldTime)/1000;
						tcUnder25			+= Number(nodeServiceTime.ProductionTime.@tcUnder25);
						tcOver50			+= Number(nodeServiceTime.ProductionTime.@tcOver50);
						tcOver60			+= Number(nodeServiceTime.ProductionTime.@tcOver60);
						tcHeld				+= Number(nodeServiceTime.ProductionTime.@tcHeld);

						hotTc				+= Number(nodeServiceTime.ProductionTime.@hotTc);
						hotUntilStore		+= Number(nodeServiceTime.ProductionTime.@hotUntilStore)/1000;
						hotUntilRecall		+= Number(nodeServiceTime.ProductionTime.@hotUntilRecall)/1000;
						tcOverHoldPreset 	+= Number(nodeServiceTime.ProductionTime.@tcOverHoldPreset);

						j++;
					}

					if(0==iCount) {
						// Create line for Front Counter Sale Report
						totAvc_ac	= (totTc!=0)?totProdSale/totTc:0;
						totAccum 	+= totProdSale;

						var ot		= (totTc!=0)?untilTotal/totTc:0; // Avg Order time 
						var cash	= (totTc!=0)?(untilCloseDrawer - untilTotal)/totTc:0; //Avg Cashier Time
						var pnst	= ((totTc!=0)&&(untilServe > untilCloseDrawer))?(untilServe - untilCloseDrawer)/totTc:0;	// SDE-1284
						var totl	= (totTc!=0)?((untilServe > untilCloseDrawer)?untilServe:untilCloseDrawer)/totTc:0; // Avg Total Time	// SDE-1284			
						var ovra	= tcOverPresentationPreset;
						var pvtotl	= tcOverTotalPreset;

						var hld		= Number(tcHeld); 
						var hold	= (hld!=0)?heldTime/hld:0;

						resp.OrderTakingTime=API.formatNumber(ot, "####0", 5);
						resp.OTCTime=API.formatNumber(pnst, "####0", 5);
						resp.CashierTime=API.formatNumber(cash, "####0", 5);
						resp.StoreTime=API.formatNumber(hold, "####0", 5);
						resp.ParkedQty=Number(hld);
						resp.TotalTime=API.formatNumber(totl, "####0", 5);
					}
					else {
						// Create line for Drive Thru Sale Report
						totAvc_ac	= (totTc!=0)?Number(totProdSale/totTc):0;			
						totAccum 	+= totProdSale;
						totAccumTc	+= totTc;
						totAccumcars+= totcars;

						var ot		= (totTc!=0)?untilStore/totTc:0; // Avg Order Time
						var lt		= (totTc!=0)?(untilRecall-untilStore) /totTc:0;
						var cash	= (totTc!=0)?(untilCloseDrawer - untilRecall)/totTc:0;
						var pnst	= ((totTc!=0)&&(untilServe > untilCloseDrawer))?(untilServe - untilCloseDrawer)/totTc:0;	// SDE-1284 
						var totl	= ot + lt + cash + pnst;
						var ovrp	= tcOverPresentationPreset;
						var ovtotl	= tcOverTotalPreset;
						var hld		= Number(tcHeld); 
						var hold	= (hld!=0)?heldTime/hld:0;

						totot		+= Number(ot);
						totlt		+= Number(lt);
						totcash		+= Number(cash);
						totpnst		+= Number(pnst);
						totovrp		+= Number(ovrp);
						totovtotl	+= Number(ovtotl);
						tothld		+= Number(hld);
						tothold		+= Number(hold);
						totpvtotl	+= Number(totl);

						var cars		= totcars;
						var orderTime	= (totTc!=0)?untilStore/totTc:0;
						var lineTime	= (totTc!=0)?(untilRecall-untilStore) /totTc:0;
						var cashTime	= (totTc!=0)?(untilCloseDrawer - untilRecall)/totTc:0;
						var psntTime	= ((totTc!=0)&&(untilServe > untilCloseDrawer))?(untilServe - untilCloseDrawer)/totTc:0;	// SDE-1284
						var posTime		= orderTime + lineTime + cashTime + psntTime;	// sum of avg times
						var ov90		= tcOverPresentationPreset;

						resp.DTLineTime=API.formatNumber(lineTime, "####0", 5);
						resp.DTOrderTime=API.formatNumber(orderTime, "####0", 5);
						resp.DTParkTime=API.formatNumber(hold, "####0", 5);
						resp.DTWindow1Time=API.formatNumber(cashTime, "####0", 5);
						resp.DTWindow2Time=API.formatNumber(psntTime, "####0", 5);
						resp.DTParkedCarsQty=tothld;
						resp.DTTotalTime=API.formatNumber(posTime, "####0", 5);
					}

					// reset SOS variables
					totAvc_ac		= 0;

					totProdSale	 	= 0;
					totTc			= 0;
					totcars			= 0;
					tothld			= 0;

					untilTotal		= 0;
					untilStore		= 0;
					untilRecall		= 0;
					untilPay		= 0;
					untilCloseDrawer= 0;
					untilServe		= 0;

					itemsCount		= 0;

					tcOverOrderPreset	= 0;
					tcOverLinePreset	= 0;
					tcOverCashPreset	= 0;
					tcOverPresentationPreset=0;
					tcOverTotalPreset	= 0;
					tcOverStorePreset	= 0;

					heldTime		= 0;
					undoTime		= 0;
					tcUnder25		= 0;
					tcOver50		= 0;
					tcHeld			= 0;
					hotTc			= 0;
					hotUntilStore	= 0;
					hotUntilRecall	= 0;
					tcOverHoldPreset = 0;

					nodesDayPartSOS=nodesDayPartSOSDT;
					nodesDayPartSOSSize=nodesDayPartSOSDTSize;
				}
			}

			WS_addLine(resp);
		}
	}

	function getSegments(startTime, endTime, type)
	{
		var arrayOfSegments = new Array();
		if(Number(type) == 0) //sos reports for FC
		{
			//API.dbg("getSegments FC enter" + rootSOSFC.DayPartitioning.Segment[0]);
			segments = rootSOSFC.DayPartitioning.Segment;
		}
		else if(Number(type) == 1) //sos report for DT
		{
			//API.dbg("getSegments DT enter" + rootSOSDT.DayPartitioning.Segment[0]);
			segments = rootSOSDT.DayPartitioning.Segment;
		}
		else //normal hsa sales
		{
			segments = rootHourlySales.DayPartitioning.Segment;
		}		
		var j=0;
		for( var i=0; i< segments.length(); i++)
		{
			var segment = segments[i];
			if(Number(segment.@begTime) >= Number(startTime) && Number(segment.@begTime) <= Number(endTime))
			{
				arrayOfSegments[j] = segment.@id;
				j++;
			}
		}
		return arrayOfSegments;
	}
	return;
}

/**
 * Accumulate cash values.
 * @param XMLCashRptAccumulated - accumulated cash
 * @param XMLCashRpt - cash
 */
function AddXMLCashRpt(XMLCashRptAccumulated, XMLCashRpt)
{
	XMLCashRptAccumulated.InitialFloat.@value=(new BigDecimal(XMLCashRptAccumulated.InitialFloat.@value).add(new BigDecimal(XMLCashRpt.InitialFloat.@value))).setScale(CURRENCY_DECIMAL);
	//XMLCashRptAccumulated.Openingreading.@value=XMLCashRpt.Openingreading.@value;
	XMLCashRptAccumulated.DIFFERENCE.@value=(new BigDecimal(XMLCashRptAccumulated.DIFFERENCE.@value).add(new BigDecimal(XMLCashRpt.DIFFERENCE.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.Overring.@tc=Number(XMLCashRptAccumulated.Overring.@tc)+Number(XMLCashRpt.Overring.@tc);
	XMLCashRptAccumulated.Overring.@amount=(new BigDecimal(XMLCashRptAccumulated.Overring.@amount).add(new BigDecimal(XMLCashRpt.Overring.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CashRefunds.@tc=Number(XMLCashRptAccumulated.CashRefunds.@tc)+Number(XMLCashRpt.CashRefunds.@tc);
	XMLCashRptAccumulated.CashRefunds.@amount=(new BigDecimal(XMLCashRptAccumulated.CashRefunds.@amount).add(new BigDecimal(XMLCashRpt.CashRefunds.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CashlessRefunds.@tc=Number(XMLCashRptAccumulated.CashlessRefunds.@tc)+Number(XMLCashRpt.CashlessRefunds.@tc);
	XMLCashRptAccumulated.CashlessRefunds.@amount=(new BigDecimal(XMLCashRptAccumulated.CashlessRefunds.@amount).add(new BigDecimal(XMLCashRpt.CashlessRefunds.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.OtherReceipts.@tc=Number(XMLCashRptAccumulated.OtherReceipts.@tc)+Number(XMLCashRpt.OtherReceipts.@tc);
	XMLCashRptAccumulated.OtherReceipts.@amount=(new BigDecimal(XMLCashRptAccumulated.OtherReceipts.@amount).add(new BigDecimal(XMLCashRpt.OtherReceipts.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.GiftCertSold.@tc=Number(XMLCashRptAccumulated.GiftCertSold.@tc)+Number(XMLCashRpt.GiftCertSold.@tc);
	XMLCashRptAccumulated.GiftCertSold.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftCertSold.@amount).add(new BigDecimal(XMLCashRpt.GiftCertSold.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.GiftCardSold.@tc=Number(XMLCashRptAccumulated.GiftCardSold.@tc)+Number(XMLCashRpt.GiftCardSold.@tc);
	XMLCashRptAccumulated.GiftCardSold.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftCardSold.@amount).add(new BigDecimal(XMLCashRpt.GiftCardSold.@amount))).setScale(CURRENCY_DECIMAL);
	/*
	XMLCashRptAccumulated.GiftCertASold.@tc=Number(XMLCashRptAccumulated.GiftCertASold.@tc)+Number(XMLCashRpt.GiftCertASold.@tc);
	XMLCashRptAccumulated.GiftCertASold.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftCertASold.@amount).add(new BigDecimal(XMLCashRpt.GiftCertASold.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.GiftCertBSold.@tc=Number(XMLCashRptAccumulated.GiftCertBSold.@tc)+Number(XMLCashRpt.GiftCertBSold.@tc);
	XMLCashRptAccumulated.GiftCertBSold.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftCertBSold.@amount).add(new BigDecimal(XMLCashRpt.GiftCertBSold.@amount))).setScale(CURRENCY_DECIMAL);
	*/
	XMLCashRptAccumulated.GROSSSALES.@value=(new BigDecimal(XMLCashRptAccumulated.GROSSSALES.@value).add(new BigDecimal(XMLCashRpt.GROSSSALES.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NOTAXSALES.@tc=Number(XMLCashRptAccumulated.NOTAXSALES.@tc)+Number(XMLCashRpt.NOTAXSALES.@tc);
	XMLCashRptAccumulated.NOTAXSALES.@value=(new BigDecimal(XMLCashRptAccumulated.NOTAXSALES.@value).add(new BigDecimal(XMLCashRpt.NOTAXSALES.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NONTAXABLESALES.@value=(new BigDecimal(XMLCashRptAccumulated.NONTAXABLESALES.@value).add(new BigDecimal(XMLCashRpt.NONTAXABLESALES.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.TAXABLESALES.@tc=(new BigDecimal(XMLCashRptAccumulated.TAXABLESALES.@tc).add(new BigDecimal(XMLCashRpt.TAXABLESALES.@tc))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.TAXABLESALES.@amount=(new BigDecimal(XMLCashRptAccumulated.TAXABLESALES.@amount).add(new BigDecimal(XMLCashRpt.TAXABLESALES.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.TOTALNETSALES.@value=(new BigDecimal(XMLCashRptAccumulated.TOTALNETSALES.@value).add(new BigDecimal(XMLCashRpt.TOTALNETSALES.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NonProductSales.@value=(new BigDecimal(XMLCashRptAccumulated.NonProductSales.@value).add(new BigDecimal(XMLCashRpt.NonProductSales.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.PRODUCTsales.@value=(new BigDecimal(XMLCashRptAccumulated.PRODUCTsales.@value).add(new BigDecimal(XMLCashRpt.PRODUCTsales.@value))).setScale(CURRENCY_DECIMAL);
	/*
	XMLCashRptAccumulated.GiftCardRedeem.@tc=Number(XMLCashRptAccumulated.GiftCardRedeem.@tc)+Number(XMLCashRpt.GiftCardRedeem.@tc);
	XMLCashRptAccumulated.GiftCardRedeem.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftCardRedeem.@amount).add(new BigDecimal(XMLCashRpt.GiftCardRedeem.@amount))).setScale(CURRENCY_DECIMAL);
	*/
	/*add total sales based on tender category */
	XMLCashRptAccumulated.CashlessSales.@tc=Number(XMLCashRptAccumulated.CashlessSales.@tc)+Number(XMLCashRpt.CashlessSales.@tc);
	XMLCashRptAccumulated.CashlessSales.@amount=(new BigDecimal(XMLCashRptAccumulated.CashlessSales.@amount).add(new BigDecimal(XMLCashRpt.CashlessSales.@amount))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.GiftCouponSales.@tc=Number(XMLCashRptAccumulated.GiftCouponSales.@tc)+Number(XMLCashRpt.GiftCouponSales.@tc);
	XMLCashRptAccumulated.GiftCouponSales.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftCouponSales.@amount).add(new BigDecimal(XMLCashRpt.GiftCouponSales.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.GiftCouponSales.@excess=(new BigDecimal(XMLCashRptAccumulated.GiftCouponSales.@excess).add(new BigDecimal(XMLCashRpt.GiftCouponSales.@excess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.GiftCertificateSales.@tc=Number(XMLCashRptAccumulated.GiftCertificateSales.@tc)+Number(XMLCashRpt.GiftCertificateSales.@tc);
	XMLCashRptAccumulated.GiftCertificateSales.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftCertificateSales.@amount).add(new BigDecimal(XMLCashRpt.GiftCertificateSales.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.GiftCertificateSales.@excess=(new BigDecimal(XMLCashRptAccumulated.GiftCertificateSales.@excess).add(new BigDecimal(XMLCashRpt.GiftCertificateSales.@excess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.GiftCardSales.@tc=Number(XMLCashRptAccumulated.GiftCardSales.@tc)+Number(XMLCashRpt.GiftCardSales.@tc);
	XMLCashRptAccumulated.GiftCardSales.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftCardSales.@amount).add(new BigDecimal(XMLCashRpt.GiftCardSales.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.GiftCardSales.@excess=(new BigDecimal(XMLCashRptAccumulated.GiftCardSales.@excess).add(new BigDecimal(XMLCashRpt.GiftCardSales.@excess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.OtherPaymentSales.@tc=Number(XMLCashRptAccumulated.OtherPaymentSales.@tc)+Number(XMLCashRpt.OtherPaymentSales.@tc);
	XMLCashRptAccumulated.OtherPaymentSales.@amount=(new BigDecimal(XMLCashRptAccumulated.OtherPaymentSales.@amount).add(new BigDecimal(XMLCashRpt.OtherPaymentSales.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.OtherPaymentSales.@excess=(new BigDecimal(XMLCashRptAccumulated.OtherPaymentSales.@excess).add(new BigDecimal(XMLCashRpt.OtherPaymentSales.@excess))).setScale(CURRENCY_DECIMAL);
	/*
	//03.02.2009 OI new Tags for e-cash
	XMLCashRptAccumulated.CashlessPaymentA.@tc=Number(XMLCashRptAccumulated.CashlessPaymentA.@tc)+Number(XMLCashRpt.CashlessPaymentA.@tc);
	XMLCashRptAccumulated.CashlessPaymentA.@amount=(new BigDecimal(XMLCashRptAccumulated.CashlessPaymentA.@amount).add(new BigDecimal(XMLCashRpt.CashlessPaymentA.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CashlessPaymentB.@tc=Number(XMLCashRptAccumulated.CashlessPaymentB.@tc)+Number(XMLCashRpt.CashlessPaymentB.@tc);
	XMLCashRptAccumulated.CashlessPaymentB.@amount=(new BigDecimal(XMLCashRptAccumulated.CashlessPaymentB.@amount).add(new BigDecimal(XMLCashRpt.CashlessPaymentB.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CashlessPaymentC.@tc=Number(XMLCashRptAccumulated.CashlessPaymentC.@tc)+Number(XMLCashRpt.CashlessPaymentC.@tc);
	XMLCashRptAccumulated.CashlessPaymentC.@amount=(new BigDecimal(XMLCashRptAccumulated.CashlessPaymentC.@amount).add(new BigDecimal(XMLCashRpt.CashlessPaymentC.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CashlessPaymentD.@tc=Number(XMLCashRptAccumulated.CashlessPaymentD.@tc)+Number(XMLCashRpt.CashlessPaymentD.@tc);
	XMLCashRptAccumulated.CashlessPaymentD.@amount=(new BigDecimal(XMLCashRptAccumulated.CashlessPaymentD.@amount).add(new BigDecimal(XMLCashRpt.CashlessPaymentD.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CashlessPaymentE.@tc=Number(XMLCashRptAccumulated.CashlessPaymentE.@tc)+Number(XMLCashRpt.CashlessPaymentE.@tc);
	XMLCashRptAccumulated.CashlessPaymentE.@amount=(new BigDecimal(XMLCashRptAccumulated.CashlessPaymentE.@amount).add(new BigDecimal(XMLCashRpt.CashlessPaymentE.@amount))).setScale(CURRENCY_DECIMAL);
	*/
	XMLCashRptAccumulated.CashTransferIn.@tc=Number(XMLCashRptAccumulated.CashTransferIn.@tc)+Number(XMLCashRpt.CashTransferIn.@tc);
	XMLCashRptAccumulated.CashTransferIn.@amount=(new BigDecimal(XMLCashRptAccumulated.CashTransferIn.@amount).add(new BigDecimal(XMLCashRpt.CashTransferIn.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CashTransferOut.@tc=Number(XMLCashRptAccumulated.CashTransferOut.@tc)+Number(XMLCashRpt.CashTransferOut.@tc);
	XMLCashRptAccumulated.CashTransferOut.@amount=(new BigDecimal(XMLCashRptAccumulated.CashTransferOut.@amount).add(new BigDecimal(XMLCashRpt.CashTransferOut.@amount))).setScale(CURRENCY_DECIMAL);
	/*other payment
	XMLCashRptAccumulated.BillableSales.@tc=Number(XMLCashRptAccumulated.BillableSales.@tc)+Number(XMLCashRpt.BillableSales.@tc);
	XMLCashRptAccumulated.BillableSales.@amount=(new BigDecimal(XMLCashRptAccumulated.BillableSales.@amount).add(new BigDecimal(XMLCashRpt.BillableSales.@amount))).setScale(CURRENCY_DECIMAL);
	//09.10.2008 OI insert excess caculation for BillableSales
	XMLCashRptAccumulated.BillableSales.@excess=(new BigDecimal(XMLCashRptAccumulated.BillableSales.@excess).add(new BigDecimal(XMLCashRpt.BillableSales.@excess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.GiftCertif.@tc=Number(XMLCashRptAccumulated.GiftCertif.@tc)+Number(XMLCashRpt.GiftCertif.@tc);
	XMLCashRptAccumulated.GiftCertif.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftCertif.@amount).add(new BigDecimal(XMLCashRpt.GiftCertif.@amount))).setScale(CURRENCY_DECIMAL);
	*/
	/*other payment
	XMLCashRptAccumulated.GiftBook.@tc=Number(XMLCashRptAccumulated.GiftBook.@tc)+Number(XMLCashRpt.GiftBook.@tc);
	XMLCashRptAccumulated.GiftBook.@amount=(new BigDecimal(XMLCashRptAccumulated.GiftBook.@amount).add(new BigDecimal(XMLCashRpt.GiftBook.@amount))).setScale(CURRENCY_DECIMAL);
	*/
	XMLCashRptAccumulated.COMPUTEDCASH.@value=(new BigDecimal(XMLCashRptAccumulated.COMPUTEDCASH.@value).add(new BigDecimal(XMLCashRpt.COMPUTEDCASH.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CashSkims.@value=(new BigDecimal(XMLCashRptAccumulated.CashSkims.@value).add(new BigDecimal(XMLCashRpt.CashSkims.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.Expectedcash.@value=(new BigDecimal(XMLCashRptAccumulated.Expectedcash.@value).add(new BigDecimal(XMLCashRpt.Expectedcash.@value))).setScale(CURRENCY_DECIMAL);
	/*
	XMLCashRptAccumulated.CashCashUS.@tc=Number(XMLCashRptAccumulated.CashCashUS.@tc)+Number(XMLCashRpt.CashCashUS.@tc);
	XMLCashRptAccumulated.CashCashUS.@amount=(new BigDecimal(XMLCashRptAccumulated.CashCashUS.@amount).add(new BigDecimal(XMLCashRpt.CashCashUS.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CouponA.@tc=Number(XMLCashRptAccumulated.CouponA.@tc)+Number(XMLCashRpt.CouponA.@tc);
	XMLCashRptAccumulated.CouponA.@amount=(new BigDecimal(XMLCashRptAccumulated.CouponA.@amount).add(new BigDecimal(XMLCashRpt.CouponA.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CouponB.@tc=Number(XMLCashRptAccumulated.CouponB.@tc)+Number(XMLCashRpt.CouponB.@tc);
	XMLCashRptAccumulated.CouponB.@amount=(new BigDecimal(XMLCashRptAccumulated.CouponB.@amount).add(new BigDecimal(XMLCashRpt.CouponB.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CouponC.@tc=Number(XMLCashRptAccumulated.CouponC.@tc)+Number(XMLCashRpt.CouponC.@tc);
	XMLCashRptAccumulated.CouponC.@amount=(new BigDecimal(XMLCashRptAccumulated.CouponC.@amount).add(new BigDecimal(XMLCashRpt.CouponC.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CouponD.@tc=Number(XMLCashRptAccumulated.CouponD.@tc)+Number(XMLCashRpt.CouponD.@tc);
	XMLCashRptAccumulated.CouponD.@amount=(new BigDecimal(XMLCashRptAccumulated.CouponD.@amount).add(new BigDecimal(XMLCashRpt.CouponD.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.CouponE.@tc=Number(XMLCashRptAccumulated.CouponE.@tc)+Number(XMLCashRpt.CouponE.@tc);
	XMLCashRptAccumulated.CouponE.@amount=(new BigDecimal(XMLCashRptAccumulated.CouponE.@amount).add(new BigDecimal(XMLCashRpt.CouponE.@amount))).setScale(CURRENCY_DECIMAL);
	*/
	// Get tender information
	//XMLCashRptAccumulated.nodesTender += XMLCashRpt.nodesTender
	XMLCashRptAccumulated.Giftcardcashout.@tc=Number(XMLCashRptAccumulated.Giftcardcashout.@tc)+Number(XMLCashRpt.Giftcardcashout.@tc);
	XMLCashRptAccumulated.Giftcardcashout.@amount=(new BigDecimal(XMLCashRptAccumulated.Giftcardcashout.@amount).add(new BigDecimal(XMLCashRpt.Giftcardcashout.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.TotalTCAC.@tc=Number(XMLCashRptAccumulated.TotalTCAC.@tc)+Number(XMLCashRpt.TotalTCAC.@tc);
	XMLCashRptAccumulated.TotalTCAC.@amount=(new BigDecimal(XMLCashRptAccumulated.TotalTCAC.@amount).add(new BigDecimal(XMLCashRpt.TotalTCAC.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NetsalesDThru.@tc=Number(XMLCashRptAccumulated.NetsalesDThru.@tc)+Number(XMLCashRpt.NetsalesDThru.@tc);
	XMLCashRptAccumulated.NetsalesDThru.@amount=(new BigDecimal(XMLCashRptAccumulated.NetsalesDThru.@amount).add(new BigDecimal(XMLCashRpt.NetsalesDThru.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.PercentDThru.@value=(new BigDecimal(XMLCashRptAccumulated.PercentDThru.@value).add(new BigDecimal(XMLCashRpt.PercentDThru.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.Cars.@value=(new BigDecimal(XMLCashRptAccumulated.Cars.@value).add(new BigDecimal(XMLCashRpt.Cars.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NetsalesBfast.@tc=Number(XMLCashRptAccumulated.NetsalesBfast.@tc)+Number(XMLCashRpt.NetsalesBfast.@tc);
	XMLCashRptAccumulated.NetsalesBfast.@amount=(new BigDecimal(XMLCashRptAccumulated.NetsalesBfast.@amount).add(new BigDecimal(XMLCashRpt.NetsalesBfast.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.BreakfastPercent.@value=(new BigDecimal(XMLCashRptAccumulated.BreakfastPercent.@value).add(new BigDecimal(XMLCashRpt.BreakfastPercent.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NetsalesEatIn.@tc=Number(XMLCashRptAccumulated.NetsalesEatIn.@tc)+Number(XMLCashRpt.NetsalesEatIn.@tc);
	XMLCashRptAccumulated.NetsalesEatIn.@amount=(new BigDecimal(XMLCashRptAccumulated.NetsalesEatIn.@amount).add(new BigDecimal(XMLCashRpt.NetsalesEatIn.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.EatIntax.@value=(new BigDecimal(XMLCashRptAccumulated.EatIntax.@value).add(new BigDecimal(XMLCashRpt.EatIntax.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NetsalesTakeOut.@tc=Number(XMLCashRptAccumulated.NetsalesTakeOut.@tc)+Number(XMLCashRpt.NetsalesTakeOut.@tc);
	XMLCashRptAccumulated.NetsalesTakeOut.@amount=(new BigDecimal(XMLCashRptAccumulated.NetsalesTakeOut.@amount).add(new BigDecimal(XMLCashRpt.NetsalesTakeOut.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.TakeOuttax.@value=(new BigDecimal(XMLCashRptAccumulated.TakeOuttax.@value).add(new BigDecimal(XMLCashRpt.TakeOuttax.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.TakeOutPercent.@value=(new BigDecimal(XMLCashRptAccumulated.TakeOutPercent.@value).add(new BigDecimal(XMLCashRpt.TakeOutPercent.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NetsalesGarden.@tc=Number(XMLCashRptAccumulated.NetsalesGarden.@tc)+Number(XMLCashRpt.NetsalesGarden.@tc);
	XMLCashRptAccumulated.NetsalesGarden.@amount=(new BigDecimal(XMLCashRptAccumulated.NetsalesGarden.@amount).add(new BigDecimal(XMLCashRpt.NetsalesGarden.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.Gardentax.@tc=Number(XMLCashRptAccumulated.Gardentax.@tc)+Number(XMLCashRpt.Gardentax.@tc);
	XMLCashRptAccumulated.Waste.@tc=Number(XMLCashRptAccumulated.Waste.@tc)+Number(XMLCashRpt.Waste.@tc);
	XMLCashRptAccumulated.Waste.@amount=(new BigDecimal(XMLCashRptAccumulated.Waste.@amount).add(new BigDecimal(XMLCashRpt.Waste.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.PROMO.@tc=Number(XMLCashRptAccumulated.PROMO.@tc)+Number(XMLCashRpt.PROMO.@tc);
	XMLCashRptAccumulated.PROMO.@amount=(new BigDecimal(XMLCashRptAccumulated.PROMO.@amount).add(new BigDecimal(XMLCashRpt.PROMO.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.Amountdiscount.@tc=Number(XMLCashRptAccumulated.Amountdiscount.@tc)+Number(XMLCashRpt.Amountdiscount.@tc);
	XMLCashRptAccumulated.Amountdiscount.@amount=(new BigDecimal(XMLCashRptAccumulated.Amountdiscount.@amount).add(new BigDecimal(XMLCashRpt.Amountdiscount.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.EmpMealdiscount.@tc=Number(XMLCashRptAccumulated.EmpMealdiscount.@tc)+Number(XMLCashRpt.EmpMealdiscount.@tc);
	XMLCashRptAccumulated.EmpMealdiscount.@amount=(new BigDecimal(XMLCashRptAccumulated.EmpMealdiscount.@amount).add(new BigDecimal(XMLCashRpt.EmpMealdiscount.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.MgrMealdiscount.@tc=Number(XMLCashRptAccumulated.MgrMealdiscount.@tc)+Number(XMLCashRpt.MgrMealdiscount.@tc);
	XMLCashRptAccumulated.MgrMealdiscount.@amount=(new BigDecimal(XMLCashRptAccumulated.MgrMealdiscount.@amount).add(new BigDecimal(XMLCashRpt.MgrMealdiscount.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.RedBeforeTotal.@tc=Number(XMLCashRptAccumulated.RedBeforeTotal.@tc)+Number(XMLCashRpt.RedBeforeTotal.@tc);
	XMLCashRptAccumulated.RedBeforeTotal.@amount=(new BigDecimal(XMLCashRptAccumulated.RedBeforeTotal.@amount).add(new BigDecimal(XMLCashRpt.RedBeforeTotal.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.AvgRedBeforeTotal.@value=(new BigDecimal(XMLCashRptAccumulated.AvgRedBeforeTotal.@value).add(new BigDecimal(XMLCashRpt.AvgRedBeforeTotal.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.RedAfterTotal.@tc=Number(XMLCashRptAccumulated.RedAfterTotal.@tc)+Number(XMLCashRpt.RedAfterTotal.@tc);
	XMLCashRptAccumulated.RedAfterTotal.@amount=(new BigDecimal(XMLCashRptAccumulated.RedAfterTotal.@amount).add(new BigDecimal(XMLCashRpt.RedAfterTotal.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.AvgRedAfterTotal.@value=(new BigDecimal(XMLCashRptAccumulated.AvgRedAfterTotal.@value).add(new BigDecimal(XMLCashRpt.AvgRedAfterTotal.@value))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.Draweropens.@value=(new BigDecimal(XMLCashRptAccumulated.Draweropens.@value).add(new BigDecimal(XMLCashRpt.Draweropens.@value))).setScale(CURRENCY_DECIMAL);

	
	//add individual tags for all tender , the naming is based on tender category
	//native tender
	XMLCashRptAccumulated.NativeCurrency.@tc= Number(XMLCashRptAccumulated.NativeCurrency.@tc) + Number(XMLCashRpt.NativeCurrency.@tc);
	XMLCashRptAccumulated.NativeCurrency.@amount= (new BigDecimal(XMLCashRptAccumulated.NativeCurrency.@amount).add(new BigDecimal(XMLCashRpt.NativeCurrency.@amount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NativeCurrency.@excess= (new BigDecimal(XMLCashRptAccumulated.NativeCurrency.@excess).add(new BigDecimal(XMLCashRpt.NativeCurrency.@excess))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.NativeCurrency.@change= (new BigDecimal(XMLCashRptAccumulated.NativeCurrency.@change).add(new BigDecimal(XMLCashRpt.NativeCurrency.@change))).setScale(CURRENCY_DECIMAL);

	for(i=1; i< Number(XMLCashRpt.csh_TenderElectronicPayment); i++)
	{
		//API.dbg("XMLCashRpt.TenderElectronicPayment "+XMLCashRpt.TenderElectronicPayment);
		var cmd = "XMLCashRptAccumulated.CashlessPayment"+i+".@tc= Number(XMLCashRptAccumulated.CashlessPayment"+i+".@tc) + Number(XMLCashRpt.CashlessPayment"+i+".@tc)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.CashlessPayment"+i+".@amount= (new BigDecimal(XMLCashRptAccumulated.CashlessPayment"+i+".@amount).add(new BigDecimal(XMLCashRpt.CashlessPayment"+i+".@amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.CashlessPayment"+i+".@excess= (new BigDecimal(XMLCashRptAccumulated.CashlessPayment"+i+".@excess).add(new BigDecimal(XMLCashRpt.CashlessPayment"+i+".@excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.CashlessPayment"+i+".@change= (new BigDecimal(XMLCashRptAccumulated.CashlessPayment"+i+".@change).add(new BigDecimal(XMLCashRpt.CashlessPayment"+i+".@change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderCouponNo); i++)
	{
		//API.dbg("XMLCashRpt.csh_TenderCouponNo "+XMLCashRpt.csh_TenderCouponNo);
		var cmd = "XMLCashRptAccumulated.Coupon"+i+".@tc= Number(XMLCashRptAccumulated.Coupon"+i+".@tc) + Number(XMLCashRpt.Coupon"+i+".@tc)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.Coupon"+i+".@amount= (new BigDecimal(XMLCashRptAccumulated.Coupon"+i+".@amount).add(new BigDecimal(XMLCashRpt.Coupon"+i+".@amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.Coupon"+i+".@excess= (new BigDecimal(XMLCashRptAccumulated.Coupon"+i+".@excess).add(new BigDecimal(XMLCashRpt.Coupon"+i+".@excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.Coupon"+i+".@change= (new BigDecimal(XMLCashRptAccumulated.Coupon"+i+".@change).add(new BigDecimal(XMLCashRpt.Coupon"+i+".@change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderForeignCurrencyNo); i++)
	{
		//API.dbg("XMLCashRpt.TenderForeignCurrencyNo "+XMLCashRpt.csh_TenderForeignCurrencyNo);
		var cmd = "XMLCashRptAccumulated.ForeignCurrency"+i+".@tc= Number(XMLCashRptAccumulated.ForeignCurrency"+i+".@tc) + Number(XMLCashRpt.ForeignCurrency"+i+".@tc)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.ForeignCurrency"+i+".@amount= (new BigDecimal(XMLCashRptAccumulated.ForeignCurrency"+i+".@amount).add(new BigDecimal(XMLCashRpt.ForeignCurrency"+i+".@amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.ForeignCurrency"+i+".@excess= (new BigDecimal(XMLCashRptAccumulated.ForeignCurrency"+i+".@excess).add(new BigDecimal(XMLCashRpt.ForeignCurrency"+i+".@excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.ForeignCurrency"+i+".@change= (new BigDecimal(XMLCashRptAccumulated.ForeignCurrency"+i+".@change).add(new BigDecimal(XMLCashRpt.ForeignCurrency"+i+".@change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderCreditSaleNo); i++)
	{
		//API.dbg("XMLCashRpt.csh_TenderCreditSaleNo "+XMLCashRpt.csh_TenderCreditSaleNo);
		var cmd = "XMLCashRptAccumulated.CreditSale"+i+".@tc= Number(XMLCashRptAccumulated.CreditSale"+i+".@tc) + Number(XMLCashRpt.CreditSale"+i+".@tc)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.CreditSale"+i+".@amount= (new BigDecimal(XMLCashRptAccumulated.CreditSale"+i+".@amount).add(new BigDecimal(XMLCashRpt.CreditSale"+i+".@amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.CreditSale"+i+".@excess= (new BigDecimal(XMLCashRptAccumulated.CreditSale"+i+".@excess).add(new BigDecimal(XMLCashRpt.CreditSale"+i+".@excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.CreditSale"+i+".@change= (new BigDecimal(XMLCashRptAccumulated.CreditSale"+i+".@change).add(new BigDecimal(XMLCashRpt.CreditSale"+i+".@change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderOtherPaymentNo); i++)
	{
		//API.dbg("XMLCashRpt.csh_TenderOtherPaymentNo "+XMLCashRpt.csh_TenderOtherPaymentNo);
		var cmd = "XMLCashRptAccumulated.OtherPayment"+i+".@tc= Number(XMLCashRptAccumulated.OtherPayment"+i+".@tc) + Number(XMLCashRpt.OtherPayment"+i+".@tc)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.OtherPayment"+i+".@amount= (new BigDecimal(XMLCashRptAccumulated.OtherPayment"+i+".@amount).add(new BigDecimal(XMLCashRpt.OtherPayment"+i+".@amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.OtherPayment"+i+".@excess= (new BigDecimal(XMLCashRptAccumulated.OtherPayment"+i+".@excess).add(new BigDecimal(XMLCashRpt.OtherPayment"+i+".@excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.OtherPayment"+i+".@change= (new BigDecimal(XMLCashRptAccumulated.OtherPayment"+i+".@change).add(new BigDecimal(XMLCashRpt.OtherPayment"+i+".@change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_GCertRedeemNo); i++)
	{
		//API.dbg("XMLCashRpt.csh_GCertRedeemNo "+XMLCashRpt.csh_GCertRedeemNo);
		var cmd = "XMLCashRptAccumulated.GC"+i+"Redeem.@tc= Number(XMLCashRptAccumulated.GC"+i+"Redeem.@tc) + Number(XMLCashRpt.GC"+i+"Redeem.@tc)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GC"+i+"Redeem.@amount= (new BigDecimal(XMLCashRptAccumulated.GC"+i+"Redeem.@amount).add(new BigDecimal(XMLCashRpt.GC"+i+"Redeem.@amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GC"+i+"Redeem.@excess= (new BigDecimal(XMLCashRptAccumulated.GC"+i+"Redeem.@excess).add(new BigDecimal(XMLCashRpt.GC"+i+"Redeem.@excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GC"+i+"Redeem.@change= (new BigDecimal(XMLCashRptAccumulated.GC"+i+"Redeem.@change).add(new BigDecimal(XMLCashRpt.GC"+i+"Redeem.@change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_GCardRedeemNo); i++)
	{
		//API.dbg("XMLCashRpt.csh_GCardRedeemNo "+XMLCashRpt.csh_GCardRedeemNo);
		var cmd = "XMLCashRptAccumulated.GCard"+i+"Redeem.@tc= Number(XMLCashRptAccumulated.GCard"+i+"Redeem.@tc) + Number(XMLCashRpt.GCard"+i+"Redeem.@tc)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GCard"+i+"Redeem.@amount= (new BigDecimal(XMLCashRptAccumulated.GCard"+i+"Redeem.@amount).add(new BigDecimal(XMLCashRpt.GCard"+i+"Redeem.@amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GCard"+i+"Redeem.@excess= (new BigDecimal(XMLCashRptAccumulated.GCard"+i+"Redeem.@excess).add(new BigDecimal(XMLCashRpt.GCard"+i+"Redeem.@excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GCard"+i+"Redeem.@change= (new BigDecimal(XMLCashRptAccumulated.GCard"+i+"Redeem.@change).add(new BigDecimal(XMLCashRpt.GCard"+i+"Redeem.@change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	//add tags for gift card and gift cert sold
	for(i=1; i<= Number(XMLCashRpt.csh_GCertSoldNo); i++)
	{
		//API.dbg("XMLCashRpt.csh_GCertSoldNo "+XMLCashRpt.csh_GCertSoldNo);
		var cmd = "XMLCashRptAccumulated.GiftCert"+i+"Sold.@prodId = XMLCashRpt.GiftCert"+i+"Sold.@prodId";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GiftCert"+i+"Sold.@tc = Number(XMLCashRptAccumulated.GiftCert"+i+"Sold.@tc) + Number(XMLCashRpt.GiftCert"+i+"Sold.@tc)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GiftCert"+i+"Sold.@amount =(new BigDecimal(XMLCashRptAccumulated.GiftCert"+i+"Sold.@amount).add(new BigDecimal(XMLCashRpt.GiftCert"+i+"Sold.@amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		//var cmd = "XMLCashRpt.GiftCert"+i+"Sold.@refundTc =Number(XMLCashRptAccumulated.GiftCert"+j+"Sold.@refundTc) + Number(XMLCashRpt.GiftCert"+j+"Sold.@refundTc)";
		//eval(cmd);
		//var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@refundAmount =(new BigDecimal(XMLCashRptAccumulated.GiftCert"+i+"Sold.@refundAmount).add(new BigDecimal(XMLCashRpt.GiftCert"+i+"Sold.@refundAmount))).setScale(CURRENCY_DECIMAL)";
		//eval(cmd);
	}
	//gift card sold
	for(i=1; i<= Number(XMLCashRpt.csh_GCSoldNo); i++)
	{
		API.dbg("csh_GCSoldNo intl "+XMLCashRpt.csh_GCSoldNo);
		var cmd = "XMLCashRptAccumulated.GiftCard"+i+"Sold.@prodId = XMLCashRpt.GiftCard"+i+"Sold.@prodId";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GiftCard"+i+"Sold.@tc = Number(XMLCashRptAccumulated.GiftCard"+i+"Sold.@tc) + Number(XMLCashRpt.GiftCard"+i+"Sold.@tc)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.GiftCard"+i+"Sold.@amount =(new BigDecimal(XMLCashRptAccumulated.GiftCard"+i+"Sold.@amount).add(new BigDecimal(XMLCashRpt.GiftCard"+i+"Sold.@amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		//var cmd = "XMLCashRpt.GiftCard"+i+"Sold.@refundTc =Number(XMLCashRptAccumulated.GiftCard"+j+"Sold.@refundTc) + Number(XMLCashRpt.GiftCard"+j+"Sold.@refundTc)";
		//eval(cmd);
		//var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@refundAmount =(new BigDecimal(XMLCashRptAccumulated.GiftCert"+i+"Sold.@refundAmount).add(new BigDecimal(XMLCashRpt.GiftCert"+i+"Sold.@refundAmount))).setScale(CURRENCY_DECIMAL)";
		//eval(cmd);
	}

	//19.12.2008 oi we need a tender overview
	//<Tender>
	//	<TenderName>GBP</TenderName>
	//	<TenderCategory>TENDER_NATIVE</ TenderCategory>
	//	<TenderId>0</TenderId>
	//    <TenderAmount>0</TenderAmount>
	//    <TenderQty>0</TenderQty>
	//	<TenderExcess>0</TenderExcess>
	//	<TenderChange>0</TenderChange>
	
	//	<csh_TenderRefundAmount>20.4</csh_TenderRefundAmounty>
	//	<csh_TenderRefundQtyy>2</csh_TenderRefundQty>
	//</Tender>	
	var i = 0;
	var j = 0;
	for(i=0; i<XMLCashRpt.csh_Tender.length(); i++)
	{
		var x = "0";
		for(j=0; j<XMLCashRptAccumulated.Tender.length(); j++)
		{
			//29.01.2009 OI add Number because it don't work without
			if(Number(XMLCashRptAccumulated.Tender[j].TenderId)  == Number(XMLCashRpt.csh_Tender[i].csh_TenderId))
			{
				x = "1";
				//XMLCashRptAccumulated.Tender[j].TenderName = XMLCashRpt.csh_Tender[i].csh_TenderName;
				//XMLCashRptAccumulated.Tender[j].TenderCategory = XMLCashRpt.csh_Tender[i].csh_TenderName;
				//XMLCashRptAccumulated.Tender[j].TenderId = XMLCashRpt.csh_Tender[i].csh_TenderId;
				XMLCashRptAccumulated.Tender[j].TenderAmount = new BigDecimal(XMLCashRptAccumulated.Tender[j].TenderAmount).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderAmount)).setScale(CURRENCY_DECIMAL);
				XMLCashRptAccumulated.Tender[j].TenderQty = new BigDecimal(XMLCashRptAccumulated.Tender[j].TenderQty).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderQty)).setScale(CURRENCY_DECIMAL);
				XMLCashRptAccumulated.Tender[j].TenderExcess = new BigDecimal(XMLCashRptAccumulated.Tender[j].TenderExcess).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderExcess)).setScale(CURRENCY_DECIMAL);
				XMLCashRptAccumulated.Tender[j].TenderChange = new BigDecimal(XMLCashRptAccumulated.Tender[j].TenderChange).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderChange)).setScale(CURRENCY_DECIMAL);
				
				//MS 21.01.2011 -enable refund information per tender
				XMLCashRptAccumulated.Tender[j].TenderRefundAmount = new BigDecimal(XMLCashRptAccumulated.Tender[j].TenderRefundAmount).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundAmount)).setScale(CURRENCY_DECIMAL);
				XMLCashRptAccumulated.Tender[j].TenderRefundQty = new BigDecimal(XMLCashRptAccumulated.Tender[j].TenderRefundQty).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundQty)).setScale(CURRENCY_DECIMAL);;

				break; //29.01.2009 OI i think we need a break
			}
		}

		if(x == "0")
		{
			var tenderTag = <Tender/>;
			tenderTag.TenderName = XMLCashRpt.csh_Tender[i].csh_TenderName.toString();
			tenderTag.TenderCategory = XMLCashRpt.csh_Tender[i].csh_TenderCategory.toString();
			tenderTag.TenderId = XMLCashRpt.csh_Tender[i].csh_TenderId.toString();
			tenderTag.TenderAmount = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderAmount).setScale(CURRENCY_DECIMAL);
			tenderTag.TenderQty = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderQty).setScale(CURRENCY_DECIMAL);
			tenderTag.TenderExcess = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderExcess).setScale(CURRENCY_DECIMAL);
			tenderTag.TenderChange =new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderChange).setScale(CURRENCY_DECIMAL);
			
			//MS 21.01.2011 -enable refund information per tender
			tenderTag.TenderRefundAmount = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundAmount).setScale(CURRENCY_DECIMAL);
			tenderTag.TenderRefundQty = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundQty).setScale(CURRENCY_DECIMAL);

			
			XMLCashRptAccumulated.appendChild(tenderTag);
		}
	}
}

/**
 * Accumulate cash values.
 * @param XMLCashRptAccumulated - accumulated cash
 * @param XMLCashRpt - cash
 */
function AddXMLIntlCashRpt(XMLCashRptAccumulated, XMLCashRpt)
{
	var NEWMAXTENDER=60;
	var NEWMAXALIQUOTA=20;

	for(iCount=0; iCount<NEWMAXTENDER; iCount++) {
		var cmd = "XMLCashRpt.csh_InitAmount_ttype_" + iCount;
		var testNode = eval(cmd);
		var evaluate;
		if(0!=testNode.length()) {
			cmd = "XMLCashRptAccumulated.csh_InitAmount_ttype_" + iCount + "=(new BigDecimal(XMLCashRptAccumulated.csh_InitAmount_ttype_" + iCount + ").add(new BigDecimal(XMLCashRpt.csh_InitAmount_ttype_" + iCount + "))).setScale(CURRENCY_DECIMAL)";
			evaluate = eval(cmd);
		}
	}

	XMLCashRptAccumulated.csh_OpeningForeverReading			= (new BigDecimal(XMLCashRptAccumulated.csh_OpeningForeverReading			).add(new BigDecimal(XMLCashRpt.csh_OpeningForeverReading))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_CurrentForeverReading			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CurrentForeverReading		)+Number(XMLCashRpt.csh_CurrentForeverReading));
	XMLCashRptAccumulated.csh_TransactionCount				= Number(Number(XMLCashRptAccumulated.csh_TransactionCount					)+Number(XMLCashRpt.csh_TransactionCount));
	XMLCashRptAccumulated.csh_TransactionCountAll			= Number(Number(XMLCashRptAccumulated.csh_TransactionCountAll				)+Number(XMLCashRpt.csh_TransactionCountAll));
	XMLCashRptAccumulated.csh_TransactionCountNP			= Number(Number(XMLCashRptAccumulated.csh_TransactionCountNP				)+Number(XMLCashRpt.csh_TransactionCountNP));
	XMLCashRptAccumulated.csh_OverringQuantity				= Number(Number(XMLCashRptAccumulated.csh_OverringQuantity					)+Number(XMLCashRpt.csh_OverringQuantity));
	XMLCashRptAccumulated.csh_OverringAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OverringAmount					)+Number(XMLCashRpt.csh_OverringAmount));
	XMLCashRptAccumulated.csh_RefundQuantity				= Number(Number(XMLCashRptAccumulated.csh_RefundQuantity					)+Number(XMLCashRpt.csh_RefundQuantity));
	XMLCashRptAccumulated.csh_RefundAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_RefundAmount					)+Number(XMLCashRpt.csh_RefundAmount));
	XMLCashRptAccumulated.csh_RefundTax						= Nmb2Currency(Number(XMLCashRptAccumulated.csh_RefundTax						)+Number(XMLCashRpt.csh_RefundTax));
	XMLCashRptAccumulated.csh_OtherReceiptsQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherReceiptsQuantity				)+Number(XMLCashRpt.csh_OtherReceiptsQuantity));
	XMLCashRptAccumulated.csh_OtherReceiptsAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherReceiptsAmount				)+Number(XMLCashRpt.csh_OtherReceiptsAmount));
	/*
	XMLCashRptAccumulated.csh_GCSoldAQuantity				= Number(Number(XMLCashRptAccumulated.csh_GCSoldAQuantity					)+Number(XMLCashRpt.csh_GCSoldAQuantity));
	XMLCashRptAccumulated.csh_GCSoldAAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCSoldAAmount					)+Number(XMLCashRpt.csh_GCSoldAAmount));
	XMLCashRptAccumulated.csh_GCSoldBQuantity				= Number(Number(XMLCashRptAccumulated.csh_GCSoldBQuantity					)+Number(XMLCashRpt.csh_GCSoldBQuantity));
	XMLCashRptAccumulated.csh_GCSoldBAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCSoldBAmount					)+Number(XMLCashRpt.csh_GCSoldBAmount));
	*/
	XMLCashRptAccumulated.csh_ProductSalesTaxAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductSalesTaxAmount			)+Number(XMLCashRpt.csh_ProductSalesTaxAmount));
	XMLCashRptAccumulated.csh_NonProductSalesTaxAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductSalesTaxAmount		)+Number(XMLCashRpt.csh_NonProductSalesTaxAmount));
	XMLCashRptAccumulated.csh_OtherTaxAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherTaxAmount					)+Number(XMLCashRpt.csh_OtherTaxAmount));
	XMLCashRptAccumulated.csh_AllNetSalesAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_AllNetSalesAmount				)+Number(XMLCashRpt.csh_AllNetSalesAmount));
	/*
	XMLCashRptAccumulated.csh_CouponAQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponAQuantity					)+Number(XMLCashRpt.csh_CouponAQuantity));
	XMLCashRptAccumulated.csh_CouponAAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponAAmount					)+Number(XMLCashRpt.csh_CouponAAmount));
	XMLCashRptAccumulated.csh_CouponBQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponBQuantity					)+Number(XMLCashRpt.csh_CouponBQuantity));
	XMLCashRptAccumulated.csh_CouponBAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponBAmount					)+Number(XMLCashRpt.csh_CouponBAmount));
	XMLCashRptAccumulated.csh_CouponCQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponCQuantity					)+Number(XMLCashRpt.csh_CouponCQuantity));
	XMLCashRptAccumulated.csh_CouponCAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponCAmount					)+Number(XMLCashRpt.csh_CouponCAmount));
	XMLCashRptAccumulated.csh_CouponDQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponDQuantity					)+Number(XMLCashRpt.csh_CouponDQuantity));
	XMLCashRptAccumulated.csh_CouponDAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponDAmount					)+Number(XMLCashRpt.csh_CouponDAmount));
	XMLCashRptAccumulated.csh_CouponEQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponEQuantity					)+Number(XMLCashRpt.csh_CouponEQuantity));
	XMLCashRptAccumulated.csh_CouponEAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponEAmount					)+Number(XMLCashRpt.csh_CouponEAmount));
	*/
	XMLCashRptAccumulated.csh_nonWWSCouponAQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponAQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponAQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponAAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponAAmount				)+Number(XMLCashRpt.csh_nonWWSCouponAAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessAQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessAQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessAQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessAAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessAAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessAAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimAQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimAQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimAQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimAAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimAAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimAAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponBQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponBQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponBQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponBAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponBAmount				)+Number(XMLCashRpt.csh_nonWWSCouponBAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessBQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessBQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessBQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessBAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessBAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessBAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimBQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimBQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimBQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimBAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimBAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimBAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponCQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponCQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponCQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponCAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponCAmount				)+Number(XMLCashRpt.csh_nonWWSCouponCAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessCQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessCQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessCQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessCAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessCAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessCAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimCQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimCQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimCQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimCAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimCAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimCAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponDQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponDQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponDQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponDAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponDAmount				)+Number(XMLCashRpt.csh_nonWWSCouponDAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessDQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessDQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessDQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessDAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessDAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessDAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimDQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimDQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimDQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimDAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimDAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimDAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponEQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponEQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponEQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponEAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponEAmount				)+Number(XMLCashRpt.csh_nonWWSCouponEAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessEQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessEQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessEQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessEAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessEAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessEAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimEQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimEQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimEQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimEAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimEAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimEAmount));
	XMLCashRptAccumulated.csh_DiscountSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_DiscountSalesQuantity				)+Number(XMLCashRpt.csh_DiscountSalesQuantity));
	XMLCashRptAccumulated.csh_DiscountSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DiscountSalesAmount				)+Number(XMLCashRpt.csh_DiscountSalesAmount));
	XMLCashRptAccumulated.csh_DiscountSalesTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DiscountSalesTax				)+Number(XMLCashRpt.csh_DiscountSalesTax));
	XMLCashRptAccumulated.csh_DiscountSalesCouponQuantity	= Number(Number(XMLCashRptAccumulated.csh_DiscountSalesCouponQuantity		)+Number(XMLCashRpt.csh_DiscountSalesCouponQuantity));
	XMLCashRptAccumulated.csh_DiscountSalesCouponAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DiscountSalesCouponAmount		)+Number(XMLCashRpt.csh_DiscountSalesCouponAmount));
	XMLCashRptAccumulated.csh_DiscountSalesCouponTax		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DiscountSalesCouponTax			)+Number(XMLCashRpt.csh_DiscountSalesCouponTax));
	/*
	XMLCashRptAccumulated.csh_GCARedeemQuantity				= Number(Number(XMLCashRptAccumulated.csh_GCARedeemQuantity					)+Number(XMLCashRpt.csh_GCARedeemQuantity));
	XMLCashRptAccumulated.csh_GCARedeemAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCARedeemAmount					)+Number(XMLCashRpt.csh_GCARedeemAmount));
	XMLCashRptAccumulated.csh_GCARedeemExcess				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCARedeemExcess					)+Number(XMLCashRpt.csh_GCARedeemExcess));
	XMLCashRptAccumulated.csh_GCBRedeemQuantity				= Number(Number(XMLCashRptAccumulated.csh_GCBRedeemQuantity					)+Number(XMLCashRpt.csh_GCBRedeemQuantity));
	XMLCashRptAccumulated.csh_GCBRedeemAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCBRedeemAmount					)+Number(XMLCashRpt.csh_GCBRedeemAmount));
	XMLCashRptAccumulated.csh_GCBRedeemExcess				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCBRedeemExcess					)+Number(XMLCashRpt.csh_GCBRedeemExcess));
	*/
	/*
	XMLCashRptAccumulated.csh_CreditSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_CreditSalesQuantity				)+Number(XMLCashRpt.csh_CreditSalesQuantity));
	XMLCashRptAccumulated.csh_CreditSalesAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CreditSalesAmount				)+Number(XMLCashRpt.csh_CreditSalesAmount));
	*/
	XMLCashRptAccumulated.csh_NonProductSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductSalesAmount			)+Number(XMLCashRpt.csh_NonProductSalesAmount));
	XMLCashRptAccumulated.csh_NonProductSalesTax			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductSalesTax				)+Number(XMLCashRpt.csh_NonProductSalesTax));
	XMLCashRptAccumulated.csh_NoTaxSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_NoTaxSalesQuantity				)+Number(XMLCashRpt.csh_NoTaxSalesQuantity));
	XMLCashRptAccumulated.csh_GSTAmount						= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GSTAmount						)+Number(XMLCashRpt.csh_GSTAmount));
	XMLCashRptAccumulated.csh_NoTaxSalesAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_NoTaxSalesAmount				)+Number(XMLCashRpt.csh_NoTaxSalesAmount));
	XMLCashRptAccumulated.csh_PromoSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_PromoSalesQuantity				)+Number(XMLCashRpt.csh_PromoSalesQuantity));
	XMLCashRptAccumulated.csh_PromoSalesAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoSalesAmount				)+Number(XMLCashRpt.csh_PromoSalesAmount));
	XMLCashRptAccumulated.csh_PromoSalesTax					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoSalesTax					)+Number(XMLCashRpt.csh_PromoSalesTax));

	
	
	for(iCount=0; iCount<NEWMAXALIQUOTA; iCount++) {
		var cmd = "XMLCashRpt.csh_PromoTax_" + iCount + ".Quantity";
		var testNode = eval(cmd);
		var evaluate;
		if(0!=testNode.length()) {
			// csh_PromoTax_
			cmd = "XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_PromoTax_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Amount) + Number(XMLCashRpt.csh_PromoTax_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Tax) + Number(XMLCashRpt.csh_PromoTax_" + iCount + ".Tax))";
			evaluate = eval(cmd);
		}
	}

	for(iCount=0; iCount<NEWMAXALIQUOTA; iCount++) {
		var cmd = "XMLCashRpt.csh_EatInSalesBrack_" + iCount + ".Quantity";
		var testNode = eval(cmd);
		var evaluate;
		if(0!=testNode.length()) {
			// csh_EatInSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_TakeOutSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_RefundBrack_
			cmd = "XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_RefundBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_RefundBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_RefundBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OverringBrack_
			cmd = "XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OverringBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OverringBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OverringBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_PromoBrack_
			cmd = "XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_PromoBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_PromoBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_PromoBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_WasteBrack_
			cmd = "XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_WasteBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_WasteBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_WasteBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ManagerMealBrack_
			cmd = "XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ManagerMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ManagerMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ManagerMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EmployeeMealBrack_
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EmployeeMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EmployeeMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EmployeeMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EatInProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EatInNonProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInNonProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInNonProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInNonProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_TakeOutProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_TakeOutNonProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutNonProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutNonProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutNonProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherNonProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherNonProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherNonProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherNonProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ManagerMealTotalBrack_
			cmd = "XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ManagerMealTotalBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ManagerMealTotalBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ManagerMealTotalBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EmployeeMealTotalBrack_
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EmployeeMealTotalBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EmployeeMealTotalBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EmployeeMealTotalBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductPromoBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductPromoBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductPromoBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductPromoBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductPromoBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductPromoBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductPromoBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductPromoBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductEmployeeMealBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductEmployeeMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductEmployeeMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductEmployeeMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductEmployeeMealBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductEmployeeMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductEmployeeMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductEmployeeMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductManagerMealBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductManagerMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductManagerMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductManagerMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductManagerMealBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductManagerMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductManagerMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductManagerMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductRefundBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductRefundBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductRefundBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductRefundBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductRefundBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductRefundBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductRefundBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductRefundBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductOverringBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductOverringBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductOverringBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductOverringBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductOverringBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductOverringBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductOverringBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductOverringBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			
			//31.03.2009	OI add Discount Tags for Tax calculation
			// csh_EatInProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EatInNonProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInNonProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInNonProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInNonProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductOverringBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_TakeOutNonProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherNonProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherNonProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherNonProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherNonProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			
		}
	}

	XMLCashRptAccumulated.csh_TcEmpMeal						= Number(Number(XMLCashRptAccumulated.csh_TcEmpMeal						)+ Number(XMLCashRpt.csh_TcEmpMeal));
	XMLCashRptAccumulated.csh_TcMgrMeal						= Number(Number(XMLCashRptAccumulated.csh_TcMgrMeal						)+ Number(XMLCashRpt.csh_TcMgrMeal));
	XMLCashRptAccumulated.csh_TcOverring					= Number(Number(XMLCashRptAccumulated.csh_TcOverring					)+ Number(XMLCashRpt.csh_TcOverring));
	XMLCashRptAccumulated.csh_TcRefund						= Number(Number(XMLCashRptAccumulated.csh_TcRefund						)+ Number(XMLCashRpt.csh_TcRefund));
	XMLCashRptAccumulated.csh_TcOtherReceipt				= Number(Number(XMLCashRptAccumulated.csh_TcOtherReceipt				)+ Number(XMLCashRpt.csh_TcOtherReceipt));
	XMLCashRptAccumulated.csh_TcSkim						= Number(Number(XMLCashRptAccumulated.csh_TcSkim						)+ Number(XMLCashRpt.csh_TcSkim));
	XMLCashRptAccumulated.csh_TcWaste						= Number(Number(XMLCashRptAccumulated.csh_TcWaste						)+ Number(XMLCashRpt.csh_TcWaste));
	XMLCashRptAccumulated.csh_EmployeeMealQuantity			= Number(Number(XMLCashRptAccumulated.csh_EmployeeMealQuantity			)+ Number(XMLCashRpt.csh_EmployeeMealQuantity));
	XMLCashRptAccumulated.csh_EmployeeMealAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealAmount			)+ Number(XMLCashRpt.csh_EmployeeMealAmount));
	XMLCashRptAccumulated.csh_EmployeeMealTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealTax				)+ Number(XMLCashRpt.csh_EmployeeMealTax));
	XMLCashRptAccumulated.csh_ManagerMealQuantity			= Number(Number(XMLCashRptAccumulated.csh_ManagerMealQuantity			)+ Number(XMLCashRpt.csh_ManagerMealQuantity));
	XMLCashRptAccumulated.csh_ManagerMealAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealAmount			)+ Number(XMLCashRpt.csh_ManagerMealAmount));
	XMLCashRptAccumulated.csh_ManagerMealTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealTax				)+ Number(XMLCashRpt.csh_ManagerMealTax));
	XMLCashRptAccumulated.csh_TRedsBeforeTotalQuantity		= Number(Number(XMLCashRptAccumulated.csh_TRedsBeforeTotalQuantity		)+ Number(XMLCashRpt.csh_TRedsBeforeTotalQuantity));
	XMLCashRptAccumulated.csh_TRedsBeforeTotalAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TRedsBeforeTotalAmount		)+ Number(XMLCashRpt.csh_TRedsBeforeTotalAmount));
	XMLCashRptAccumulated.csh_TRedsAfterTotalQuantity		= Number(Number(XMLCashRptAccumulated.csh_TRedsAfterTotalQuantity		)+ Number(XMLCashRpt.csh_TRedsAfterTotalQuantity));
	XMLCashRptAccumulated.csh_TRedsAfterTotalAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TRedsAfterTotalAmount		)+ Number(XMLCashRpt.csh_TRedsAfterTotalAmount));
	XMLCashRptAccumulated.csh_EatInNetSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_EatInNetSalesQuantity			)+ Number(XMLCashRpt.csh_EatInNetSalesQuantity));
	XMLCashRptAccumulated.csh_EatInNetSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNetSalesAmount			)+ Number(XMLCashRpt.csh_EatInNetSalesAmount));
	XMLCashRptAccumulated.csh_EatInNetSalesTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNetSalesTax			)+ Number(XMLCashRpt.csh_EatInNetSalesTax));
	XMLCashRptAccumulated.csh_EatInNetSalesDiscQuantity		= Number(Number(XMLCashRptAccumulated.csh_EatInNetSalesDiscQuantity		)+ Number(XMLCashRpt.csh_EatInNetSalesDiscQuantity));
	XMLCashRptAccumulated.csh_EatInNetSalesDiscAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNetSalesDiscAmount		)+ Number(XMLCashRpt.csh_EatInNetSalesDiscAmount));
	XMLCashRptAccumulated.csh_EatInNetSalesDiscTax			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNetSalesDiscTax		)+ Number(XMLCashRpt.csh_EatInNetSalesDiscTax));
	XMLCashRptAccumulated.csh_TakeOutNetSalesQuantity		= Number(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesQuantity		)+ Number(XMLCashRpt.csh_TakeOutNetSalesQuantity));
	XMLCashRptAccumulated.csh_TakeOutNetSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesAmount		)+ Number(XMLCashRpt.csh_TakeOutNetSalesAmount));
	XMLCashRptAccumulated.csh_TakeOutNetSalesTax			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesTax			)+ Number(XMLCashRpt.csh_TakeOutNetSalesTax));
	XMLCashRptAccumulated.csh_TakeOutNetSalesDiscQuantity	= Number(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesDiscQuantity	)+ Number(XMLCashRpt.csh_TakeOutNetSalesDiscQuantity));
	XMLCashRptAccumulated.csh_TakeOutNetSalesDiscAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesDiscAmount	)+ Number(XMLCashRpt.csh_TakeOutNetSalesDiscAmount));
	XMLCashRptAccumulated.csh_TakeOutNetSalesDiscTax		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesDiscTax		)+ Number(XMLCashRpt.csh_TakeOutNetSalesDiscTax));
	XMLCashRptAccumulated.csh_OtherNetSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherNetSalesQuantity			)+ Number(XMLCashRpt.csh_OtherNetSalesQuantity));
	XMLCashRptAccumulated.csh_OtherNetSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNetSalesAmount			)+ Number(XMLCashRpt.csh_OtherNetSalesAmount));
	XMLCashRptAccumulated.csh_OtherNetSalesTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNetSalesTax			)+ Number(XMLCashRpt.csh_OtherNetSalesTax));
	XMLCashRptAccumulated.csh_OtherNetSalesDiscQuantity		= Number(Number(XMLCashRptAccumulated.csh_OtherNetSalesDiscQuantity		)+ Number(XMLCashRpt.csh_OtherNetSalesDiscQuantity));
	XMLCashRptAccumulated.csh_OtherNetSalesDiscAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNetSalesDiscAmount		)+ Number(XMLCashRpt.csh_OtherNetSalesDiscAmount));
	XMLCashRptAccumulated.csh_OtherNetSalesDiscTax			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNetSalesDiscTax		)+ Number(XMLCashRpt.csh_OtherNetSalesDiscTax));
	XMLCashRptAccumulated.csh_SuggestiveSalesTryQuantity	= Number(Number(XMLCashRptAccumulated.csh_SuggestiveSalesTryQuantity	)+ Number(XMLCashRpt.csh_SuggestiveSalesTryQuantity));
	XMLCashRptAccumulated.csh_SuggestiveSalesQuantity		= Number(Number(XMLCashRptAccumulated.csh_SuggestiveSalesQuantity		)+ Number(XMLCashRpt.csh_SuggestiveSalesQuantity));
	
	XMLCashRptAccumulated.csh_SuggestiveSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_SuggestiveSalesAmount		)+ Number(XMLCashRpt.csh_SuggestiveSalesAmount));
	/*
	XMLCashRptAccumulated.csh_ForeignCurrencyAAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyAAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyAAmount));
	XMLCashRptAccumulated.csh_ForeignCurrencyBAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyBAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyBAmount));
	XMLCashRptAccumulated.csh_ForeignCurrencyCAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyCAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyCAmount));
	XMLCashRptAccumulated.csh_ForeignCurrencyDAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyDAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyDAmount));
	XMLCashRptAccumulated.csh_ForeignCurrencyEAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyEAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyEAmount));
	*/
	XMLCashRptAccumulated.csh_DTTransactionCount			= Number(Number(XMLCashRptAccumulated.csh_DTTransactionCount			)+ Number(XMLCashRpt.csh_DTTransactionCount));
	XMLCashRptAccumulated.csh_DTTransactionCountNP			= Number(Number(XMLCashRptAccumulated.csh_DTTransactionCountNP			)+ Number(XMLCashRpt.csh_DTTransactionCountNP));
	XMLCashRptAccumulated.csh_DTTransactionCountAll			= Number(Number(XMLCashRptAccumulated.csh_DTTransactionCountAll			)+ Number(XMLCashRpt.csh_DTTransactionCountAll));
	XMLCashRptAccumulated.csh_DTAllNetProductSalesAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DTAllNetProductSalesAmount	)+ Number(XMLCashRpt.csh_DTAllNetProductSalesAmount));
	XMLCashRptAccumulated.csh_DTAllTaxProductSalesAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DTAllTaxProductSalesAmount	)+ Number(XMLCashRpt.csh_DTAllTaxProductSalesAmount));
	XMLCashRptAccumulated.csh_TotalSkimAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TotalSkimAmount				)+ Number(XMLCashRpt.csh_TotalSkimAmount));
	XMLCashRptAccumulated.csh_OfflineSalesDayCloseAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OfflineSalesDayCloseAmount	)+ Number(XMLCashRpt.csh_OfflineSalesDayCloseAmount));
	XMLCashRptAccumulated.csh_OffLineSalesMonthCloseAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OffLineSalesMonthCloseAmount)+ Number(XMLCashRpt.csh_OffLineSalesMonthCloseAmount));
	/*
	XMLCashRptAccumulated.csh_OtherPaymentAQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentAQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentAQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentAAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentAAmount			)+ Number(XMLCashRpt.csh_OtherPaymentAAmount));
	XMLCashRptAccumulated.csh_OtherPaymentAExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentAExcess			)+ Number(XMLCashRpt.csh_OtherPaymentAExcess));
	XMLCashRptAccumulated.csh_OtherPaymentBQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentBQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentBQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentBAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentBAmount			)+ Number(XMLCashRpt.csh_OtherPaymentBAmount));
	XMLCashRptAccumulated.csh_OtherPaymentBExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentBExcess			)+ Number(XMLCashRpt.csh_OtherPaymentBExcess));
	XMLCashRptAccumulated.csh_OtherPaymentCQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentCQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentCQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentCAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentCAmount			)+ Number(XMLCashRpt.csh_OtherPaymentCAmount));
	XMLCashRptAccumulated.csh_OtherPaymentCExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentCExcess			)+ Number(XMLCashRpt.csh_OtherPaymentCExcess));
	XMLCashRptAccumulated.csh_OtherPaymentDQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentDQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentDQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentDAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentDAmount			)+ Number(XMLCashRpt.csh_OtherPaymentDAmount));
	XMLCashRptAccumulated.csh_OtherPaymentDExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentDExcess			)+ Number(XMLCashRpt.csh_OtherPaymentDExcess));
	XMLCashRptAccumulated.csh_OtherPaymentEQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentEQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentEQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentEAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentEAmount			)+ Number(XMLCashRpt.csh_OtherPaymentEAmount));
	XMLCashRptAccumulated.csh_OtherPaymentEExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentEExcess			)+ Number(XMLCashRpt.csh_OtherPaymentEExcess));
	*/
	XMLCashRptAccumulated.csh_WTTransactionCount			= Number(Number(XMLCashRptAccumulated.csh_WTTransactionCount			)+ Number(XMLCashRpt.csh_WTTransactionCount));
	XMLCashRptAccumulated.csh_WTTransactionCountNP			= Number(Number(XMLCashRptAccumulated.csh_WTTransactionCountNP			)+ Number(XMLCashRpt.csh_WTTransactionCountNP));
	XMLCashRptAccumulated.csh_WTTransactionCountAll			= Number(Number(XMLCashRptAccumulated.csh_WTTransactionCountAll			)+ Number(XMLCashRpt.csh_WTTransactionCountAll));
	XMLCashRptAccumulated.csh_WTAllNetProductSalesAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_WTAllNetProductSalesAmount	)+ Number(XMLCashRpt.csh_WTAllNetProductSalesAmount));
	XMLCashRptAccumulated.csh_BreakfastSalesaQuantity		= Number(Number(XMLCashRptAccumulated.csh_BreakfastSalesaQuantity		)+ Number(XMLCashRpt.csh_BreakfastSalesaQuantity));
	XMLCashRptAccumulated.csh_BreakfastSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_BreakfastSalesAmount		)+ Number(XMLCashRpt.csh_BreakfastSalesAmount));

	/*add total amount and tc for tenders*/
	XMLCashRptAccumulated.csh_GiftCouponSalesTc	= Number(XMLCashRptAccumulated.csh_GiftCouponSalesTc)+Number(XMLCashRpt.csh_GiftCouponSalesTc);
	XMLCashRptAccumulated.csh_GiftCouponSalesAmount	= (new BigDecimal(XMLCashRptAccumulated.csh_GiftCouponSalesAmount).add(new BigDecimal(XMLCashRpt.csh_GiftCouponSalesAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_GiftCouponSalesExcess	= (new BigDecimal(XMLCashRptAccumulated.csh_GiftCouponSalesExcess).add(new BigDecimal(XMLCashRpt.csh_GiftCouponSalesExcess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.csh_GiftCertificateSalesTc= Number(XMLCashRptAccumulated.csh_GiftCertificateSalesTc	)+Number(XMLCashRpt.csh_GiftCertificateSalesTc);
	XMLCashRptAccumulated.csh_GiftCertificateSalesAmount= (new BigDecimal(XMLCashRptAccumulated.csh_GiftCertificateSalesAmount).add(new BigDecimal(XMLCashRpt.csh_GiftCertificateSalesAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_GiftCertificateSalesExcess= (new BigDecimal(XMLCashRptAccumulated.csh_GiftCertificateSalesExcess).add(new BigDecimal(XMLCashRpt.csh_GiftCertificateSalesExcess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.csh_GiftCardSalesTc	= Number(XMLCashRptAccumulated.csh_GiftCardSalesTc)+Number(XMLCashRpt.csh_GiftCardSalesTc);
	XMLCashRptAccumulated.csh_GiftCardSalesAmount	=  (new BigDecimal(XMLCashRptAccumulated.csh_GiftCardSalesAmount).add(new BigDecimal(XMLCashRpt.csh_GiftCardSalesAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_GiftCardSalesExcess	=  (new BigDecimal(XMLCashRptAccumulated.csh_GiftCardSalesExcess).add(new BigDecimal(XMLCashRpt.csh_GiftCardSalesExcess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.csh_OtherPaymentSalesTc= Number(XMLCashRptAccumulated.csh_OtherPaymentSalesTc)+Number(XMLCashRpt.csh_OtherPaymentSalesTc);
	XMLCashRptAccumulated.csh_OtherPaymentSalesAmount	= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPaymentSalesAmount).add(new BigDecimal(XMLCashRpt.csh_OtherPaymentSalesAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_OtherPaymentSalesExcess	= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPaymentSalesExcess).add(new BigDecimal(XMLCashRpt.csh_OtherPaymentSalesExcess))).setScale(CURRENCY_DECIMAL);
	//add tags for every tender, the names will based on tender category
	//native tender
	XMLCashRptAccumulated.csh_NativeCurrencyQuantity= Number(XMLCashRptAccumulated.csh_NativeCurrencyQuantity) + Number(XMLCashRpt.csh_NativeCurrencyQuantity);
	XMLCashRptAccumulated.csh_NativeCurrencyAmount= (new BigDecimal(XMLCashRptAccumulated.csh_NativeCurrencyAmount).add(new BigDecimal(XMLCashRpt.csh_NativeCurrencyAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_NativeCurrencyExcess= (new BigDecimal(XMLCashRptAccumulated.csh_NativeCurrencyExcess).add(new BigDecimal(XMLCashRpt.csh_NativeCurrencyExcess))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_NativeCurrencyChange= (new BigDecimal(XMLCashRptAccumulated.csh_NativeCurrencyChange).add(new BigDecimal(XMLCashRpt.csh_NativeCurrencyChange))).setScale(CURRENCY_DECIMAL);
	
	for(i=1; i< Number(XMLCashRpt.csh_TenderElectronicPayment); i++)
	{
		API.dbg("Electronic Tender intl "+XMLCashRpt.csh_TenderElectronicPayment);
		var cmd = "XMLCashRptAccumulated.csh_CashlessPayment"+i+"Quantity= Number(XMLCashRptAccumulated.csh_CashlessPayment"+i+"Quantity) + Number(XMLCashRpt.csh_CashlessPayment"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CashlessPayment"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_CashlessPayment"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_CashlessPayment"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CashlessPayment"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_CashlessPayment"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_CashlessPayment"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CashlessPayment"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_CashlessPayment"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_CashlessPayment"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderCouponNo); i++)
	{
		API.dbg("Coupon intl "+XMLCashRpt.csh_TenderCouponNo);
		var cmd = "XMLCashRptAccumulated.csh_Coupon"+i+"Quantity= Number(XMLCashRptAccumulated.csh_Coupon"+i+"Quantity) + Number(XMLCashRpt.csh_Coupon"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_Coupon"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_Coupon"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_Coupon"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_Coupon"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_Coupon"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_Coupon"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_Coupon"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_Coupon"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_Coupon"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderForeignCurrencyNo); i++)
	{
		API.dbg("csh_TenderForeignCurrencyNo intl "+XMLCashRpt.csh_TenderForeignCurrencyNo);
		var cmd = "XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Quantity= Number(XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Quantity) + Number(XMLCashRpt.csh_ForeignCurrency"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_ForeignCurrency"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_ForeignCurrency"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_ForeignCurrency"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderCreditSaleNo); i++)
	{
		API.dbg("csh_.csh_TenderCreditSaleNo intl "+XMLCashRpt.csh_TenderCreditSaleNo);
		var cmd = "XMLCashRptAccumulated.csh_CreditSale"+i+"Quantity= Number(XMLCashRptAccumulated.csh_CreditSale"+i+"Quantity) + Number(XMLCashRpt.csh_CreditSale"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CreditSale"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_CreditSale"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_CreditSale"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CreditSale"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_CreditSale"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_CreditSale"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CreditSale"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_CreditSale"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_CreditSale"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderOtherPaymentNo); i++)
	{
		API.dbg("csh_TenderOtherPaymentNo intl "+XMLCashRpt.csh_TenderOtherPaymentNo);
		var cmd = "XMLCashRptAccumulated.csh_OtherPayment"+i+"Quantity= Number(XMLCashRptAccumulated.csh_OtherPayment"+i+"Quantity) + Number(XMLCashRpt.csh_OtherPayment"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_OtherPayment"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPayment"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_OtherPayment"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_OtherPayment"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPayment"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_OtherPayment"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_OtherPayment"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPayment"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_OtherPayment"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_GCertRedeemNo); i++)
	{
		API.dbg("csh_GCertRedeemNo intl "+XMLCashRpt.csh_GCertRedeemNo);
		var cmd = "XMLCashRptAccumulated.csh_GC"+i+"RedeemQuantity= Number(XMLCashRptAccumulated.csh_GC"+i+"RedeemQuantity) + Number(XMLCashRpt.csh_GC"+i+"RedeemQuantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GC"+i+"RedeemAmount= (new BigDecimal(XMLCashRptAccumulated.csh_GC"+i+"RedeemAmount).add(new BigDecimal(XMLCashRpt.csh_GC"+i+"RedeemAmount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GC"+i+"RedeemExcess= (new BigDecimal(XMLCashRptAccumulated.csh_GC"+i+"RedeemExcess).add(new BigDecimal(XMLCashRpt.csh_GC"+i+"RedeemExcess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GC"+i+"RedeemChange= (new BigDecimal(XMLCashRptAccumulated.csh_GC"+i+"RedeemChange).add(new BigDecimal(XMLCashRpt.csh_GC"+i+"RedeemChange))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_GCardRedeemNo); i++)
	{
		API.dbg("XMLCashRpt.csh_GCardRedeemNo intl"+XMLCashRpt.csh_GCardRedeemNo);
		var cmd = "XMLCashRptAccumulated.csh_GCard"+i+"RedeemQuantity= Number(XMLCashRptAccumulated.csh_GCard"+i+"RedeemQuantity) + Number(XMLCashRpt.csh_GCard"+i+"RedeemQuantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GCard"+i+"RedeemAmount= (new BigDecimal(XMLCashRptAccumulated.csh_GCard"+i+"RedeemAmount).add(new BigDecimal(XMLCashRpt.csh_GCard"+i+"RedeemAmount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GCard"+i+"RedeemExcess= (new BigDecimal(XMLCashRptAccumulated.csh_GCard"+i+"RedeemExcess).add(new BigDecimal(XMLCashRpt.csh_GCard"+i+"RedeemExcess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GCard"+i+"RedeemChange= (new BigDecimal(XMLCashRptAccumulated.csh_GCard"+i+"RedeemChange).add(new BigDecimal(XMLCashRpt.csh_GCard"+i+"RedeemChange))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	//add tags for gift card and gift cert sold
	for(i=1; i<= Number(XMLCashRpt.csh_GCertSoldNo); i++)
	{
		API.dbg("csh_GCertSoldNo intl "+XMLCashRpt.csh_GCertSoldNo);
		var cmd = "XMLCashRptAccumulated.csh_GiftCert"+i+"ProductId = XMLCashRpt.csh_GiftCert"+i+"ProductId";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GiftCert"+i+"Quantity = Number(XMLCashRptAccumulated.csh_GiftCert"+i+"Quantity) + Number(XMLCashRpt.csh_GiftCert"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GiftCert"+i+"Sold =(new BigDecimal(XMLCashRptAccumulated.csh_GiftCert"+i+"Sold).add(new BigDecimal(XMLCashRpt.csh_GiftCert"+i+"Sold))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		//var cmd = "XMLCashRpt.GiftCert"+i+"refundQuantity =Number(XMLCashRptAccumulated.GiftCert"+j+"refundQuantity) + Number(XMLCashRpt.GiftCert"+j+"refundQuantity)";
		//eval(cmd);
		//var cmd = "XMLCashRpt.GiftCert"+j+"refundAmount =(new BigDecimal(XMLCashRptAccumulated.GiftCert"+i+"refundAmount).add(new BigDecimal(XMLCashRpt.GiftCert"+i+"refundAmount))).setScale(CURRENCY_DECIMAL)";
		//eval(cmd);
	}
	//gift card sold
	for(i=1; i<= Number(XMLCashRpt.csh_GCSoldNo); i++)
	{
		API.dbg("csh_GCSoldNo intl "+XMLCashRpt.csh_GCSoldNo);
		var cmd = "XMLCashRptAccumulated.csh_GiftCard"+i+"ProductId = XMLCashRpt.csh_GiftCard"+i+"ProductId";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GiftCard"+i+"Quantity = Number(XMLCashRptAccumulated.csh_GiftCard"+i+"Quantity) + Number(XMLCashRpt.csh_GiftCard"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GiftCard"+i+"Sold =(new BigDecimal(XMLCashRptAccumulated.csh_GiftCard"+i+"Sold).add(new BigDecimal(XMLCashRpt.csh_GiftCard"+i+"Sold))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		//var cmd = "XMLCashRpt.GiftCard"+i+"refundQuantity =Number(XMLCashRptAccumulated.GiftCard"+j+"refundQuantity) + Number(XMLCashRpt.GiftCard"+j+"refundQuantity)";
		//eval(cmd);
		//var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@refundAmount =(new BigDecimal(XMLCashRptAccumulated.GiftCert"+i+"Sold.@refundAmount).add(new BigDecimal(XMLCashRpt.GiftCert"+i+"Sold.@refundAmount))).setScale(CURRENCY_DECIMAL)";
		//eval(cmd);
	}
	
	
	for(iCount=1; iCount<=30; iCount++) {
		var taxIdFmt = API.formatNumber(Number(iCount), "00", 2);
		var cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt;
		var testNode = eval(cmd);
		var evaluate;
		if(0!=testNode.length()) {
			cmd = "XMLCashRptAccumulated.csh_TaxType" + taxIdFmt + "=Number(XMLCashRpt.csh_TaxType" + taxIdFmt + ")";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TaxRate" + taxIdFmt + "=Str2Currency(XMLCashRpt.csh_TaxRate" + taxIdFmt + ")";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TaxBasis" + taxIdFmt + "=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TaxBasis" + taxIdFmt + ") + Number(XMLCashRpt.csh_TaxBasis" + taxIdFmt + "))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_Tax" + taxIdFmt + "=Nmb2Currency(Number(XMLCashRptAccumulated.csh_Tax" + taxIdFmt + ") + Number(XMLCashRpt.csh_Tax" + taxIdFmt + "))";
			evaluate = eval(cmd);
		}
	}

	//06.02.2009 oi we need a tender overview
	//<csh_Tender>
	//	<csh_TenderName>TENDER_NATIVE</csh_TenderName>
	//	<csh_TenderId>0</csh_TenderId>
	//	<csh_TenderAmount>37.96</csh_TenderAmount>
	//	<csh_TenderQty>20</csh_TenderQty>
	//<csh_TenderRefundAmount>20.4</csh_TenderRefundAmounty>
	//<csh_TenderRefundQtyy>2</csh_TenderRefundQty>

	//</csh_Tender>
	var i = 0;
	var j = 0;
	for(i=0; i<XMLCashRpt.csh_Tender.length(); i++)
	{
		var x = "0";
		for(j=0; j<XMLCashRptAccumulated.csh_Tender.length(); j++)
		{
			if(Number(XMLCashRptAccumulated.csh_Tender[j].csh_TenderId)  == Number(XMLCashRpt.csh_Tender[i].csh_TenderId))
			{
				x = "1";
				XMLCashRptAccumulated.csh_Tender[j].csh_TenderAmount = new BigDecimal(XMLCashRptAccumulated.csh_Tender[j].csh_TenderAmount).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderAmount)).setScale(CURRENCY_DECIMAL);
				XMLCashRptAccumulated.csh_Tender[j].csh_TenderQty = new BigDecimal(XMLCashRptAccumulated.csh_Tender[j].csh_TenderQt).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderQty)).setScale(CURRENCY_DECIMAL);
				
				//MS 21.01.2011 -enable refund information per tender
				XMLCashRptAccumulated.csh_Tender[j].csh_TenderRefundAmount = new BigDecimal(XMLCashRptAccumulated.csh_Tender[j].csh_TenderRefundAmount).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundAmount)).setScale(CURRENCY_DECIMAL);
				XMLCashRptAccumulated.csh_Tender[j].csh_TenderRefundQty = new BigDecimal(XMLCashRptAccumulated.csh_Tender[j].csh_TenderRefundQty).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundQty)).setScale(CURRENCY_DECIMAL);;
		
				break;
			}
		}

		if(x == "0")
		{
			var tenderTag = <csh_Tender/>;
			tenderTag.csh_TenderName = XMLCashRpt.csh_Tender[i].csh_TenderName.toString();
			tenderTag.csh_TenderId = XMLCashRpt.csh_Tender[i].csh_TenderId.toString();
			tenderTag.csh_TenderCategory = XMLCashRpt.csh_Tender[i].csh_TenderCategory.toString();
			tenderTag.csh_TenderAmount = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderAmount).setScale(CURRENCY_DECIMAL);
			tenderTag.csh_TenderQty = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderQty).setScale(CURRENCY_DECIMAL);
			
			tenderTag.csh_TenderAmount = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderAmount).setScale(CURRENCY_DECIMAL);
			tenderTag.csh_TenderQty = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderQty).setScale(CURRENCY_DECIMAL);
			
			//MS 21.01.2011 -enable refund information per tender
			tenderTag.csh_TenderRefundAmount = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundAmount).setScale(CURRENCY_DECIMAL);
			tenderTag.csh_TenderRefundQty = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundQty).setScale(CURRENCY_DECIMAL);
			
			XMLCashRptAccumulated.appendChild(tenderTag);
		}
	}

}

/**
 * Initialize tax chain values.
 * @param taxTableSize
 * @param tagName
 */
function InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, tagName)
{
	for(var iCount=0; iCount<taxTableSize; iCount ++) {
		var cmd;
		var evaluate;
		var taxRateId = Number(taxTable[iCount].TaxRateId);

		cmd = "XMLCashRpt." + tagName + taxRateId + ".Quantity="+Number(0);
		evaluate = eval(cmd);

		cmd = "XMLCashRpt." + tagName + taxRateId + ".Amount="+Nmb2Currency(0);
		evaluate = eval(cmd);

		cmd = "XMLCashRpt." + tagName + taxRateId + ".Tax="+Nmb2Currency(0);
		evaluate = eval(cmd);
	}
}



/**
* The XMLCashRpt can contain multiple entry for an type ID.
*@params tendersID- array of different tender ids.
*@params searchId- ithe id with which we make the comparison
*@return the true if the ID is not in the array
*/
function searchID(tendersID,searchId)
{ 
	for each (var id in tendersID)
	{
		if(id==searchId)
	    {
		//API.dbg("return false");
		    return false;
		}
	}	
	//API.dbg("return true");
	return true;
}

/**
* The XMLCashRpt can contain multiple entry for an type ID.
*@params XMLCashRpt - is the cash report that need to be changed
*@return the xml in which we have just one entery for every the tender type
*/
function transformXmlCashRpt(XMLCashRptString)
{   
	//API.dbg("transformXML");
	
	var tendersID=new Array();
	var XMLCashRpt= new XML(XMLCashRptString);
	var numerbOfTenders=0;
	//API.dbg(XMLCashRpt.csh_Tender[0]);
	
	//take all the ids  and put them in tendersID array
	for each ( var tender in XMLCashRpt.csh_Tender )
	{	
		if( searchID( tendersID,tender.csh_TenderId ) ==true)
		{
		   //API.dbg("tendersID: " + tender.csh_TenderId);
		   tendersID.push( tender.csh_TenderId );
		}
		numerbOfTenders++;
	}
	
	//generate the cumulative information for the tenderIDs (for german store is not an issue) the report.nps and the report_ISP generates the same output. 
	//maybe it must be sum up this is the reason why I create these for each
	var tenders= new XML("<tenders/>"); //will have an xml <tenders>< {csh_Tender></csh_Tender>} </tenders> 
	for each (var id in tendersID)
	{
		/*
		<csh_Tender>
		<csh_TenderName>TENDER_NATIVE</csh_TenderName>
		<csh_TenderId>0</csh_TenderId>
		<csh_TenderAmount>37.96</csh_TenderAmount>
		<csh_TenderQty>20</csh_TenderQty>
		<csh_TenderRefundAmount>20.4</csh_TenderRefundAmounty>
		<csh_TenderRefundQtyy>2</csh_TenderRefundQty>
		</csh_Tender>s
		*/
		
		for each( var tenderInfo in XMLCashRpt.csh_Tender.(csh_TenderId == id) ) //select all the tenders with a specific id
		{
			//API.dbg("tendersAmount: " + tenderInfo.csh_TenderAmount);
			tenders.csh_Tender.csh_TenderName = tenderInfo.csh_TenderName;
			tenders.csh_Tender.csh_TenderId = tenderInfo.csh_TenderId;
			tenders.csh_Tender.csh_TenderAmount = tenderInfo.csh_TenderAmount; 
			tenders.csh_Tender.csh_TenderQty = tenderInfo.csh_TenderQty;
			
			//MS 21.01.2011 -enable refund information per tender
			tenders.csh_Tender.csh_TenderRefundAmount = tenderInfo.csh_TenderRefundAmount;
			tenders.csh_Tender.csh_TenderRefundQty = tenderInfo.csh_TenderRefundQty;
		}
	}
	
	//modify the report, eliminate the duplicates
	var IDs=new Array(); //array with different IDs that will remains in the cash report.
	//API.dbg("lenght"+XMLCashRpt.csh_Tender.lenght);
	for (var i=0; i < numerbOfTenders; i++)
	{
		if( searchID( IDs , XMLCashRpt.csh_Tender[i].csh_TenderId ) == true)  //if these is the first id, we insert in the list of ids and we change the date
		{
		   IDs.push( XMLCashRpt.csh_Tender[i].csh_TenderId );
		   //03.02.2009 OI	this stuff cuts the amount and quantity
		  // var newInfo = tenders.csh_Tender.(csh_TenderId== XMLCashRpt.csh_Tender[i].csh_TenderId); //select the tender with the specified id from the tenders structure that was created
		   //API.dbg(newInfo.csh_TenderId + " " +  tenders.csh_Tender.csh_TenderId);
		  // XMLCashRpt.csh_Tender[i].csh_TenderAmount = newInfo.csh_TenderAmount;
		   //XMLCashRpt.csh_Tender[i].csh_TenderQty = newInfo.csh_TenderQty; 
		}	
		else //is a duplicate we must delete it and after we delete it the tenderInfo will not have the same number of element so we must decrement
		{
		    //API.dbg("delete");
			delete XMLCashRpt.csh_Tender[i];
			numerbOfTenders--;
			i--;
		}
	}

	//API.dbg(XMLCashRpt);
	
	return XMLCashRpt;
}



/**
 * PUBLIC
 * formatBOIUpload
 * @brief:	Formats a upload data to ISP DLL interface. Receives a XML with Way Station
 *			format and translate it into a XML suitable to ISPDLL. 
 *			It is not necessary to worry about the POS id (POS specific or SW)
 *			because it has already been considered during report generation.
 * @param: config - Configuration XML. The tag CustomData contains the command code
 * @param: data - The XML from Way Station
 * @signature public java.lang.StringBuffer formatBOIUpload(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function formatBOIUpload(config, data) {

//API.dbg(config);
	var rptCashConsolidated=12;		// RPTCASHCONSOLIDATED

	//executeFunctionInScript("reports.nps", "initXMLCashReport", true);
	initXMLCashReport();
	WS_init(config, data);
//API.dbg(rootCash);
//API.dbg(rootPmix);
//API.dbg(rootSOS);

//API.dbg("===BOICommand:"+BOICommand);

	switch(BOICommand) {
		case "0x26": // Quarter Hour Summary (Sales) 
			var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, rptCashConsolidated, rootTaxTable);
			//var XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, null, rptCashConsolidated);
			var resp=<methodresponse/>;

			resp.params.param.NetSales=Str2Currency(XMLCashRpt.TOTALNETSALES.@value);
			resp.params.param.NonProductSales=Str2Currency(XMLCashRpt.NonProductSales.@value);
			resp.params.param.TransactionCount=Number(XMLCashRpt.TotalTCAC.@tc);
			resp.params.param.DTProductNetSales=Str2Currency(XMLCashRpt.NetsalesDThru.@amount);
			resp.params.param.DTTransactionCount=Number(XMLCashRpt.NetsalesDThru.@tc);

			WS_addLine(WSBOI_HEADER+resp);
		break;

		case "0x27": // International Cash XML translation
			rptCashConsolidated=41;		// RPTINTCASHCONSOLIDATED
			// fall thru
		case "0x25": // Cash XML translation
			var CurrentForeverReading=0;
			var allClosed=true;
			var XMLCashRpt;

//API.dbg("POSID["+posId+"]\n");
			if(posId==0x4b) {
				//POS specific
				// check if store is closed (all POS closed)
				for each (var pos in rootCash.POS) {
					if(pos.@status!="CLOSED") {
						allClosed=false;
		            		}
				}
				if((true==allClosed) && (businessDate<=rootCash.@requestDate)) {
					CurrentForeverReading=WS_summUniqueNodesAttributeValues(rootCash.POS, "finalGT");
					if(0x25==BOICommand) {
						XMLCashRpt = new XML("<XMLCashRpt/>");

						AddXMLCashRpt(XMLCashRpt, XMLCashRpt);
						XMLCashRpt.Openingreading.@value=Number(CurrentForeverReading);
						XMLCashRpt.Closereading.@value=Number(CurrentForeverReading);
					}
					else {
						XMLCashRpt = new XML("<dailyinternationalcashfile/>");
						// tax table
						var taxTable = rootTaxTable.TaxTable;
						var taxTableSize = taxTable.length();

						AddXMLIntlCashRpt(XMLCashRpt, XMLCashRpt);
						XMLCashRpt.csh_OpeningForeverReading=Nmb2Currency(CurrentForeverReading);
						XMLCashRpt.csh_CurrentForeverReading=Nmb2Currency(CurrentForeverReading);

						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoTax_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_RefundBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OverringBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_WasteBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealTotalBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealTotalBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductPromoBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductPromoBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductEmployeeMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductEmployeeMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductManagerMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductManagerMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductRefundBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductRefundBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductOverringBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductOverringBrack_");
						//31.03.2009	OI add Discount Tags for Tax calculation
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductDiscountBrack_");


						for(var iCount=0; iCount<taxTableSize; iCount ++) {
							var cmd;
							var evaluate;
							var taxIdFmt = API.formatNumber(Number(iCount+1), "00", 2);

							cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRateId)";
							evaluate = eval(cmd);
							cmd = "XMLCashRpt.csh_TaxRate" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRate)";
							evaluate = eval(cmd);
							cmd = "XMLCashRpt.csh_TaxBasis" + taxIdFmt + "=Nmb2Currency(0)";
							evaluate = eval(cmd);
							cmd = "XMLCashRpt.csh_Tax" + taxIdFmt + "=Nmb2Currency(0)";
							evaluate = eval(cmd);
						 }
					}
				}
				else {
					XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, rptCashConsolidated, rootTaxTable);
					//XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, null, rptCashConsolidated, rootTaxTable);
					//WS_addLine(XMLCashRpt);
				}
				
				//the report must be changed in order to eliminate duplicate tender nodes.
				XMLCashRpt = transformXmlCashRpt(XMLCashRpt);
								
				WS_addLine(WSBOI_HEADER);
				WS_addLine("<methodresponse><params>");
				WS_addLine(XMLCashRpt);
				WS_addLine("</params></methodresponse>");
			}
			else {
				var	foundPOS=false;
				var XMLCashRptAccumulated;

				if(0x25==BOICommand) {
					XMLCashRptAccumulated = new XML("<XMLCashRpt/>");
				}
				else {
					XMLCashRptAccumulated = new XML("<dailyinternationalcashfile/>");
				}

				for each (var item in rootCash.POS) {
//API.dbg("ID["+item.@id+"]\n");
//API.dbg("POD["+item.@podShort+"]\n");
					if(((Number(posId)==Number(item.@id)) && (0x49!=posId) && (0x4A!=posId) ) ||
						((posId==0x49)&&(item.@podShort=="FC")) ||
						((posId==0x4A)&&(item.@podShort=="DT"))) {
						// find the PMIX data for the respective POS Id
						//var itemPmix=rootPmix.POS.(@id==item.@id);
//API.dbg("Pmix ID["+itemPmix.@id+"]\n");

						// parse 'data' again if necessary
						if((null==rootConfig)||(null==rootCash)||(null==rootPmix)) {
							WS_init(config, data);
						}

						if((item.@status=="CLOSED") && (businessDate<=rootCash.@requestDate)){
							CurrentForeverReading=item.@finalGT;
							if(0x25==BOICommand) {
								XMLCashRpt = new XML("<XMLCashRpt/>");
								AddXMLCashRpt(XMLCashRptAccumulated, XMLCashRpt);
								XMLCashRptAccumulated.Openingreading.@value=Number(CurrentForeverReading);
								XMLCashRptAccumulated.Closereading.@value=Number(CurrentForeverReading);

								// TODO: it must accumulate the readings when groupping for FC and DT
								// but it must disconsider duplication due to POD type change
								//XMLCashRptAccumulated.Openingreading.@value=Number(XMLCashRptAccumulated.Openingreading.@value)+Number(CurrentForeverReading);
								//XMLCashRptAccumulated.Closereading.@value=Number(XMLCashRptAccumulated.Closereading.@value)+Number(CurrentForeverReading);
							}
							else {
								XMLCashRpt = new XML("<dailyinternationalcashfile/>");
								// tax table
								var taxTable = rootTaxTable.TaxTable;
								var taxTableSize = taxTable.length();

								AddXMLIntlCashRpt(XMLCashRptAccumulated, XMLCashRpt);
								XMLCashRpt.csh_OpeningForeverReading=Nmb2Currency(CurrentForeverReading);
								XMLCashRpt.csh_CurrentForeverReading=Nmb2Currency(CurrentForeverReading);

								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoTax_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInSalesBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutSalesBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherSalesBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_RefundBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OverringBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_WasteBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductSalesBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductSalesBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductSalesBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductSalesBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductSalesBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductSalesBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealTotalBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealTotalBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductPromoBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductPromoBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductEmployeeMealBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductEmployeeMealBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductManagerMealBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductManagerMealBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductRefundBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductRefundBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductOverringBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductOverringBrack_");
								//31.03.2009	OI add Discount Tags for Tax calculation
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductDiscountBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductDiscountBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductDiscountBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductDiscountBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductDiscountBrack_");
								InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductDiscountBrack_");


								for(var iCount=0; iCount<taxTableSize; iCount ++) {
									var cmd;
									var evaluate;
									var taxIdFmt = API.formatNumber(Number(iCount+1), "00", 2);

									cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRateId)";
									evaluate = eval(cmd);
									cmd = "XMLCashRpt.csh_TaxRate" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRate)";
									evaluate = eval(cmd);
									cmd = "XMLCashRpt.csh_TaxBasis" + taxIdFmt + "=Nmb2Currency(0)";
									evaluate = eval(cmd);
									cmd = "XMLCashRpt.csh_Tax" + taxIdFmt + "=Nmb2Currency(0)";
									evaluate = eval(cmd);
								}
							}
						}
						else {
							XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, item, rptCashConsolidated, rootTaxTable);
							//XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, item, rptCashConsolidated, rootTaxTable);
							//WS_addLine(XMLCashRpt);
						}
						if(XMLCashRpt!=null) {
							if(0x25==BOICommand) {
								XMLCashRptAccumulated.Openingreading.@value=Number(item.@initialGT);
								XMLCashRptAccumulated.Closereading.@value=Number(item.@finalGT);

								// TODO: it must accumulate the readings when groupping for FC and DT
								// but it must disconsider duplication due to POD type change
								//XMLCashRptAccumulated.Openingreading.@value=Number(XMLCashRptAccumulated.Openingreading.@value)+Number(item.@initialGT);
								//XMLCashRptAccumulated.Closereading.@value=Number(XMLCashRptAccumulated.Closereading.@value)+Number(item.@finalGT);

								AddXMLCashRpt(XMLCashRptAccumulated, XMLCashRpt);
							}
							else {
								AddXMLIntlCashRpt(XMLCashRptAccumulated, XMLCashRpt);
							}
						}
						foundPOS=true;
					}
				}
				if(true==foundPOS) {
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<methodresponse><params>");
					WS_addLine(XMLCashRptAccumulated);
					WS_addLine("</params></methodresponse>");
					//GetPmixByPOD("FC", "", rootPmix);
				}
				else {
					if(0x25==BOICommand) {
						// POS not found in cash report - generate a zeroed cash

						// generates a zeroed value structure

						XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, -1, rootTaxTable);
						//XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, null, -1, rootTaxTable);
/*
						XMLCashRpt = new XML("<XMLCashRpt/>");
						AddXMLCashRpt(XMLCashRpt, XMLCashRpt);
						XMLCashRpt.Openingreading.@value=Number(0);
						XMLCashRpt.Closereading.@value=Number(0);
*/
					}
					else {
						XMLCashRpt = new XML("<dailyinternationalcashfile/>");
						// tax table
						var taxTable = rootTaxTable.TaxTable;
						var taxTableSize = taxTable.length();

						AddXMLIntlCashRpt(XMLCashRpt, XMLCashRpt);
						XMLCashRpt.csh_OpeningForeverReading=Nmb2Currency(0);
						XMLCashRpt.csh_CurrentForeverReading=Nmb2Currency(0);

						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoTax_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_RefundBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OverringBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_WasteBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductSalesBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealTotalBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealTotalBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductPromoBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductPromoBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductEmployeeMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductEmployeeMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductManagerMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductManagerMealBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductRefundBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductRefundBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductOverringBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductOverringBrack_");
						//31.03.2009	OI add Discount Tags for Tax calculation
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductDiscountBrack_");
						InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductDiscountBrack_");


						for(var iCount=0; iCount<taxTableSize; iCount ++) {
							var cmd;
							var evaluate;
							var taxIdFmt = API.formatNumber(Number(iCount+1), "00", 2);

							cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRateId)";
							evaluate = eval(cmd);
							cmd = "XMLCashRpt.csh_TaxRate" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRate)";
							evaluate = eval(cmd);
							cmd = "XMLCashRpt.csh_TaxBasis" + taxIdFmt + "=Nmb2Currency(0)";
							evaluate = eval(cmd);
							cmd = "XMLCashRpt.csh_Tax" + taxIdFmt + "=Nmb2Currency(0)";
							evaluate = eval(cmd);
						 }
					}
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<methodresponse><params>");
					WS_addLine(XMLCashRpt);
					WS_addLine("</params></methodresponse>");
				}
			}
		break;

		case "0x2c": // Quarter Hour Pmix
		case "0x2d": // PMix XML translation
		case "0x2f": // International PMix XML
			WS_addLine(WSBOI_HEADER);
			WS_addLine("<methodresponse><params>");
			generatePmix(BOICommand,rootCash,rootPmix);
			WS_addLine("</params></methodresponse>");
		break;

		case "0x2b":	// Cashout XML translation
			var loginTimeStamp;
			var cashoutTimeStamp;
			var operatorID;

			// Find the rootCash and rootPmix based on POS id and operator session login (nodeId)
			// The XML has the following 
			// <POS id="0001" podShort="FC"...> 
			// <OperatorSession id="2" name="Allan" login="20060127 11:36:15" ....>
			//API.dbg("======== Cashout");
			var loginTime= 	nodeId.substr(0,8)+" "+ 
							nodeId.substr(8,2)+":"+
							nodeId.substr(10,2)+":"+ 
							nodeId.substr(12,2);
			var rootCashout=null;
			var rootPmixout=null;

			//API.dbg("Looking for POS=[" + posId + "] and login=[" + loginTime + "]\n");

			//WS_addLine(WSBOI_HEADER);
			//WS_addLine("<methodresponse><params>");
			var nodeCashPOS=rootCash.POS.(Number(@id)==Number(posId));
			if(null!=nodeCashPOS) {
				var XMLCashRptAccumulated;
				XMLCashRptAccumulated = new XML("<XMLCashRpt/>");
				XMLCashRptAccumulated.RegisterID=""+posId;	// without "" does not work. It writes posId instead of RegisterID sd tag
				XMLCashRptAccumulated.DrawerChangeType=DrawerChangeType;
				XMLCashRptAccumulated.Openingreading.@value=Number(nodeCashPOS[0].@initialGT);

				for each (var opSession in nodeCashPOS.OperatorSession) {
					if(opSession.@login<=loginTime) {
						//var XMLCashRpt = XMLCashReport(opSession, opSession, 6, rootTaxTable);
						// parse 'data' again if necessary
						if((null==rootConfig)||(null==rootCash)||(null==rootPmix)) {
							WS_init(config, data);
						}
						var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, opSession, 6, rootTaxTable);
						//var XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, opSession, 6, rootTaxTable);
						if(XMLCashRpt!=null) {
							AddXMLCashRpt(XMLCashRptAccumulated, XMLCashRpt);
						}
						if(opSession.@login==loginTime) {
							loginTimeStamp=opSession.@login;
							cashoutTimeStamp=opSession.@logout;
							operatorID=opSession.@id;

							XMLCashRptAccumulated.Closereading.@value=XMLCashRpt.Closereading.@value;
						}
					}
				}
				XMLCashRptAccumulated.CashoutTimeStamp=""+cashoutTimeStamp;	// without "" does not work.
				XMLCashRptAccumulated.LoginTimeStamp=""+loginTimeStamp;	// without "" does not work.
				XMLCashRptAccumulated.operatorID=""+operatorID;	// without "" does not work.
				

				WS_addLine(WSBOI_HEADER);
				WS_addLine("<methodresponse><params>");
				WS_addLine(XMLCashRptAccumulated);
				WS_addLine("</params></methodresponse>");
				//WS_addLine(XMLCashRptAccumulated);
			}
		break;

		case "0x81": // DT timing
		case "0x82": // WT timing
		case "0x83": // FC timing
			WS_addLine(WSBOI_HEADER);
			WS_addLine("<methodresponse><params>");
			generateSOS(config, data, rootSOS, BOICommand);
			WS_addLine("</params></methodresponse>");
		break;

		case "0x7d":
			API.dbg("======= Report type ["+posId+"]");
			switch(Number(posId)) {
				case 0x04:	// Detailed Order Log
API.dbg("======= R2D2 - Detailed Order Log");
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<DetailOrderLog>");
					WS_addLine("<NationalStoreNumber>"+storeId+"</NationalStoreNumber>");
					WS_addLine("<POSVersion>"+POSversion+"</POSVersion>");
					WS_addLine("<BusinessDate>"+businessDate.substr(4,2)+"/" + businessDate.substr(6,2) + "/" + businessDate.substr(0,4)+"</BusinessDate>");
					WS_addLine("<DetailedOrders>");

					generateR2D2_DetailedOrderLog(config, rootSOS, rootDetailSOS);
					WS_addLine("</DetailedOrders>");
					WS_addLine("</DetailOrderLog>");
				break;
				case 0x05:	// Menu Item
API.dbg("======= R2D2 - Menu Item");
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<MenuItems>");
					WS_addLine("<NationalStoreNumber>"+storeId+"</NationalStoreNumber>");
					WS_addLine("<BusinessDate>"+businessDate.substr(4,2)+"/" + businessDate.substr(6,2) + "/" + businessDate.substr(0,4)+"</BusinessDate>");

					generateR2D2_MenuItem(config, rootPmix);
					WS_addLine("</MenuItems>");
				break;
				case 0x06:	// FC Quarter Hour Data
API.dbg("======= R2D2 - FC Quarter Hour Data");
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<QtrHrData>");
					WS_addLine("<NationalStoreNumber>"+storeId+"</NationalStoreNumber>");
					WS_addLine("<BusinessDate>"+businessDate.substr(4,2)+"/" + businessDate.substr(6,2) + "/" + businessDate.substr(0,4)+"</BusinessDate>");

					generateR2D2_FCQuarterHourData(config, rootSOS);
					WS_addLine("</QtrHrData>");
				break;
				case 0x07:	// KVS Quarter Hour Data
API.dbg("======= R2D2 - KVS Quarter Hour Data");
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<KVSQtrHrDtl>");
					WS_addLine("<NationalStoreNumber>"+storeId+"</NationalStoreNumber>");
					WS_addLine("<BusinessDate>"+businessDate.substr(4,2)+"/" + businessDate.substr(6,2) + "/" + businessDate.substr(0,4)+"</BusinessDate>");

					generateR2D2_KVSQuarterHourData(config, rootSOS);
					WS_addLine("</KVSQtrHrDtl>");
				break;
			}
		break;

		case "0x20": // Hourly Sales
			// fall thru
		case "0x53": // New Hourly Sales
			WS_addLine(WSBOI_HEADER);
			WS_addLine("<methodresponse><params>");
			generateHourlySales(BOICommand,rootHourlySales,rootSOSFC,rootSOSDT);
			WS_addLine("</params></methodresponse>");
		break;
	}
	return WS_getResponse();
}

function rptFormat(content, size, fill) {
	if (content.toString().length == size) {
		return content.toString();
	}
	
	if (content.toString().length > size) {
		return content.toString().substr(0, size);
	}
	
	if (fill > 0)
		fill = fill.subst(0, 1);
		
	for (ct = content.toString().length; ct < size; ct++) {
		content += fill;
	}
	return content;
}

function WayBusinessUpdateReportProducts(productSsName, namesSsName, storeSsName, date) {
	var productDB;
	var namesDB;
	var storeDB;
	var productSs;
	var namesSs;
	var storeSs;
	var result		= "";
	var updated		= false;

	
	// parsing XML
	try {
		API.dbg("[WayBusinessUpdateReportProducts] Parsing XML: ProductDB");
		productDB	= new XML(API.getProductdb());
		API.dbg("[WayBusinessUpdateReportProducts] Parsing XML: NamesDB");
		namesDB		= new XML(API.getNamesdb());
		API.dbg("[WayBusinessUpdateReportProducts] Parsing XML: StoreDB");
		storeDB = xmlStoreDB;
		if (storeDB == null) {
	    		storeDB = new XML(API.getStoredb());
		}
		API.dbg("[WayBusinessUpdateReportProducts] Parsing XML: ProductDB Backup");
		productSs	= new XML(API.getXMLFile(productSsName));
		API.dbg("[WayBusinessUpdateReportProducts] Parsing XML: NamesDB Backup");
		namesSs		= new XML(API.getXMLFile(namesSsName));
		API.dbg("[WayBusinessUpdateReportProducts] Parsing XML: StoreDB Backup");
		storeSs		= new XML(API.getXMLFile(storeSsName));
	} catch (e) {
		// parser error
		API.dbg("[WayBusinessUpdateReportProducts] Error parsing XML " + result);
		result = "ERROR: Cannot parse XML Files " + e + "\n";
		API.dbg("[WayBusinessUpdateReportProducts] " + result);
		return result;
	}
	
	
	try {
		// RETRIEVE STORE DB DATA
		API.dbg("[WayBusinessUpdateReportProducts] Retrieving data");
		languageCode = storeDB.StoreDB.StoreProfile.Localization.Language + "_" + storeDB.StoreDB.StoreProfile.Localization.CountryId;
		DBSeqNumber = storeDB.StoreDB.StoreDBSeqNumber;
		SnapshotSeqNumber = storeSs.StoreDB.StoreDBSeqNumber;
		
		if (DBSeqNumber == SnapshotSeqNumber) {
			result = "ERROR: Same Version for Configuration and Backup: " + DBSeqNumber;
			API.dbg("[WayBusinessUpdateReportProducts] " + result);
			return result;
		}
		
		// LOAD NAME DB
		API.dbg("[WayBusinessUpdateReportProducts] Loading NamesDB");
		var DBNames = Array();
		// which language?
		var language;
		for each (language in namesDB.Language) {
			if (language.@code == languageCode) {
				break;
			}
		}
		
		for each (productname in language.ProductName) {
			DBNames[productname.ProductCode] = productname;
		}
		
		// LOAD NAME SNAPSHOT
		var snapshotNames = Array();
		// which language?
		for each (language in namesSs.Language) {
			if (language.@code == languageCode) {
				break;
			}
		}
		for each (productname in language.ProductName) {
			snapshotNames[productname.ProductCode] = productname;
		}

		
		// REPORT HEADER
		// guide		          |         |         |         | 
		result		=	"    BUSINESS DATE " + date + "\n";
		result		+=	"\n\n\n";
		result		+=	"======================================\n";
		result		+=	"     BUSINESS UPDATE DATA REPORT      \n";
		result		+=	"            PRODUCT REPORT            \n";
		result		+=	"======================================\n";
		result		+=	"CURRENT PACKAGE ID:   " + DBSeqNumber + "\n"
		result		+=	"PREVIOUS PACKAGE ID:  " + SnapshotSeqNumber + "\n";
		


		// LOAD PRODUCTS
		API.dbg("[WayBusinessUpdateReportProducts] Loading ProductsDB");
		var snapshotProducts = Array();
		var ctProduct = 0;
		for each (product in productSs.Product) {
			snapshotProducts[product.ProductCode] = product;
			ctProduct++;
		}
		
		var DBProducts = Array();
		ctProduct = 0;
		for each (product in productDB.Product) {
			DBProducts[product.ProductCode] = product;
			ctProduct++;
		}



		result		+=	"===========PRODUCTS INCLUDED==========\n";
		result		+=	"PROD CODE  SHRT NAME  DT NAME         \n";
		API.dbg("[WayBusinessUpdateReportProducts] Generating Products Included");
		for each(product in DBProducts) {
			if (typeof(snapshotProducts[product.ProductCode]) == "undefined") {
				result		+=	rptFormat(product.ProductCode, 8, " ") + "   ";
				if (typeof(DBNames[product.ProductCode]) == "undefined") {
					result		+=	rptFormat("", 10, " ") + " ";
					result		+=	rptFormat("", 16, " ");
				} else {
					result		+=	rptFormat(DBNames[product.ProductCode].ShortName, 10, " ") + " ";
					result		+=	rptFormat(DBNames[product.ProductCode].DTName, 16, " ");
				}
				result		+=	"\n";
			}
		}
		result += "\n\n";


		result		+=	"===========PRODUCTS REMOVED===========\n";
		result		+=	"PROD CODE  SHRT NAME  DT NAME         \n";
		API.dbg("[WayBusinessUpdateReportProducts] Generating Products Removed");
		for each (product in snapshotProducts) {
			if (typeof(DBProducts[product.ProductCode]) == "undefined") {
				result		+=	rptFormat(product.ProductCode, 8, " ") + "   ";
				if (typeof(snapshotNames[product.ProductCode]) == "undefined") {
					result		+=	rptFormat("", 10, " ") + " ";
					result		+=	rptFormat("", 16, " ");
				} else {
					result		+=	rptFormat(snapshotNames[product.ProductCode].ShortName, 10, " ") + " ";
					result		+=	rptFormat(snapshotNames[product.ProductCode].DTName, 16, " ");
				}
				result		+=	"\n";
			}
		}
		result += "\n\n";



		// CHECK FOR DIFFERENCES
		result				+=	"===========PRODUCTS UPDATED===========\n";
		result				+=	"CODE      ATTR NAME   PREV     CURR   \n";
		
		var diff;
		API.dbg("[WayBusinessUpdateReportProducts] Generating Products Updated");
		for each(product in DBProducts) {
			if (typeof(snapshotProducts[product.ProductCode]) == "undefined") {
				continue; 
			}
			
			snapshot	= snapshotProducts[product.ProductCode];	
			ssnames		= snapshotNames[product.ProductCode];
			
			
			diff = Array();	
			ctAttr = 0;
			// ATTRIBUTES
			for each (attr in product.attributes()) {
				if (attr != snapshot.attribute(attr.name())) {
					diff[ctAttr]			=	Array()
					diff[ctAttr]['attr']	=	attr.name();
					diff[ctAttr]['from'] 	=	snapshot.attribute(attr.name());
					diff[ctAttr]['to']		=	attr.toString();
					ctAttr++;
				}
			}
			
			// PROD DB CHILDREN
			for each (attr in product.children()) {
				if (attr.hasSimpleContent() && attr.toString() != snapshot.child(attr.name()).toString()) {
					diff[ctAttr]				= Array();
					diff[ctAttr]['attr']		= attr.name();
					if (typeof(snapshot.child(attr.name())) != 'undefined') {
						diff[ctAttr]['from']	= snapshot.child(attr.name()).toString();
					} else {
						diff[ctAttr]['from']	= "";
					}
					diff[ctAttr]['to']			= attr.toString();
					ctAttr++;
				} 
			}
			
			// NAMES ELEMENTS
			if (typeof(DBNames[product.ProductCode]) != "undefined") {
				for each (attr in DBNames[product.ProductCode]) {
					if (attr != ssnames.elements(attr.name())) {
						diff[ctAttr]			= Array();
						diff[ctAttr]['attr']	= attr.name();
						diff[ctAttr]['from']	= ssnames.elements(attr.name());
						diff[ctAttr]['to']		= attr;
						ctAttr++;
					}
				}
			}
			
			// DISTRIBUTION ELEMENTS
			// 1. load distribution points from PosDB and snapshot
			var DBPoints = Array();
			for each (point in product.Distribution.children()) {
				DBPoints[point.toString()] = point;
			}
			var snapshotPoints = Array();
			for each (point in snapshot.Distribution.children()) {
				snapshotPoints[point.toString()] = point;
			}
			
			// check for changes
			for each (point in DBPoints) {
				if (typeof(snapshotPoints[point.toString()]) == 'undefined') {
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= point.name();
					diff[ctAttr]['from']	= "";
					diff[ctAttr]['to']		= point.toString();
					ctAttr++;
				}
			}			
			for each (point in snapshotPoints) {
				if (typeof(DBPoints[point.toString()]) == 'undefined') {
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= point.name();
					diff[ctAttr]['from']	= point.toString();
					diff[ctAttr]['to']		= "";
					ctAttr++;
				}
			}
			
			// PRODUCTION ELEMENTS
			// Grillable
			if (product.Production.Grillable.@doNotPrint != snapshot.Production.Grillable.@doNotPrint) {
				diff[ctAttr]				= Array();
				diff[ctAttr]['attr']		= 'Grillable.@doNotPrint';
				
				if (typeof(snapshot.Production.Grillable.@doNotPrint) == 'undefined') {
					diff[ctAttr]['from']	= "";
				} else {
					diff[ctAttr]['from']	= snapshot.Production.Grillable.@doNotPrint;
				}
				if (typeof(product.Production.Grillable.@doNotPrint) == 'undefined') {
					diff[ctAttr]['to']		= "";
				} else {
					diff[ctAttr]['to']		= product.Production.Grillable.@doNotPrint;
				}
				ctAttr++;
			}
			
			
			if (product.Production.Grillable.@status != snapshot.Production.Grillable.@status) {
				diff[ctAttr]				= Array();
				diff[ctAttr]['attr']		= 'Grillable.@status';
				
				if (typeof(snapshot.Production.Grillable.@status) == 'undefined') {
					diff[ctAttr]['from']	= "";
				} else {
					diff[ctAttr]['from']	= snapshot.Production.Grillable.@status;
				}
				if (typeof(product.Production.Grillable.@status) == 'undefined') {
					diff[ctAttr]['to']		= "";
				} else {
					diff[ctAttr]['to']		= product.Production.Grillable.@status;
				}
				ctAttr++;
			}
			

			// KVS ROUTING
			// 1. load product DB routing
			var DBRouting = Array();
			for each (routing in product.Production.KVSRoutes.children()) {
				DBRouting[routing.@id] = routing;
			}
			// 2. load snapshot DB routing
			var snapshotRouting = Array();
			for each (routing in snapshot.Production.KVSRoutes.children()) {
				snapshotRouting[routing.@id] = routing;
			}
			
			// 3. check for changes
			for each (routing in DBRouting) {
				if (typeof(snapshotRouting[routing.@id]) == 'undefined') {
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= "KVSRouting.@id";
					diff[ctAttr]['from']	= "";
					diff[ctAttr]['to']		= routing.@id;
					ctAttr++;
				}
			}
			
			for each (routing in snapshotRouting) {
				if (typeof(DBRouting[routing.@id]) == 'undefined') {
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= "KVSRouting.@id";
					diff[ctAttr]['from']	= routing.@id;
					diff[ctAttr]['to']		= "";
					ctAttr++;
				}
			}
			
			
			// CAN ADDS ELEMENTS
			// load DB and snapshot
			var DBCanAdds		= Array();
			for each (canadd in product.CanAdds.Component) {
				DBCanAdds[canadd.ProductCode] = canadd;
			}
			var snapshotCanAdds = Array();
			for each (canadd in snapshot.CanAdds.Component) {
				snapshotCanAdds[canadd.ProductCode] = canadd;
			}
			
			// from DB to snapshot
			for each (canadd in DBCanAdds) {
				if (typeof(snapshotCanAdds[canadd.ProductCode]) == 'undefined') {
					// inserted canadd
					diff[ctAttr]				= Array();
					diff[ctAttr]['attr']		= 'CANADD';
					diff[ctAttr]['from']		= "";
					if (typeof(DBNames[canadd.ProductCode]) == 'undefined') {
						diff[ctAttr]['to']		= canadd.ProductCode;
					} else {
						diff[ctAttr]['to']		= DBNames[canadd.ProductCode].ShortName;
					}
				} else {
					// check for updates
					updated = false;
					for each (attr in canadd.children()) {
						// 1. check for existence (avoid crashes)
						// 2. check for difference
						if (typeof(snapshotCanAdds[canadd.ProductCode].child(attr.name())) == 'undefined') {
							continue;
						}
						if (attr.toString() != snapshotCanAdds[canadd.ProductCode].child(attr.name()).toString()) {
							updated = true;						
						}
						
					}
					if (updated) {
						diff[ctAttr]			= Array();
						diff[ctAttr]['attr']	= 'CANADD';
						diff[ctAttr]['from']	= 'UPDATE';
						if (typeof(DBNames[canadd.ProductCode]) == 'undefined') {
							diff[ctAttr]['to']		= canadd.ProductCode;
						} else {
							diff[ctAttr]['to']		= DBNames[canadd.ProductCode].ShortName;
						}
						ctAttr++;
					}
				}
			}
			
			// from snapshot to DB 
			for each (canadd in snapshotCanAdds) {
				if (typeof(DBCanAdds[canadd.ProductCode]) == 'undefined') {
					// removed canadd
					diff[ctAttr]				= Array();
					diff[ctAttr]['attr']		= 'CANADD';
					if (typeof(snapshotNames[canadd.ProductCode]) == 'undefined') {
						diff[ctAttr]['from']	= canadd.ProductCode;
					} else {
						diff[ctAttr]['from']	= snapshotNames[canadd.ProductCode].ShortName;
					}
					diff[ctAttr]['to']			= "";
					ctAttr++;
				}
			}
			
			
			// COMPOSITION ELEMENTS
			// load from DB and snapshot
			var DBComponents = Array();
			for each (component in product.Composition.Component) {
				DBComponents[component.ProductCode] = component;
			}
			var snapshotComponents = Array();
			for each (component in snapshot.Composition.Component) {
				snapshotComponents[component.ProductCode] = component;
			}
			
			for each (component in DBComponents) {
				if (typeof(snapshotComponents[component.ProductCode]) == 'undefined') {
					// inserted component
					diff[ctAttr]				= Array();
					diff[ctAttr]['attr']		= 'COMPOS';
					diff[ctAttr]['from']		= '';
					if (typeof(DBNames[component.ProductCode]) == 'undefined') {
						diff[ctAttr]['to']		= component.ProductCode;
					} else {
						diff[ctAttr]['to']		= DBNames[component.ProductCode].ShortName;
					}
					ctAttr++;
				} else {
					// check for updates
					updated = false;
					for each (attr in component.children()) {
						// 1. check for existence (avoid crashes)
						// 2. check for difference
						if (typeof(snapshotComponents[component.ProductCode].child(attr.name())) == 'undefined') {
							continue;
						}
						if (attr.toString() != snapshotComponents[component.ProductCode].child(attr.name()).toString()) {
							updated = true;						
						}
					}
					if (updated) {
						diff[ctAttr]			= Array();
						diff[ctAttr]['attr']	= 'COMPOS';
						diff[ctAttr]['from']	= 'UPDATE';
						if (typeof(DBNames[canadd.ProductCode]) == 'undefined') {
							diff[ctAttr]['to']		= component.ProductCode;
						} else {
							diff[ctAttr]['to']		= DBNames[component.ProductCode].ShortName;
						}
						ctAttr++;
					}
				}
			}
			
			
			for each (component in snapshotComponents) {
				if (typeof(DBComponents[component.ProductCode]) == 'undefined') {
					// removed component
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= 'COMPOS';
					if (typeof(snapshotNames[component.ProductCode]) == 'undefined') {
						diff[ctAttr]['from']	= component.ProductCode;
					} else {
						diff[ctAttr]['from']	= snapshotNames[component.ProductCode].ShortName;
					}
					diff[ctAttr]['to']		= "";
					ctAttr++;
				}
			}
			
			

			// report all changes
			if (ctAttr > 0) { 
				firstLine			= true;
				firstCanAdd			= true;
				firstComposition	= true
				for each (item in diff) {
					if (firstLine) {
						result	+=	rptFormat(product.ProductCode, 8, " ");
						firstLine = false;
					} else {
						result	+=	"        ";
					}
					
					if (item['from'] == 'UPDATE') {
						result	+=	"  " + rptFormat(item['attr'], 10, " ") + "UPDATED\n";
						result	+=	"            PROD:  " + rptFormat(item['to'], 19, " ") + "\n";
					} else if (item['attr'].toString().length > 10 || item['from'].toString().length > 7 || item['to'].toString().length > 7) {
						result	+=	"  " + rptFormat(item['attr'], 28, " ") + "\n";
						result	+=	"            FROM:  " + rptFormat(item['from'], 19, " ") + "\n";
						result	+=	"            TO:    " + rptFormat(item['to'], 19, " ") + "\n";
					} else {
						result	+=	"  " + rptFormat(item['attr'], 10, " ");
						result	+=	"  " + rptFormat(item['from'], 7, " ");
						result	+=	"  " + rptFormat(item['to'], 7, " ");
						result  +=	"\n";
					}
				}
			}
		}
		
		
		// REPORT FOOTER
		API.dbg("[WayBusinessUpdateReportProducts] Finish Report");
		result		+=	"======================================\n";
		result		+=	"\n\n";
		result		+=	"             END OF REPORT            \n"
		result		+=	"\n\n";
		
	} catch (e) {
		// error
		result = "ERROR: Processing differences " + e + "\n";
		API.dbg("[WayBusinessUpdateReportProducts] " + result);
	}
	
	return result;
}


function WayBusinessUpdateReportPrices(productSsName, storeSsName, date) {
	var result		= "";
	var productDB;
	var storeDB;
	var produtSs;
	var storeSs;

	// xml parsing
	try {
		API.dbg("[WayBusinessUpdateReportPrices] Parsing XML: ProductDB");
		productDB	= new XML(API.getProductdb());
		API.dbg("[WayBusinessUpdateReportPrices] Parsing XML: StoreDB");
		storeDB = xmlStoreDB;
		if (storeDB == null) {
	    		storeDB = new XML(API.getStoredb());
		}
		API.dbg("[WayBusinessUpdateReportPrices] Parsing XML: ProductDB Backup");
		productSs	= new XML(API.getXMLFile(productSsName));
		API.dbg("[WayBusinessUpdateReportPrices] Parsing XML: StoreDB Backup");
		storeSs		= new XML(API.getXMLFile(storeSsName));
	} catch (e) {
		// parser error
		API.dbg("[WayBusinessUpdateReportPrices] Error parsing XML " + result);
		result = "ERROR: Cannot parse XML Files" + e + "\n";
		API.dbg("[WayBusinessUpdateReportPrices] " + result);
		return result;
	}


	try {
		// RETRIEVE STORE DB DATA
		API.dbg("[WayBusinessUpdateReportPrices] Retrieving data");
		languageCode		= storeDB.StoreDB.StoreProfile.Localization.Language + "_" + storeDB.StoreDB.StoreProfile.Localization.CountryId;
		DBSeqNumber			= storeDB.StoreDB.StoreDBSeqNumber;
		SnapshotSeqNumber	= storeSs.StoreDB.StoreDBSeqNumber;

		if (DBSeqNumber == SnapshotSeqNumber) {
			result = "ERROR: Same Version for Configuration and Backup: " + DBSeqNumber;
			API.dbg("[WayBusinessUpdateReportPrices] " + result);
			return result;
		}

		// LOAD PRODUCTS
		// load snapshot products
		API.dbg("[WayBusinessUpdateReportPrices] Loading ProductsDB");
		var snapshotProducts = Array();
		for each (product in productSs.Product) {
			snapshotProducts[product.ProductCode] = product;
		}
		
		// load productdb
		var DBProducts = Array();
		for each (product in productDB.Product) {
			DBProducts[product.ProductCode] = product;
		}
		
		
		// REPORT HEADER
		// guide		          |         |         |         | 
		result		=	"    BUSINESS DATE " + date + "\n";
		result		+=	"\n\n\n";
		result		+=	"======================================\n";
		result		+=	"     BUSINESS UPDATE DATA REPORT      \n";
		result		+=	"             PRICE REPORT             \n";
		result		+=	"======================================\n";
		result		+=	"CURRENT PACKAGE ID:   " + DBSeqNumber + "\n"
		result		+=	"PREVIOUS PACKAGE ID:  " + SnapshotSeqNumber + "\n";	
		
		// PRODUCTS INCLUDED
		result		+=	"===========PRODUCTS INCLUDED==========\n";
		result		+=	"CODE             PRICE   TAX CODE     \n";
		//               12345678 TAKEOUT 123.12  OPTIONAL
		// check for inserted products
		API.dbg("[WayBusinessUpdateReportPrices] Generating Products Included");
		for each (product in DBProducts) {
			if (typeof(snapshotProducts[product.ProductCode]) == "undefined") {
				firstTag = true;
				for each (pricing in product.PriceList.PriceTag.Pricing) {
					if (firstTag) {
						result		+=	rptFormat(product.ProductCode, 8, " ") + " ";
						firstTag = false;
					} else {
						result		+= "         ";
					}
					result			+= rptFormat(pricing.@priceCode, 7, " ") + " ";
					result			+= rptFormat(pricing.Price, 6, " ") + "  ";
					result			+= rptFormat(pricing.Tax.@taxCode, 8, " ") + "\n";
				}
			}
		}
		result		+=	"======================================\n";
		result		+=	"\n";
		
		// UPDATED PRICES
		result		+=	"============UPDATED PRICES============\n";
		result		+=	"CODE             PREV PRICE  CUR PRICE\n";
		//               12345678 TAKEOUT 123.56      123.56
		// check for updated
		API.dbg("[WayBusinessUpdateReportPrices] Generating Updated Prices");	
		for each (product in DBProducts) {
			if (typeof(snapshotProducts[product.ProductCode]) != "undefined") {
				firstTag = true;
				var SnapshotPricing		= Array();
				for each (pricing in snapshotProducts[product.ProductCode].PriceList.PriceTag.Pricing) {
					SnapshotPricing[pricing.@priceCode] = pricing;
				}
				
				for each (pricing in product.PriceList.PriceTag.Pricing) {
					if (typeof(SnapshotPricing[pricing.@priceCode]) == "undefined" || pricing.Price != SnapshotPricing[pricing.@priceCode].Price) {
						if (firstTag) {
							result +=	rptFormat(product.ProductCode, 8, " ") + " ";
							firstTag = false;
						} else {
							result +=	"         ";
						}
						result +=	rptFormat(pricing.@priceCode, 7, " ") + " ";
						if (typeof(SnapshotPricing[pricing.@priceCode]) == "undefined") {
							result +=	rptFormat("", 10, " ") + "  ";
						} else {
							result +=	rptFormat(SnapshotPricing[pricing.@priceCode].Price, 10, " ") + "  ";
						}
						result +=	rptFormat(pricing.Price, 10, " ") + "\n";
					}
				}
			}
		}
		result		+=	"\n";
		
		
		// PRICE TABLE CONFIGURATION
		result		+=	"=======PRICE TABLE CONFIGURATION======\n";
		API.dbg("[WayBusinessUpdateReportPrices] Price Table Configuratio Changes");	
		for each (product in productDB.Product) {
			if (typeof(snapshotProducts[product.ProductCode]) != "undefined") {
				var SnapshotPricing		= Array();
				for each (pricing in snapshotProducts[product.ProductCode].PriceList.PriceTag.Pricing) {
					SnapshotPricing[pricing.@priceCode] = pricing;
				}

				var diffFrom	= Array();
				var diffTo		= Array();
				var ct = 0;
				for each (pricing in product.PriceList.PriceTag.Pricing) {
					if (
							pricing.Tax.@taxCode	!= SnapshotPricing[pricing.@priceCode].Tax.@taxCode	||
							pricing.Tax.@rule		!= SnapshotPricing[pricing.@priceCode].Tax.@rule	||
							pricing.Tax.@entry		!= SnapshotPricing[pricing.@priceCode].Tax.@entry
					) {
						diffFrom[pricing.@priceCode]	= SnapshotPricing[pricing.@priceCode];
						diffTo[pricing.@priceCode]		= pricing;
						ct++;
					}
				}
				
				if (ct == 0) {
					// no differences
					continue;
				}
				
				result +=	"PRODUCT CODE:  " + rptFormat(product.ProductCode, 8, " ") + "\n";
				result +=	"              TAXCODE  RULE        ENT\n";
				
				var firstFrom = true;
				for each (pricing in diffFrom) {
						if (firstFrom) {
							result +=	" FROM ";
							firstFrom = false;
						} else {
							result +=	"      ";
						}
						result +=	rptFormat(pricing.@priceCode, 7, " ") + " ";
						result +=	rptFormat(pricing.Tax.@taxCode, 8, " ") + " ";
						result +=	rptFormat(pricing.Tax.@rule, 11, " ") + " ";
						result +=	rptFormat(pricing.Tax.@entry,3, " ") + "\n";
				}
				
				var firstTo = true;
				for each (pricing in diffTo) {
						if (firstTo) {
							result +=	" TO   ";
							firstTo = false;
						} else {
							result +=	"      ";
						}
						result +=	rptFormat(pricing.@priceCode, 7, " ") + " ";
						result +=	rptFormat(pricing.Tax.@taxCode, 8, " ") + " ";
						result +=	rptFormat(pricing.Tax.@rule, 11, " ") + " ";
						result +=	rptFormat(pricing.Tax.@entry,3, " ") + "\n";
				}
			}
		}
		result		+=	"\n";
		
		
		// TAXES INCLUDED
		result		+=	"\n";
		result		+=	"================TAXES=================\n";
		result		+=	"------------TAXES INCLUDED------------\n";
		result		+=	"TAX ID  TAX DESCR    RATE   STATUS    \n";
		
		// load taxes
		API.dbg("[WayBusinessUpdateReportPrices] Loading Taxes");
		var taxesDB = Array();
		for each (taxtype in storeDB.StoreDB.TaxTable.TaxType) {
			taxesDB[taxtype.TaxId] = taxtype;
		}
		
		var taxesSs = Array();
		for each (taxtype in storeSs.StoreDB.TaxTable.TaxType) {
			taxesSs[taxtype.TaxId] = taxtype;
		}
		
		API.dbg("[WayBusinessUpdateReportPrices] Generating Taxes Included");	
		for each (taxtype in taxesDB) {
			if (typeof(taxesSs[taxtype.TaxId]) == 'undefined') {
				result	+=	rptFormat(taxtype.TaxId, 6, " ") + "  ";
				result	+=	rptFormat(taxtype.TaxDescription, 11, " ") + "  ";
				result	+=	rptFormat(taxtype.TaxRate, 5, " ") + "  ";
				result	+=	rptFormat(taxtype.@statusCode, 8, " ") + "\n";
			}
		}
		result		+=	"\n";
		
		// TAXES REMOVED
		result		+=	"------------TAXES REMOVED-------------\n";
		result		+=	"TAX ID  TAX DESCR                     \n";
		API.dbg("[WayBusinessUpdateReportPrices] Generating Taxes Removed");
		for each (taxtype in taxesSs) {
			if (typeof(taxesDB[taxtype.TaxId]) == 'undefined') {
				result	+=	rptFormat([taxtype.TaxId], 6, " ") + "  ";
				result	+=	rptFormat(taxtype.TaxDescription, 20, " ") + "\n";
			}
		}
		result		+=	"\n";
		
		// TAXES UPDATED
		result		+=	"------------TAXES UPDATED-------------\n";
		API.dbg("[WayBusinessUpdateReportPrices] Generating Taxes Updated" );
		for each (taxtype in taxesDB) {
			if (typeof(taxesSs[taxtype.TaxId]) == 'undefined') {
				continue;
			}
			
			if (
					taxtype.TaxDescription	!=	taxesSs[taxtype.TaxId].TaxDescription	||
					taxtype.TaxRate			!=	taxesSs[taxtype.TaxId].TaxRate			||
					taxtype.@statusCode		!=	taxesSs[taxtype.TaxId].@statusCode
			) {
				result	+=	"TAX ID: " + taxtype.TaxId + "\n";
				result	+=	"      TAX DESCR    RATE   STATUS     \n";
				result	+=	"FROM  ";
				result	+=	rptFormat(taxesSs[taxtype.TaxId].TaxDescription, 11, " ") + "  ";
				result	+=	rptFormat(taxesSs[taxtype.TaxId].TaxRate, 5, " ") + "  ";
				result	+=	rptFormat(taxesSs[taxtype.TaxId].@statusCode, 8, " ") + "\n";
				
				result	+=	"TO    ";
				result	+=	rptFormat(taxtype.TaxDescription, 11, " ") + "  ";
				result	+=	rptFormat(taxtype.TaxRate, 5, " ") + "  ";
				result	+=	rptFormat(taxtype.@statusCode, 8, " ") + "\n";
			}	
		}
		
		result		+=	"\n\n"

		// REPORT FOOTER
		API.dbg("[WayBusinessUpdateReportPrices] Finish Report");
		result		+=	"======================================\n";
		result		+=	"\n\n";
		result		+=	"             END OF REPORT            \n"
		result		+=	"\n\n";
	} catch (e) {
		// error
		result = "ERROR: Processing differences " + e + "\n";
		API.dbg("[WayBusinessUpdateReportPrices] " + result);
	}

	return result;
}



function WayBusinessUpdateReportKPA(storeSsName, screenSsName, date) {
	var storeDB;
	var screenDB;
	var storeSs;
	var screenSs;
	var result		= "";
	
	// parse xml	
	try {
		API.dbg("[WayBusinessUpdateReportKPA] Parsing XML: StoreDB");
		storeDB = xmlStoreDB;
		if (storeDB == null) {
	    		storeDB = new XML(API.getStoredb());
		}
		API.dbg("[WayBusinessUpdateReportKPA] Parsing XML: Screen");
		screenDB	= new XML(API.getScreen());
		API.dbg("[WayBusinessUpdateReportKPA] Parsing XML: StoreDB Backup");
		storeSs		= new XML(API.getXMLFile(storeSsName));
		API.dbg("[WayBusinessUpdateReportKPA] Parsing XML: ScreenBackup");
		screenSs	= new XML(API.getXMLFile(screenSsName));
	} catch (e) {
		// parser error
		API.dbg("[WayBusinessUpdateReportKPA] Error parsing XML " + result);
		result = "ERROR: Cannot parse XML Files" + e + "\n";
		API.dbg("[WayBusinessUpdateReportKPA] " + result);
		return result;
	}
	
	try {
	
		// RETRIEVE STORE DB DATA
		API.dbg("[WayBusinessUpdateReportKPA] Retrieving data");
		languageCode		= storeDB.StoreDB.StoreProfile.Localization.Language + "_" + storeDB.StoreDB.StoreProfile.Localization.CountryId;
		DBSeqNumber			= storeDB.StoreDB.StoreDBSeqNumber;
		SnapshotSeqNumber	= storeSs.StoreDB.StoreDBSeqNumber;
			
		if (DBSeqNumber == SnapshotSeqNumber) {
			result = "ERROR: Same Version for Configuration and Backup: " + DBSeqNumber;
			API.dbg("[WayBusinessUpdateReportKPA] " + result);
			return result;
		}
		
		// REPORT HEADER
		// guide		          |         |         |         | 
		result		=	"    BUSINESS DATE " + date + "\n";
		result		+=	"\n\n\n";
		result		+=	"======================================\n";
		result		+=	"     BUSINESS UPDATE DATA REPORT      \n";
		result		+=	"              KPA REPORT              \n";
		result		+=	"======================================\n";
		result		+=	"CURRENT PACKAGE ID:   " + DBSeqNumber + "\n"
		result		+=	"PREVIOUS PACKAGE ID:  " + SnapshotSeqNumber + "\n";	
		
		
		// SCREENS INCLUDED
		result		+=	"===========SCREENS INCLUDED===========\n";
		result		+=	"SCREEN #  SCREEN TYPE                 \n";
		
		// loading screens
		API.dbg("[WayBusinessUpdateReportKPA] Loading Screens");
		var DBScreens = Array();
		for each (screen in screenDB.Screen) {
			DBScreens[screen.@number] = screen;
		}
		
		var SnapshotScreens = Array();
		for each (screen in screenSs.Screen) {
			SnapshotScreens[screen.@number] = screen;
		}
		
		API.dbg("[WayBusinessUpdateReportKPA] Generating Screens Inserted");
		for each (screen in DBScreens) {
			if (typeof(SnapshotScreens[screen.@number]) == 'undefined') {
				result	+=	rptFormat(screen.@number, 8, " ") + "  ";
				result	+=	rptFormat(screen.@type, 20, " ") + "\n";
			}
		}
		result		+=	"\n";
		
		
		// SCREENS REMOVED
		result		+=	"===========SCREENS REMOVED============\n";
		result		+=	"SCREEN #  SCREEN TYPE                 \n";
		API.dbg("[WayBusinessUpdateReportKPA] Generating Screens Removed");
		for each (screen in SnapshotScreens) {
			if (typeof(DBScreens[screen.@number]) == 'undefined') {
				result	+=	rptFormat(screen.@number, 8, " ") + "  ";
				result	+=	rptFormat(screen.@type, 20, " ") + "\n";
			}
		}
		result		+=	"\n";
		
		
		// SCREENS UPDATED
		result		+=	"===========SCREENS UPDATED============\n";
		API.dbg("[WayBusinessUpdateReportKPA] Generating Screens Updated");
		for each (screen in DBScreens) {
			if (typeof(SnapshotScreens[screen.@number]) == 'undefined') {
				continue;
			}

			// load buttons
			var buttonsDB = Array()
			for each (button in screen.Button) {
				buttonsDB[button.@number] = button;
			}
			
			var buttonsSs = Array();
			for each (button in SnapshotScreens[screen.@number].Button) {
				buttonsSs[button.@number] = button
			}
			
			
			var ctInserted		= 0;
			var	insertedButtons = Array();
			for each (button in buttonsDB) {
				if (typeof(buttonsSs[button.@number]) == 'undefined') {
					insertedButtons[button.@number] = button;
					ctInserted++;
				}
			}
			
			var ctRemoved		= 0;
			var removedButtons	= Array();
			for each (button in buttonsSs) {
				if (typeof(buttonsDB[button.@number]) == 'undefined') {
					removedButtons[button.@number] = button;
					ctRemoved++;
				}
			}

			updateResult = '';
			for each (button in buttonsDB) {
				if (typeof(buttonsSs[button.@number]) == 'undefined') {
					continue;
				}
				
				// check button attributes
				var ctUpdatedAttributes		= 0;
				var	ctUpdatedProductCode	= 0;
				var updatedAttributes		= Array();
				var	updatedProductCode		= Array();
				for each (attr in button.attributes()) {
					if (attr != buttonsSs[button.@number].attribute(attr.name())) {
						updatedAttributes[ctUpdatedAttributes]			= Array();
						updatedAttributes[ctUpdatedAttributes]['from']	= buttonsSs[button.@number].attribute(attr.name());
						updatedAttributes[ctUpdatedAttributes]['to']	= buttonsDB[button.@number].attribute(attr.name());
						ctUpdatedAttributes++;
					}
				}
				paramDB = button.Action.(@workflow == 'WF_DoSale').Parameter.(@name == 'ProductCode');
				paramSs = buttonsSs[button.@number].Action.(@workflow == 'WF_DoSale').Parameter.(@name == 'ProductCode');
				if (paramDB.@value != paramSs.@value) {
					updatedProductCode['from']	= paramSs;
					updatedProductCode['to']	= paramDB;
					ctUpdatedProductCode++;
				}
				if (ctUpdatedAttributes > 0 || ctUpdatedProductCode > 0) {
					updateResult	+=	"BUTTON #:  " + rptFormat(button.@number, 27, " ") + "\n";
					updateResult	+=	"ATTR NAME   PREV VALUE    CURR VALUE  \n"
					for each (attr in updatedAttributes) {
						updateResult	+=	rptFormat(attr['from'].name(), 10, " ") + "  ";
						updateResult	+=	rptFormat(attr['from'], 12, " ") + "  ";
						updateResult	+=	rptFormat(attr['to'], 12, " ") + "\n";
					}
					
					if (ctUpdatedProductCode > 0) {
						updateResult	+=	"WF_DOSALE " + "  ";
						updateResult	+=	rptFormat(updatedProductCode['from'].@value, 12, " ") + "  ";
						updateResult	+=	rptFormat(updatedProductCode['to'].@value, 12, " ") + "\n";
					}
					
					updateResult	+=	"\n";
				}
			}


			if (ctInserted > 0 || ctRemoved > 0 || ctUpdatedAttributes > 0 || updateResult != '') {
				result	+=	"SCREEN #:  " + rptFormat(screen.@number, 27, "-") + "\n";
			
				if (ctInserted > 0) {
					result	+=	"------------BUTTONS ADDED-------------\n"
					result	+=	"BUTTON #  BUTTON TITLE                \n";	
					for each (button in insertedButtons) {
						result	+=	rptFormat(button.@number, 8, " ") + "  ";
						result	+=	rptFormat(button.@title, 20, " ") + "\n";
					}
				}

				if (ctRemoved > 0) {
					result	+=	"-----------BUTTONS REMOVED------------\n"
					result	+=	"BUTTON #  BUTTON TITLE               \n";	
					for each (button in removedButtons) {
						result	+=	rptFormat(button.@number, 8, " ") + "  ";
						result	+=	rptFormat(button.@title, 20, " ") + "\n";
					}
				}
				if (updateResult != '') {
					result	+=	"-----------BUTTONS UPDATED------------\n"
					result	+=	updateResult;
				}
				if (ctInserted > 0 || ctRemoved > 0 || updateResult != '') {
					result	+=	"\n";
				}
			}

		}
		
		// REPORT FOOTER
		API.dbg("[WayBusinessUpdateReportKPA] Finish Report");
		result		+=	"======================================\n";
		result		+=	"\n\n";
		result		+=	"             END OF REPORT            \n"
		result		+=	"\n\n";
	} catch (e) {
		// error
		result = "ERROR: Processing differences " + e + "\n";
		API.dbg("[WayBusinessUpdateReportKPA] " + result);
	}

	return result;
}

/*
*this function will execute a remote workflow on every register int he store.
*the workflow will be responsable to call the end of day report printing
*the function that will print the end of day report will check to see if the current register is set for this taks
*/
function WayEndOfDayReportsJS(ctx, token, id)
{ 
	var tok =parseInt(token);
	var ret=true; 
	API.dbg("WayEndOfDayReportsJS ctx: " + ctx + " token: " + token + " id: " + id);
	if( tok ==0x73 ) //will call the procedure only if is a close command
	{ 
		ret =WayExecuteRemoteWF(ctx, "POS*", "WF_PrintEndOfDayReports","isWay=1|msg=0", 300000); //1 is from waystation the msg is put in there because otherwise the WayExecuteRemoteWF will crash the register (there must be at least two parameters)
	}	
	return ret;
} 

/*
* Helper function - for "Pos-db configuration parameter"
* Parameters: storeDbPath - path to the desired parameter in store-db
*			  psoDbpath -path to the desired parameter in pos-db
* Returns the value of a configuration parameter
*/
function getConfigValue(storeDbPath, posDbPath)
{
	if (xmlStoreDB == null) {
	    xmlStoreDB = new XML(API.getStoredb());
	}

	/*
	var value = eval("xmlPosDB."+posDbPath);
	if(value+""!="")
	{
		return  value;
	}
	*/
	return  eval("xmlStoreDB."+storeDbPath)+"";
		
}

