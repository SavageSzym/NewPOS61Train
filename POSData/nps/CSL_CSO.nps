/** 
 * BusinessComponentsCSO.nps
 * This NPS file implements CSO Business Componentes .
 *
 * Copyright (c) 2005-2007 - Torex Retail PLC
 *
 * $Source: /NewPOS/SRC/np61cvs/cvs/___NewPOS6/src/npCore/npBusComp/scripts/BusinessComponentsCSO.nps,v $
 * $Revision: 776 $
 * $Date: 2009-08-06 10:46:38 -0300 (qui, 06 ago 2009) $ (of revision)
 * $Author: rcaram $ (of revision)
 */
 
/* Variable used for version control */
CSL_CSO_VERSION = "https://svn.rdisoftware.com/svn/scm_newpos/global/signed/6.1.17/nps:6785";
//logs the version
API.dbg("***************C S L   V E R S I O N***************"); 
API.dbg("FILE                           VERSION");
API.dbg("CSL_CSO.nps                    " + CSL_CSO_VERSION);
API.dbg("***************************************************");

const GLOBAL_UTF8_PROLOG_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";		// UTF-8 prolog for the exchanged XML messages

/**PosCreateReceiptKioskJS
 *
 * @brief - This BC perform PosCreateReport with appropriate type of receipt
 * @return - true if ok
 * @author - Kalil
 */
function PosCreateReceiptKioskJS(szDataType,szScript,szFlags,szCustParams,szPODtype,szServiceList,szPOSList) {
	var hlp = new BusinessObjectHelper;
	var vatNumber = hlp.findParamInSectionWide("VatNumber","VAT");
	if(undefined == szCustParams) {
		szCustParams="";
	}
	return PosCreateReport(szDataType,"receiptkiosk@reports.nps",szFlags,szCustParams+":0:"+vatNumber,szPODtype,szServiceList,szPOSList);
}

/** PosDoActionFinishKioskJS
 *
 * @brief - Creates the summarized view for external applicaiton, such as: TP UI.
 * @return - view - summarized view.
 * @see BCEvents::onWorkFlowAfterExec()
 * @author - Kalil
 */
function PosDoActionFinishKioskJS(wfName, status, view)
{
	var grillView = lGetGrillView();
	var xml = createActionFinish(wfName, status, (grillView == null ? getKioskView(view) : grillView));
	return PosSendUICmd(xml);
	
	/** createActionFinish
	 *
	 * @brief - Creates the summarized view for external applicaitons, such as: TP UI.
	 * @return - view - summarized view.
	 */
	function createActionFinish(actionName, status, data) {
	    var xml = new StringBuffer();
	    xml.append(GLOBAL_UTF8_PROLOG_XML);
	    xml.append("<Event ");
	    {
	        xml.append(" type=\"ASYNC\"");
	        xml.append(" name=\"UI_ACTION_FINISH\"");
	        xml.append(" status=\"" + status + "\"");
	        xml.append(" action=\"" + actionName + "\"");
	        xml.append(">\n");
        	if (data == null) {
		        xml.append("\t<Payload/>\n");
        	} else {
		        xml.append("\t<Payload>\n");
			        xml.append("\t\t<![CDATA[");
		           	xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		        	xml.append(data);
			        xml.append("]]>\n");
		        xml.append("\t</Payload>\n");
	        }
	        
	    }
	    xml.append("</Event>");
	    return xml.toString();
	}
}

/** getKioskView
 *
 * @brief - Converts the view for the TPUI pattern.
 * @return - view - summarized view.
 * @author - Kalil
 */
function getKioskView(sView) {

	if (sView==null) {
	    return null;
	}
	
	if (false) {
		return sView;
	}

	//since NPS-7579 - Removes AutoCondiment items from view
	sView = removeAutoCondiments(sView);
	
	var xmlView = new XML(sView);
	var viewChildren = xmlView.children();
	var xmlOut = new XML('<ProdInfo/>');
	
	//##################################################################################################################
	// HEADER TAG AND ATTRIBUTES
	//##################################################################################################################
	xmlOut.Header.@command = '0';
	xmlOut.Header.@version = '2';
	
	//##################################################################################################################
	// ORDER TAG AND ATTRIBUTES
	//##################################################################################################################
	orderKey = xmlView.@orderKey;
	storedOrderKey = orderKey.split(":");
	xmlOut.Order.@storedOrderKey	= storedOrderKey[1];
	xmlOut.Order.@major 			= xmlView.@major;
	xmlOut.Order.@minor 			= xmlView.@minor;
	xmlOut.Order.@totalAmount 		= xmlView.@totalAmount;			//TODO : Verify which is the total amount and tax to be sent to the client
	xmlOut.Order.@totalTax 			= xmlView.@totalTax;
	xmlOut.Order.@totalDue 			= xmlView.@totalDue;			
	xmlOut.Order.@saleDate 			= xmlView.@saleDate;
	xmlOut.Order.@saleTime 			= xmlView.@saleTime;
	xmlOut.Order.@status 			= xmlView.@saleStatus;
	xmlOut.Order.@trackStatus 		= xmlView.@trackSaleStatus;
	xmlOut.Order.@saleType			= xmlView.@type;				
	xmlOut.Order.@businessDate 		= xmlView.@businessDay;
	
	var lastItem = 'x';
	var lastLevel = 0;
	var level = 0;
	var item = null;
	var product = null;
	var newProduct = null;
	var changedAfterTotal = false;
	var isVoided = false;
	var realIndex = 0;
			
	//##################################################################################################################
	// ITEMS OF THE ORDER
	//##################################################################################################################
	for each (itemView in xmlView.ItemView) {
		if(lastItem!=itemView.itemCode) {
			if(item!=null) {
				if(changedAfterTotal) {
					item.@changedAfterTotal='true';
				}
				xmlOut.Order.appendChild(item);
			}
			
			isVoided=((itemView.quantity==0) && (itemView.grilledQuantity==0));
			
			//Item Element
			item = new XML('<Item/>');
			item.@voided 			= isVoided;
			item.@qtyPromo 			= itemView.quantityPromo;
			item.@currentSelected 	= itemView.currentSelected;
			item.@indexInternal 	= itemView.itemCode;

			if (isVoided) {
				item.@index = -1;
			} else {
				item.@index = realIndex;
			    realIndex++;
			}
			
			changedAfterTotal 	= false;
			lastItem 			= itemView.itemCode;
			lastLevel 			= 0;
	
		}
		level 	= Number(itemView.level);
		defQty 	= Number(itemView.componentDefaultQtd);
		qty 	= Number(itemView.quantity);
	
		if (itemView.isGrillLine=='true') {
			//##################################################################################################################
			// PRODUCT IS GRILLED
			//##################################################################################################################
			newProduct = new XML('<Grill/>');
			newProduct.@modifiers = itemView.specialModifiers;
			newProduct.@defQty = defQty;
			if(itemView.specialModifiers!="0") {
				newProduct.@qty = defQty;
			} else if(defQty>0) {
				newProduct.@qty = (defQty + qty);
				newProduct.@modQty = qty;
			} else {
				// PLE-283 - Merged from Australia
				newProduct.@modQty = qty;
				newProduct.@qty = qty;
			}
	
		} else {
			newProduct = new XML('<Product/>');
			newProduct.@qty = qty;
		}
	
		newProduct.@code 		= itemView.productCode;
		newProduct.@unitPrice 	= itemView.unitPrice;
		newProduct.@unitTax 	= itemView.unitTax;
		newProduct.@totalPrice 	= itemView.totalPrice;
		newProduct.@totalTax 	= itemView.totalTax;
		newProduct.@name 		= itemView.longName;
		
		if(!changedAfterTotal) {
			changedAfterTotal = ((itemView.quantityChanged=='true') || (itemView.quantityChanged=='TRUE'));
		}
	
		//check levels
		if (level > lastLevel) {
			product.appendChild(newProduct);
			product = newProduct;
		} else if ((level<=lastLevel) && (level!=0)) {
			for(j=0; j<((lastLevel-level)+1); j++) {
				product = product.parent();
			}
			product.appendChild(newProduct);
			product = newProduct;

		} else {
			product = newProduct;
			item.appendChild(product);
		}
		lastLevel=level;
	}
	if(item!=null) {
		if(changedAfterTotal) {
			item.@changedAfterTotal='true';
		}
		xmlOut.Order.appendChild(item);
	}
	
	var cashless = null;
	cashlessCounter = 0;
	
	//##################################################################################################################
	// TENDERS AND CASHLESS
	//##################################################################################################################
	for each (itemTenderView in xmlView.ItemTenderView) {
		item = new XML('<Tender/>');
		item.@code 		= itemTenderView.code;
		item.@kind		= itemTenderView.kind;						// 0=Payment,1=Allowance,2=Crew Meal,3=Manager Meal,4=Change,5=Change kept,6=returned tender,8=discount coupon,9=payment that was replaced (Gift Card => Cash) -- see: npAdpAccTypes.h
		item.@name 		= itemTenderView.description;
		item.@qty 		= itemTenderView.qty;
		item.@value 	= itemTenderView.value;
		item.@srcPOSId 	= itemTenderView.srcPOSId;
		item.@discMode 	= itemTenderView.discMode;
		//Cashless
		if(itemTenderView.cat == "TENDER_ELECTRONIC_PAYMENT") {
			cashless = new XML('<Cashless/>');
			stripCashlessString(cashless, xmlView.Cashless[cashlessCounter]);
			item.appendChild(cashless);
			cashlessCounter++;
		}
		xmlOut.Order.appendChild(item);
	}
	
	//##################################################################################################################
	// TIMES TAG
	//##################################################################################################################
	for each (itemViewTimes in xmlView.ViewTimes) {
		item = new XML('<Times/>');
		item.@totalTime = itemViewTimes.@totalTime;
		item.@storeTime = itemViewTimes.@storeTime;
		item.@orderTime = itemViewTimes.@orderTime;
		xmlOut.Order.appendChild(item);
		//Only one by XML
		break;
	}
	computeChildrenTotals(xmlOut);
	
	return xmlOut.toXMLString();

	/**removeAutoCondiments
	 *
	 * @brief - Removes AutoCondiment items from view.
	 * @return - xmlOut - Kiosk XML.
	 */
	function removeAutoCondiments(sView) {
		var view = new XML(sView);
	
		for (var j = 0; j < view.ItemView.length(); ++j) {
			var isAC 		= view.ItemView[j].AutoCondiment;
			var acDisplay 	= view.ItemView[j].ACDisplay;
			if (isAC=='true') {
				if (!displaySalePanel(acDisplay)) {
					delete view.ItemView[j]; 
					j--
				}
			}
		}		
	
		return(view.toXMLString());

		function displaySalePanel(acDisplay) {
			var props = acDisplay.split("|");
			for (var w=0;w<props.length;w++) {
				if (props[w]=="pos") {
					return true;
				}
			}
			return false;
		}
	}
	
	/**computeChildrenTotals
	 *
	 * @brief - Computes the VM totals.
	 * @return - xmlOut - Kiosk XML.
	 */
	function computeChildrenTotals(xmlOut) {
		for each (productLvl0 in xmlOut.Order.Item.Product) {
			var totalPrice = Number(productLvl0.@totalPrice);
			var totals = computeRecursively(productLvl0);
			productLvl0.@totalPrice	= Number(productLvl0.@totalPrice) 	+ totals[0];
			productLvl0.@totalTax	= Number(productLvl0.@totalTax) 	+ totals[1];
		}
		/***
		 * Computes its children totals.
		 */
		function computeRecursively(parent) {
			var child         = null; //PLE-283 - Merged from Australia
			var totPrice 	= 0; //grillTotals[0];
			var totTax 		= 0; //grillTotals[1];
			for each (child in parent.Product) {
				var totals 	= computeRecursively(child);
				totPrice	+= Number(child.@totalPrice)+ totals[0];
				totTax 		+= Number(child.@totalTax) 	+ totals[1];
			}
			for each (child in parent.Grill) {
				totPrice	+= Number(child.@totalPrice);
				totTax 		+= Number(child.@totalTax);
			}
			return Array(totPrice, totTax);
		}
	}
	
	/**stripCashlessString
	 *
	 * @brief - Adds the cashless attributes.
	 * @return - none
	 */
	function stripCashlessString(cashless, cashlessStr) {
		//TODO : check cashless string format
		//function ParseTrackInfo(retcode,cardType)
		//function cashlessPayment(tenderId,tenderValue,refund)
		//TODO : check the split
		splitStr = cashlessStr.split("@");
		if (splitStr.length < 9) {
			return;
		}
		cashless.@cardProv = splitStr[1];
		cashless.@cardNum = splitStr[2];
		cashless.@expireDt = splitStr[3];
		cashless.@authNum = splitStr[4];
		cashless.@printFlag = splitStr[5];
		cashless.@seqNum = splitStr[6];
		cashless.@gcBalance = splitStr[8];
		cashless.@accountNum = splitStr[9];
	}
}

/** PosSwitchKioskUIJS
 *
 * @brief - Switches the UI driver between "npposGUI.dll" and "npGUIExt.dll".
 * @return - true when the action was successfully performed.
 * @author - Kalil
 */
function PosSwitchKioskUIJS() {
	try {
		var hlp 			= new BusinessObjectHelper;
		var prolog			= "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
		var posDataPath		= hlp.getDataDir();
		var posDbName		= hlp.getPosDbName();
		var driverDefault 	= "npposGUI.dll";
		var driverTPUI 		= "npGUIExt.dll";
		var posDbFullName	= (posDataPath + posDbName);
		var xmlBuffer 		= readFile(posDbFullName);
		
		if (xmlBuffer != null) {
			// <?xml version="1.0" encoding="utf-8"?> ---> spidermonkey bugzilla 336551
			xmlBuffer = xmlBuffer.replace("<?xml","<!-- bug_336551");
			xmlBuffer = xmlBuffer.replace("?>","bug_336551 -->");
			var posDb = new XML(xmlBuffer);
			for each(service in posDb.Services.Service) {
				if ((service.@type == "POS") && (service.@startonload == "true")) {
					for each(adaptor in service.Adaptors.Adaptor) {
						if ((adaptor.@name == "standard.ui") && (adaptor.@startonload == "true")) {
							for each(parameter in adaptor.Section.Parameter) {
								if (parameter.@name == "drivername") {
									if (parameter.@value == driverDefault) {
										// From NPGUI to Kios kGUI
										parameter.@value = driverTPUI;
									} else {
										if(PosCheckSessionProperty("KioskCanLogin","true")) {
											// From Kiosk GUI to NPGUI
											parameter.@value = driverDefault;
										} else {
											// kiosk can not access to manager menu the McD logo is disabled.
											return false;
										}
									}
									writeFile(posDbFullName, prolog + posDb.toString());
									return true;
								}
							}
						}
					}
				}
			}
		}
	} catch(ex) {
		PosShowMessage("MSG_BC_CSO_SW_UI",String(ex));
		writeFile(posDataPath + "/" + "pos-db_failed.xml", xmlBuffer);
	}
	return false;
}

/**PosDoCloneItemKioskJS
 *
 * @brief - Clones a given sale item based on the products list.
 * @return - TRUE - when well succeeded.
 * @author - Kalil
 */
function PosDoCloneItemKioskJS(LstProducts, ItemIndex) {
	/*
		<?xml version="1.0" encoding="UTF-8"?>
		<Action type="WORKFLOW" name="WF_Kiosk_DoCloneItem">
			<Parameter name="ProductCodes" value="2050"/>
			<Parameter name="ItemIndex" value="0"/>
		</Action>
		
		<?xml version="1.0" encoding="UTF-8"?>
		<Action type="WORKFLOW" name="WF_Kiosk_DoReduceLine">
			<Parameter name="ItemIndex" value="0"/>
			<Parameter name="Quantity" value="1"/>
		</Action>
		
		<?xml version="1.0" encoding="UTF-8"?>
		<Action type="WORKFLOW" name="WF_Kiosk_DoSale">
			<Parameter name="ProductCode" value="2970|3011|2995|7015"/>
		</Action>
	
		<?xml version="1.0" encoding="UTF-8"?>
		<Action type="WORKFLOW" name="WF_Kiosk_DoCloneItem">
			<Parameter name="ProductCodes" value="2970|3011|2995|7015"/>
			<Parameter name="ItemIndex" value="0"/>
		</Action>	
	*/	

	var ctx=new SessionContext;
	var hlp=new BusinessObjectHelper;
	var view=getKioskView(hlp.getCurrentView());
	var hasStartGrill = false;

	if (PosDoSaleKioskJS(LstProducts)) {
		var xmlView = new XML(view);
		for each(itemView in xmlView.Order.Item) {
			if (ItemIndex == itemView.@index) {
				for each(product in itemView.Product) {
					searchGrillProduct(product);			
					searchGrillProduct(product.Product);			
				}
				if (hasStartGrill) {
					if (!PosDoGrillEnd("3")) {
						PosShowMessage("MSG_BC_CSO_GRILL_ERR1");
						return false;
					}
				}
			}
		}	
	
	}
	return true;
	
	/**searchGrillProduct
	 *
	 * @brief - Searches for the grilled items.
	 * @return - none.
	 * @author - Kalil
	 */	
	function searchGrillProduct(productNode) {
		for each(grillNode in productNode.Grill) {
			if (!hasStartGrill) {
				hasStartGrill = true;
				if (!PosDoGrillStart(ctx.get("baseScreenId"))) {
					PosShowMessage("MSG_BC_CSO_GRILL_ERR2");
					return false;
				}
			}
			grillClone(grillNode);
		}
	}
	
	/**grillClone
	 *
	 * @brief - Performs the grill clone.
	 * @return - none.
	 * @author - Kalil
	 */	
	function grillClone(grillNode) {
		var parentCode  	= grillNode.parent().@code;
		var grillCode 		= grillNode.@code;
		var grillDefQty 	= Number(grillNode.@defQty);
		var grillCurQty 	= Number(grillNode.@qty);
		var grillDifQty		= Number(grillNode.@modQty);
		var grillModifier	= Number(grillNode.@modifiers);
		var tabIndex		= getTabIndex(parentCode)
		
		if (tabIndex == null) {
			PosShowMessage("MSG_BC_CSO_GRILL_ERR3",String(parentCode),String(grillCode),String(grillNode.parent().@name));
		} else {
			if (!PosDoSelGrillIndex(tabIndex)) {
				PosShowMessage("MSG_BC_CSO_GRILL_ERR4",String(tabIndex),String(parentCode));
			} else {
				var recipeIndex = getRecipeIndex(grillCode);
				if (recipeIndex == -1) {
					PosShowMessage("MSG_BC_CSO_GRILL_ERR5",String(grillCode));
				} else {
					// PLE-283 - Merged from Australia
                    if (grillModifier == 1) {                                // MODIFIER (LIGHT)
                            PosDoGrillOper('0','1',recipeIndex);
                    } else if (grillModifier == 2) {                        // MODIFIER (ONLY)
                            PosDoGrillOper('0','2',recipeIndex);
                    } else if (grillModifier == 0) {                        // NO MODIFIER (only quantity was changed)
                        if (grillDifQty > 0) {                                // PLUS QUANTITY
                            for (var y=1 ;y<=grillDifQty;y++) {
                                PosDoGrillOper('p','-1',recipeIndex);
                            }
                        } else if (grillDifQty < 0) {                        // MINUS QUANTITY
                            for (var y=1 ;y<=(grillDifQty*-1);y++) {
                                PosDoGrillOper('m','-1',recipeIndex);
                            }
                        }
                    } else {
                        // We expects only MODIFIERS 0, 1 or 2.
                        PosShowMessage("MSG_BC_CSO_GRILL_ERR6",String(grillCode));   
                    }
				}
			}
		}
		
		/**getRecipeIndex
		 *
		 * @brief - Gets the recipe index based on the given product code.
		 * @return - recipe index.
		 */			
	 	function getRecipeIndex(productCode) {
			var grillView = lGetGrillView();
			var xmlView = new XML(grillView);
			for each(grillComp in xmlView.Component) {
				for each(recipe in grillComp.Item) {
					if (recipe.@code == productCode) {
						return Number(recipe.@index);
					}
				}
			}
			return -1;
		}
		
		/**getTabIndex
		 *
		 * @brief - Gets the tab index based on the given product code.
		 * @return - tab index.
		 */			
		function getTabIndex(productCode) {
			var grillView = lGetGrillView();
			var xmlView = new XML(grillView);
			for each(grillComp in xmlView.Component) {
				if (grillComp.@code == productCode) {
					return grillComp.@index;
				}
			}
			return null;
		}
	}
}


/**PosDoGrillOperKioskRemAddMultiJS
 *
 * @brief - Reduces recipes to its minimum or increases it to its maximum.
 * @return - TRUE - when the operation was well succeeded.
 * @see - WF_Kiosk_DoGrillRemAddAllMulti
 * @author - Kalil
 */			
function PosDoGrillOperKioskRemAddMultiJS(oper, bit) {

	/*
		<?xml version="1.0" encoding="UTF-8"?>
		<Action type="WORKFLOW" name="WF_Kiosk_DoGrillRemAddAllMulti">
			<Parameter name="Oper" value="m"/>
		</Action>
	*/

	var grillView = lGetGrillView();
	var xmlView = new XML(grillView);
	for each(grillComp in xmlView.Component) {
		if (grillComp.@isSelected == 'true') {
			for each(recipeItem in grillComp.Item) {
				var index = Number(recipeItem.@index);
				PosDoGrillOperKioskRemAddJS(oper, bit, index);
			}
		}
	}
	return true;
}

/**PosDoGrillOperKioskRemAddJS
 *
 * @brief - Removes or adds the grilled quantities until it reaches the default quantity.
 * @return - true - when at leas once was successfully performed.
 * @author - Kalil
 */
function PosDoGrillOperKioskRemAddJS(oper, bit, index) {

	if (oper == null || bit == null || index == null) {
		PosShowMessage("MSG_BC_CSO_GRILL_ERR7");
		return false;
	}
	while (canPerform(oper, index)) {
		PosDoGrillOper(oper, bit, index);
	}
	return (true); 

	/**canPerform
	 *
	 * @brief - Verifies if the a given operation can be performed.
	 * @return - true - when can be performed.
	 */
	function canPerform(oper, index) {
		/*
		
		<?xml version="1.0" encoding="UTF-8"?>
		<Action type="WORKFLOW" name="WF_Kiosk_DoSale">
			<Parameter name="ProductCode" value="2970|3011|2995|7015"/>
		</Action>
		
		<?xml version="1.0" encoding="UTF-8"?>
		<Action type="WORKFLOW" name="WF_Kiosk_DoGrillRemAddAll">
			<Parameter name="Oper" value="m"/>
			<Parameter name="ItemIndex" value="0"/>
		</Action>

		*/	
		var grillView = lGetGrillView();
		var xmlView = new XML(grillView);
		
		for each(grillComp in xmlView.Component) {
			var isSelected = grillComp.@isSelected;
			if (isSelected == "true") {
				for each(grillItem in grillComp.Item) {
					var grillIndex = grillItem.@index;
					if (Number(grillIndex) == Number(index)) {
						var grillCurQty		= Number(grillItem.@curQty);
						var grillDefQty		= Number(grillItem.@defQty);
						var grillMinQty		= Number(grillItem.@minQty);
						var modifiers		= Number(grillItem.@modifiers);
						var grillCanRemove 	= grillItem.@canRemove;
						var grillCanAdd 	= grillItem.@canAdd;
						var isDefaultQty 	= grillItem.@isDefaultQty;
						var canPerform 		= false;
						if (oper == "+" || oper == "p") {
							// Wants to reach the default qty
							canPerform = (grillCurQty < grillDefQty);
						} else if (oper == "-" || oper == "m") {
							// Wants to reach the min qty
							canPerform = (grillCurQty > grillMinQty);
						} else {
							PosShowMessage("MSG_BC_CSO_GRILL_ERR8");
						}
						if (modifiers > 0) {
							// Clears the modifiers
							PosDoGrillOper('c','-1',index);
							PosDoGrillOper('0','1',index);
						}
						return (canPerform);
					}
				}
			}
		}
		return false;
	}
}
	
/** lGetGrillView
 *
 *  <GrillInfo>
 *  	<Header>
 *  		<Component>
 *  			<Item/>
 *  		</Component>
 *  </GrillInfo> 
 *
 * @brief - Gets the grll view used on the kiosk.
 * @return - view - summarized grill view.
 * @author - Kalil
 */
function lGetGrillView() {
	var hlp = new BusinessObjectHelper;
	var grillView = hlp.getGrillView();
	
	if (grillView != null) {
		var regs			= grillView.split("<@");
	    var xmlGrill		= new XML('<GrillInfo/>');
	    var summaryLst		= null;
		var recipeLst		= null;
		var compDetailsLst	= null;
		var grillableLst	= null;
		var selectedComp	= null;
		for (var i=0;i<regs.length;i++) {
			var reg = regs[i];
			if (reg.length > 0) {
				if (reg.substr(0, 1) == "0") { 										// 0-GRILL VIEW
					summaryLst = reg.substr(1, reg.length-3).split("|");
				} else if (reg.substr(0, 1) == "1") { 								// 1-RECIPE COMPONENTS
					recipeLst = reg.substr(1, reg.length-3).split("|");
				} else if (reg.substr(0, 1) == "2") { 								// 2-COMP DETAILS
					compDetailsLst = reg.substr(1, reg.length-3).split("|");
				} else if (reg.substr(0, 1) == "3") { 								// 3-GRILLABLE LIST
					grillableLst = reg.substr(1, reg.length-2).split("|");
					var lstIndex = (grillableLst.length - 1);
					var lstComp = grillableLst[lstIndex];
					grillableLst[lstIndex] = lstComp.substr(0, lstComp.length-1);
				} else if (reg.substr(0, 1) == "4") { 								// 4-SELECTED COMPONENT (MX SZ 99)
					selectedComp = ltrim(reg.substr(1, 2));
				}
			}
		}
		
	    /** ADDS THE GRILLABLE ITEMS (COMPONENTS) */
	    for (var i=0; i<grillableLst.length;i++) {
	    	var isSelected = ((i + "") == selectedComp);
	    	var xmlComp = new XML('<Component/>');
			xmlComp.@index 		= i;
			xmlComp.@code 		= rtrim(grillableLst[i].substr(0, 40));
			xmlComp.@name 		= rtrim(grillableLst[i].substr(40));
			xmlComp.@isSelected = (isSelected ? "true" : "false");
			if (isSelected) {
				addRecipeItems(recipeLst, compDetailsLst, xmlComp);
			}
			xmlGrill.appendChild(xmlComp);
	    }
	    
	    if (false) {
		    /** ADDS THE SUMMARY VIEW, IF ANY. */
		    xml.append("\t<Summary>\n");
			    for (var i=0; i<summaryLst.length;i++) {
					xml.append("\t\t<Line ");
						addXMLAttribute(xml, "index", i);
						addXMLAttribute(xml, "name"	, summaryLst[i]);
				    xml.append("/>\n");
			    }
		    xml.append("\t</Summary>\n");
	    }
	    return xmlGrill.toXMLString();
	}
	return null;
	
	
	/** Adds recipe items **/
	function addRecipeItems(recipeLst, compDetailsLst, xmlComp) {
		
		for (var i=0; (recipeLst!=null) && (i<recipeLst.length); i++) {
			if (recipeLst[i].length > 4) {
				var aux 	= 0;
				var gIndex 	= Number(getField(recipeLst[i]	,  4));
				var gDesc 	= getField(recipeLst[i]			, 47);
				var gPrice	= getField(recipeLst[i]			, 11);
				var gGroup 	= getField(recipeLst[i]			,  2); // not used (so far)
				var gX 		= getField(recipeLst[i]			,  6); 
				
				var szStr = recipeLst[i].length;
				var start = szStr-12;

				var gCurQty	= recipeLst[i].substring(start, start + 3);    start+=3; 
				var gDefQty = recipeLst[i].substring(start, start + 3);    start+=3;
				var gMinQty = recipeLst[i].substring(start, start + 3);    start+=3;
				var gMaxQty = recipeLst[i].substring(start, start + 3);    
				
				// TRUE when the quantity was not change (operations minus neither plus were performed)
				var isDefaultQty =  (!PosCheckGrillProperty('?', '-1', gIndex));

				// Standard operations
				var canRemove	= getGrillStatus('-', gIndex);
				var canAdd		= getGrillStatus('+', gIndex);
				
				// Creates the XML grill view.
				var xmlItem = new XML('<Item/>');

				// Basic attributes of the recipe
				xmlItem.@index			= gIndex;
				xmlItem.@code			= compDetailsLst[i];
				xmlItem.@name			= rtrim(gDesc);
				xmlItem.@unitPrice		= ltrim(rtrim(gPrice));
				xmlItem.@curQty			= ltrim(rtrim(gCurQty));
				xmlItem.@defQty			= ltrim(rtrim(gDefQty));
				xmlItem.@minQty			= ltrim(rtrim(gMinQty));
				xmlItem.@maxQty			= ltrim(rtrim(gMaxQty));
				xmlItem.@isDefaultQty	= isDefaultQty;
				// Available operations.
				xmlItem.@canRemove		= canRemove;
				xmlItem.@canAdd			= canAdd;
				// Collection of all set modifiers for byte 0 (zero)
				xmlItem.@modifiers		= hlp.getGrillModifiers(0, gIndex);
								
				xmlComp.appendChild(xmlItem);
			}
		}
		
		/** Gets a fiels based on the given size **/
		function getField(grillItem, sz) {
			var field = grillItem.substring(aux, aux + sz);
			aux += sz;
			return field;
		}
	}
	
	/** Adds a xml attribute in the given XML buffer **/
	function addXMLAttribute(xml, name, value) {
		xml.append(" " + name + "=\"" + value + "\"");
	}
	
	/** Gets the grill status **/
	function getGrillStatus(type, index) {
		// Based on WF_ShowButtonGrill
		if (PosCheckGrillPropertyMulti('c','80000005','-1')) {
			return false;
		} else if (PosCheckGrillProperty(type, '-1', index)) {
			return (!PosCheckGrillProperty('0', '-1', index));
		}
		return false;
	}
}

/** Remove left spaces of String **/
function ltrim(s)
{
	var l=0;
	while(l < s.length && s[l] == ' ')
	{	l++; }
	return s.substring(l, s.length);
}

/** Remove right spaces of String **/
function rtrim(s)
{
	var r=s.length -1;
	while(r > 0 && s[r] == ' ')
	{	r-=1;	}
	return s.substring(0, r+1);
}	

/** PosDoStopWhenOnGrillModeJS
 *
 * @brief - Verifies if the NP6 kernel context is on grill process.
 * @return - TRUE if the kernel is on grill process.
 * @author - Kalil
 */
function PosDoStopWhenOnGrillModeJS(isSilenceMode) {
	var hlp = new BusinessObjectHelper;
	var isOnGrill = hlp.isGrilling();
	if ((isOnGrill) && (isSilenceMode == null || isSilenceMode == "false")) {
		PosShowMessage("MSG_BC_INV_OPER_WHEN_GRILLING");
	}
	return (!isOnGrill);
}

/** PosGoAheadIfOnGrillModeJS
 *
 * @brief - Verifies if the NP6 kernel context is on grill process.
 * @return - TRUE if the kernel is on grill process.
 * @author - Kalil
 */
function PosGoAheadIfOnGrillModeJS(isSilenceMode) {
	var hlp = new BusinessObjectHelper;
	var isOnGrill = hlp.isGrilling();
	
	if (isOnGrill) {
		return (true);
	} else {
		if ((isSilenceMode == null || isSilenceMode == "false")) {
			PosShowMessage("MSG_BC_CSO_GRILL_ERR9");
		}
	}
	return (false);	
}

/** PosDoShowScreenKioskJS
 *
 * @brief - Creates a XML event informing the UI to change its screen number.
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Kalil
 */
function PosDoShowScreenKioskJS(scrNumber) {
	var params = Array("Number|" + scrNumber);
	var xml = lCreateKioskEvent("ASYNC", "UI_SHOW_SCREEN", params);
	return PosSendUICmd(xml);
}

/** lCreateKioskEvent
 *
 * @brief - Local function responsible for creating the XML event for the TP UI.
 * @return - view - XML event.
 * @author - Kalil
 */
function lCreateKioskEvent(type, name, params) {
    var xml = new StringBuffer();
    xml.append(GLOBAL_UTF8_PROLOG_XML);
    xml.append("<Event ");
    {
        xml.append(" type=\"" + type + "\"");
        xml.append(" name=\"" + name + "\"");
        xml.append(">\n");
        for (var i=0; i<params.length; i++) {
			var p = params[i].split("|");
			xml.append("\t<Parameter name=\"" + p[0] + "\" value=\"" + p[1] + "\"/>\n");
        }
    }
    xml.append("</Event>");
    return xml.toString();
}

/**PosDoWFExitKioskJS
 *
 * @brief - Drives the workflow (last step) finalization to a given result code.
 * @return - rval - true when given true.
 * @author - Kalil
 */
function PosDoWFExitKioskJS(rc)
{
	return ((rc == "true") ? (true) : (false));
}

/**PosIsTrnInProgressKioskJS
 *
 * @brief - Verifies if there is a transaction in progress, if there isn't it shows a msg box and return false.
 * @return - rval - True
 * @author - Kalil
 */
function PosIsTrnInProgressKioskJS(isSilenceMode)
{
	var isInProgress = (!PosNotATransactionInProgress("true"));
	
	if (isInProgress) {
		return (true);
	} else {
		if (isSilenceMode == 'false') {
			PosShowMessage("MSG_BC_NO_ORDER_IN_PROGRESS");
		}
		return (false);
	}
}

/**PosDoSaleKioskJS
 *
 * @brief - Sells a given product code.
 * @return - rval - true if allowed to continue
 * @author - Kalil
 */
function PosDoSaleKioskJS(productCode, quantity)
{
	var products = productCode.split("|");

	for (var i=0; i<products.length; i++) {
		var code = products[i];
		if (!lDoKioskSale(code, quantity)) {
			return false;
		}
	}
	return true;
	
	function lDoKioskSale(productCode, quantity) {
		var qty = Number(quantity);
		// Lets check if the quantity was informed.
		if ((quantity != null) && (!isNaN(qty))) {
			// Resets the previous quantity (if any)
			PosDoQuantum(-1);
			// Sets the given quantity (if the quantity is ZERO a void item will be performed when it is not last line)
			PosDoQuantum(qty);
		}
		PosDoMultiChoice(productCode);
		if(!PosDoChoice(productCode)) {
			// Sale did not end with a choice
			if(PosDoSale(productCode)) {
				return(true);
			} else {
				return(false);
			}
		}
		return(true);
	}
}

/**PosDoGrillOperKioskMultiItemsJS
 *
 * @brief - Performs a given grill operation for multiple items.
 * @return - TRUE - when the operation was well succeeded.
 * @author - Kalil
 */           
function PosDoGrillOperKioskMultiItemsJS(opers, indexes, quatities) {
    /*
        <?xml version="1.0" encoding="UTF-8"?>
        <Action name="WF_Kiosk_DoGrillOperMultiItems">
            <Parameter name="Oper" value="p|p"/>
            <Parameter name="CompIndex" value="1|2"/>
            <Parameter name="Quantity" value="4|3"/>
        </Action>
    */
    API.dbg("PosDoGrillOperKioskMultiItemsJS: Performing multi grill operation.");
    if ((opers == null) || (indexes == null) || (quatities == null)) {
        PosShowMessage("MSG_BC_CSO_GRILL_ERR10");
        API.dbg("PosDoGrillOperKioskMultiItemsJS: Invalid parameter. (At least one parameter is NULL)");
        return false;
    } else {
        var _opers         = opers.split("|");
        var _indexes     = indexes.split("|");
        var _quatities     = quatities.split("|");
        if ((_opers.length != _indexes.length) || (_opers.length != _quatities.length)) {
            PosShowMessage("MSG_BC_CSO_GRILL_ERR11");
            API.dbg("PosDoGrillOperKioskMultiItemsJS: Invalid piped parameter. (Incompatible lengths)");
            return false;
        } else {
            var sz = _opers.length;
            for (var i=0; i<sz; i++) {
                var oper     = _opers[i];
                var index     = _indexes[i];
                var qty     = _quatities[i];
                for (var x=0; x<qty; x++) {
                    var rc = PosDoGrillOper(oper, '-1', index);
                    if (!rc) {
                        API.dbg("PosDoGrillOperKioskMultiItemsJS: PosDoGrillOper failed.");
                        return false;
                    }
                }
            }
        }
    }
    API.dbg("PosDoGrillOperKioskMultiItemsJS: Multi grill operation has been successfully performed.");
    return true;
}

/**lGetProdUpgradedJS
 *
 * @brief - This auxiliary receives a product code and a size and returns the upgraded product
 * Return - upgraded product
 */
function lGetProdUpgradedJS(size,prCode) {

	if((size != undefined) && (size != null) && (Number(size) >= 0)) {
		var hlp = new BusinessObjectHelper;
		var curProdDescr = hlp.getProductDescr(prCode);
		if(curProdDescr != null) {
			var prDescr = new XML(curProdDescr);
			if(prDescr != null) {	
				var sizeSel	= prDescr.SizeSelection.Size;
				if(sizeSel != null) {
					for(i=0; i<sizeSel.length(); ++i) {
						if(Number(sizeSel[i].@entry) == Number(size)) {
							return(sizeSel[i].@code);
						}
					}
				}
			}
		}
	}
	else {
		return(prCode);
	}
	return(null);
}

/**PosDoCancelOrderDuetJS
 *
 * @brief - This BC handles order cancelment for CSO/Duet
 * Return - rval - true 
 */
function PosDoCancelOrderDuetJS() {

	if(PosNotATransactionInProgress("true")) {
		return(true);
	}
	if(typeof(PosBillAcceptorJS) == "function") {
		PosBillAcceptorJS(1);
	}
	PosDoVoidSale("false","false");
	if(typeof(PosResetCSOContextJS) == "function") {
		PosResetCSOContextJS();
	}
	var ctx=new SessionContext;
	PosShowScreen(ctx.get("baseScreenId"));
	return(true);
}

/**PosSoundIntervalJS
 *
 * @brief - This BC plays a sound for a screen given a elapsed interval 
 * Return - true
 */
function PosSoundIntervalJS(screenNumber,soundHit) {

	var hlp = new BusinessObjectHelper;
	var screenInfo = hlp.getScreenInfo(screenNumber);
	if(null == screenInfo) {
		// screen not configured
		return(false);
	}
	var screenDescr = new XML(screenInfo);
	if(null == screenDescr) {	
		// screen description not available
		return(false);
	}
	var sound=screenDescr.@sound;
	if((null == sound) || (0 == sound.length)) {
		// no sound for this screen
		return(false);
	}	
	var index=sound.indexOf("|");
	if(index < 0) {
		// no hit sound for this screen
		return(false);
	}
	var visits=screenDescr.@visits;
	sound=sound.substr(index+1);
	index=sound.indexOf("=");
	if(index < 0) {
		// No restrictions, plays always
		PosPlaySound(sound);
		return(true);
	}
	else {
		index=sound.indexOf((visits+"-"+soundHit));
		if(index >= 0) {
			// Sound configured for this hit
			var index1=sound.lastIndexOf(";",index);
			if(index1 >= 0) {
				index1++;
			}
			else {
				index1=0;
			}
			index=sound.indexOf("=",index1);
			if(index > index1) {
				PosPlaySound(sound.substring(index1,index));
				return(true);
			}
		}
	}		
	return(false);
}

/**ChangeSaleTypeGoScreenJS
 *
 * @brief - This BC checks if CSO is in sale mode and if so goes to a screen 
 * Return - true
 */
function ChangeSaleTypeGoScreenJS(saleType,screenNumber,bkfScreenNumber) {

	if(PosIsInSaleMode("false")) {
		var hlp = new BusinessObjectHelper;
		var iSrv = hlp.getServiceIndex();
		var rc=0;
		if(typeof(PosPrinterStsJS) == "function") {
			rc=PosPrinterStsJS(iSrv);
		}
		if(0 == Number(rc)) {
			if(typeof(PosBillAcceptorStsJS) == "function") {
				rc=PosBillAcceptorStsJS(iSrv);
				if(Number(rc) != 0) {
					if(!PosShowConfirmationMessage("BILL_ACCEPTOR_OUT1","Yes","No")) {
						return(false);
					}
				}
			}
			PosChangeButtonProperties("1000","visible|true");
			PosSetSaleType(saleType,"true");
			if(PosIsBreakfastTimeJS()) {
				PosShowScreen(bkfScreenNumber);
			}
			else {
				PosShowScreen(screenNumber);
			}
			return(true);
		}
		else {
			// Printer error
			if(typeof(PosGetPrinterErrorJS) == "function") {
				PosRemoteExecute("PosShowMessage","PRINTER_ERR",PosGetPrinterErrorJS(rc));
			}
		}
	}
	PosShowMessage("MSG_BC_NOT_READYORDER");
	return(false);
}

/**PosLoadSizeImageJS
 *
 * @brief - This BC checks if a given size is available for a product and if so shows image and price 
 * Return - true
 */
function PosLoadSizeImageJS(btnNbr,size,prCode) {

	prCode=lGetProdUpgradedJS(size,prCode);
	if((prCode != undefined) && (prCode != null)) {
		PosChangeButtonProperties(btnNbr,"visible|true");
		PosChangeButtonProperties(btnNbr,"extra|true");
		PosGetPriceForButton(btnNbr,size,prCode);
		return(true);
	}		
	PosChangeButtonProperties(btnNbr,"visible|false");
	return(true);
}

 
/* signed aut version 9-9076
 * authority id = builder
 * authority level = 10
 * authority name = NewPOS release level
 * group = npi
 * validity = 2010-04-18
 * signature type = slash_star
 * time stamp (GMT) = Fri Jun 17 12:25:47 2011
 * certificate = 393735312d37393437004a798899a3cfb30f73b7f00b3d26b3b7d3cff60b2afb6ed6206742a4af6997df11e3e532deba702988ef351ba747bbf392400010
 * =============================================================================================================================
*/
